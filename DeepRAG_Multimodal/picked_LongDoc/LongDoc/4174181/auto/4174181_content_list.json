[
    {
        "type": "text",
        "text": "Cert Guide ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Learn, prepare, and practice for exam success ",
        "page_idx": 0
    },
    {
        "type": "image",
        "img_path": "images/6f2a4fab1906dcdf2bb8e0b2605e42046d3393c458a61e3eb1fbc7d052518f3f.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "CompTIA PenTest+ ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "CompTIA® PenTest+ Cert Guide ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Omar Santos Ron Taylor ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "CompTIA® PenTest+ Cert Guide ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Omar Santos Ron Taylor ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Copyright $\\circledcirc$ 2019 by Pearson Education, Inc. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "All rights reserved. No part of this book shall be reproduced, stored in a retrieval system, or transmitted by any means, electronic, mechanical, photocopying, recording, or otherwise, without written permission from the publisher. No patent liability is assumed with respect to the use of the information contained herein. Although every precaution has been taken in the preparation of this book, the publisher and author assume no responsibility for errors or omissions. Nor is any liability assumed for damages resulting from the use of the information contained herein. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "ISBN-13: 978-0-7897-6035- ISBN-10: 0-7897-6035-5 ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Library of Congress Control Number:  2018956261   \n01 18 ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Trademarks ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "All terms mentioned in this book that are known to be trademarks or service marks have been appropriately capitalized. Pearson IT Certification cannot attest to the accuracy of this information. Use of a term in this book should not be regarded as affecting the validity of any trademark or service mark. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "MICROSOFT® WINDOWS®, AND MICROSOFT OFFICE® ARE REGISTERED TRADEMARKS OF THE MICROSOFT CORPORATION IN THE U.S.A. AND OTHER COUNTRIES. THIS BOOK IS NOT SPONSORED OR ENDORSED BY OR AFFILIATED WITH THE MICROSOFT CORPORATION. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Warning and Disclaimer ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "This book is designed to provide information about the CompTIA PenTest+ exam. Every effort has been made to make this book as complete and accurate as possible, but no warranty or fitness is implied. The information provided is on an “as is” basis. The author and the publisher shall have neither liability nor responsibility to any person or entity with respect to any loss or damages arising from the information contained in this book or from the use of the supplemental online content or programs accompanying it. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS MAKE NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE INFORMATION CONTAINED IN THE DOCUMENTS AND RELATED GRAPHICS PUBLISHED AS PART OF THE SERVICES FOR ANY PURPOSE. ALL SUCH DOCUMENTS AND RELATED GRAPHICS ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND. MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH REGARD TO THIS INFORMATION, INCLUDING ALL WARRANTIES AND CONDITIONS OF MERCHANTABILITY, WHETHER EXPRESS, IMPLIED OR STATUTORY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF INFORMATION AVAILABLE FROM THE SERVICES. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "THE DOCUMENTS AND RELATED GRAPHICS CONTAINED HEREIN COULD INCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES ARE PERIODICALLY ADDED TO THE INFORMATION HEREIN. MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS MAY MAKE IMPROVEMENTS AND/OR CHANGES IN THE PRODUCT(S) AND/OR THE PROGRAM(S) DESCRIBED HEREIN AT ANY TIME.  PARTIAL SCREEN SHOTS MAY BE VIEWED IN FULL WITHIN THE SOFTWARE VERSION SPECIFIED. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Editor-in-Chief Mark Taub ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Product Line Manager Brett Bartow ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Acquisitions Editor Paul Carlstroem ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Managing Editor Sandra Schroeder ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Development Editor Christopher Cleveland ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Project Editor Mandie Frank ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Copy Editor Kitty Wilson ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Technical Editors Chris McCoy Benjamin Taylor ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Editorial Assistant Vanessa Evans ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Designer Chuti Prasertsith ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Composition codemantra ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Indexer Erika Millen ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Proofreader Christopher Morris ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Contents at a Glance ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Introduction xxiii ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "CHAPTER 1 Introduction to Ethical Hacking and Penetration Testing 3   \nCHAPTER 2 Planning and Scoping a Penetration Testing Assessment 25   \nCHAPTER 3 Information Gathering and Vulnerability Identification 63   \nCHAPTER 4 Social Engineering Attacks 121   \nCHAPTER 5 Exploiting Wired and Wireless Networks 143   \nCHAPTER 6 Exploiting Application-Based Vulnerabilities 207   \nCHAPTER 7 Exploiting Local Host and Physical Security Vulnerabilities 277   \nCHAPTER 8 Performing Post-Exploitation Techniques 333   \nCHAPTER 9 Penetration Testing Tools 361   \nCHAPTER 10 Understanding How to Finalize a Penetration Test 471   \nCHAPTER 11 Final Preparation 505   \nAPPENDIX A Answers to the “Do I Know This Already?” Quizzes and   \nQ&A Sections 511   \nIndex 541 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Contents ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Introduction xxiii ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Chapter 1 Introduction to Ethical Hacking and Penetration Testing 3 ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 3   \nUnderstanding Ethical Hacking and Penetration Testing 6 What Is the Difference Between Ethical Hacking and Nonethical Hacking? 6 Why Do We Need to Do Penetration Testing? 7   \nUnderstanding the Current Threat Landscape 7 Ransomware 8 IoT 8 Threat Actors 9   \nExploring Penetration Testing Methodologies 10 Why Do We Need to Follow a Methodology for Penetration Testing? 10 Penetration Testing Methods 11 Surveying Penetration Testing Methodologies 13   \nBuilding Your Own Lab 16 Requirements and Guidelines for Penetration Testing Labs 18 What Tools Should You Use in Your Lab? 18 What if You Break Something? 19   \nReview All Key Topics 20   \nDefine Key Terms 20   \nQ&A 21 ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "apter 2 Planning and Scoping a Penetration Testing Assessment 25 ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 25   \nExplaining the Importance of the Planning and Preparation Phase 29 Understanding the Target Audience 29 Rules of Engagement 30 Communication Escalation Path 31 Confidentiality of Findings 32 Budget 32 Point-in-Time Assessment 33 ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Impact Analysis and Remediation Timelines 34 Disclaimers 38 Technical Constraints 39 Support Resources 40 Understanding the Legal Concepts of Penetration Testing 41 Contracts 41 Written Authorization 42 SOW 42 MSA 42 NDA 43 Export Restrictions 43 Corporate Policies 43 Learning How to Scope a Penetration Testing Engagement Properly 44 Scope Creep 44 Types of Assessment 45 Special Scoping Considerations 45 Target Selection 46 Strategy 47 Risk Acceptance, Tolerance, and Management 47 Understanding Risk Management 48 Risk Acceptance 48 Risk Mitigation 48 Risk Transfer, Avoidance, and Sharing 49 Risk Appetite and Tolerance 49 Learning the Key Aspects of Compliance-Based Assessments 50 Rules for Completing Compliance-Based Assessments 50 Regulations in the Financial Sector 50 Regulations in the Healthcare Sector 52 Payment Card Industry Data Security Standard (PCI DSS) 53 Key Technical Elements in Regulations You Should Consider 56 Limitations When Performing Compliance-Based Assessments 57 Review All Key Topics 58 Define Key Terms 59 Q&A 59 ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Chapter 3 ",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "nformation Gathering and Vulnerability Identification 63 ",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 63   \nUnderstanding Information Gathering and Reconnaissance 67 Understanding Active Reconnaissance vs. Passive Reconnaissance 7 Understanding Active Reconnaissance 71 Nmap Scan Types 73 TCP Connect Scan (-sT) 73 UDP Scan (-sU) 74 TCP FIN Scan (-sF) 76 Ping scan (-sn) 77 Exploring the Different Types of Enumeration 78 Host Enumeration 78 User Enumeration 80 Group Enumeration 81 Network Share Enumeration 82 Web Page Enumeration/Web Application Enumeration 83 Service Enumeration 85 Exploring Enumeration via Packet Crafting 85 Understanding Passive Reconnaissance 87 Domain Enumeration 88 Packet Inspection and Eavesdropping 90 Understanding Open Source Intelligence (OSINT) Gathering 90 Exploring Reconnaissance with Recon-ng 90   \nUnderstanding the Art of Performing Vulnerability Scans 103 How a Typical Automated Vulnerability Scanner Works 103 Understanding the Types of Vulnerability Scans 104 Unauthenticated Scans 104 Authenticated Scans 105 Discovery Scans 106 Full Scans 106 Stealth Scans 108 Compliance Scans 109 Challenges to Consider When Running a Vulnerability Scan 110 Considering the Best Time to Run a Scan 110 ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Determining What Protocols Are in Use 110 Network Topology 110 Bandwidth Limitations 111 Query Throttling 111 Fragile Systems/Nontraditional Assets 111 Understanding How to Analyze Vulnerability Scan Results 112 US-CERT 113 The CERT Division of Carnegie Mellon University 113 NIST 114 JPCERT 114 CAPEC 114 CVE 114 CWE 115 How to Deal with a Vulnerability 115 Review All Key Topics 116 Define Key Terms 117 Q&A 117 Social Engineering Attacks 121 “Do I Know This Already?” Quiz 121 Understanding Social Engineering Attacks 125 Phishing 126 Pharming 126 Malvertising 127 Spear Phishing 128 SMS Phishing 134 Voice Phishing 135 Whaling 135 Elicitation, Interrogation, and Impersonation (Pretexting) 135 Social Engineering Motivation Techniques 137 Shoulder Surfing 137 USB Key Drop and Social Engineering 138 Review All Key Topics 138 Define Key Terms 139 Q&A 139 ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Chapter 4 ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Chapter 5 ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Exploiting Wired and Wireless Networks 143 ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Do I Know This Already?” Quiz 143   \nxploiting Network-Based Vulnerabilities 148 Exploring Windows Name Resolution and SMB Attacks 148 NetBIOS Name Service and LLMNR 148 SMB Exploits 151 DNS Cache Poisoning 155 SNMP Exploits 157 SMTP Exploits 159 SMTP Open Relays 160 Useful SMTP Commands 160 Using Known SMTP Server Exploits 163 FTP Exploits 166 Pass-the-Hash Attacks 168 Kerberos and LDAP-Based Attacks 169 Understanding Man-in-the-Middle Attacks 173 Understanding ARP Spoofing and ARP Cache Poisoning 173 Downgrade Attacks 175 Route Manipulation Attacks 175 Understanding Denial-of-Service (DoS) and Distributed Denial-of-Service (DDoS) Attacks 176 Direct DoS Attacks 176 Reflected DDoS Attacks 178 Amplification DDoS Attacks 178 Network Access Control (NAC) Bypass 179 VLAN Hopping 181 DHCP Starvation Attacks and Rogue DHCP Servers 183   \nxploiting Wireless and RF-Based Attacks and Vulnerabilities 185 Installing Rogue Access Points 185 Evil Twin Attacks 185 Deauthentication Attacks 186 Attacking the Preferred Network Lists 189 Jamming Wireless Signals and Causing Interference 189 War Driving 190 ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Initialization Vector (IV) Attacks and Unsecured Wireles Protocols 190 Attacking WEP 190 Attacking WPA 192 KRACK Attacks 196 Attacking Wi-Fi Protected Setup (WPS) 197 KARMA Attacks 197 Fragmentation Attacks 197 Credential Harvesting 199 Bluejacking and Bluesnarfing 199 Radio-Frequency Identification (RFID) Attacks 200 view All Key Topics 200 efine Key Terms 202 &A 202 ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Chapter 6 ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Exploiting Application-Based Vulnerabilities 207 ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 207   \nOverview of Web Applications for Security Professionals 21 The HTTP Protocol 213 Understanding Web Sessions 221   \nHow to Build Your Own Web Application Lab 224   \nUnderstanding Injection-Based Vulnerabilities 227 Exploiting SQL Injection Vulnerabilities 228 A Brief Introduction to SQL 228 SQL Injection Categories 232 Fingerprinting a Database 234 Surveying the UNION Exploitation Technique 235 Using Booleans in SQL Injection Attacks 237 Understanding Out-of-Band Exploitation 237 Exploring the Time-Delay SQL Injection Technique 239 Surveying a Stored Procedure SQL Injection 239 Understanding SQL Injection Mitigations 240 HTML Injection Vulnerabilities 241 Command Injection Vulnerabilities 241   \nExploiting Authentication-Based Vulnerabilities 242 ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Exploring Credential Brute Forcing 243 Understanding Session Hijacking 245 Understanding Redirect Attacks 249 Taking Advantage of Default Credentials 249 Exploiting Kerberos Vulnerabilities 250 Exploiting Authorization-Based Vulnerabilities 250 Understanding Parameter Pollution 250 Exploiting Insecure Direct Object Reference Vulnerabilities 251 Understanding Cross-Site Scripting (XSS) Vulnerabilities 252 Reflected XSS Attacks 253 Stored XSS Attacks 255 DOM-Based XSS Attacks 256 XSS Evasion Techniques 257 XSS Mitigations 258 Understanding Cross-Site Request Forgery Attacks 260 Understanding Clickjacking 261 Exploiting Security Misconfigurations 262 Exploiting Directory Traversal Vulnerabilities 262 Understanding Cookie Manipulation Attacks 263 Exploiting File Inclusion Vulnerabilities 264 Local File Inclusion Vulnerabilities 264 Remote File Inclusion Vulnerabilities 264 Exploiting Insecure Code Practices 265 Comments in Source Code 265 Lack of Error Handling and Overly Verbose Error Handling 266 Hard-Coded Credentials 266 Race Conditions 266 Unprotected APIs 267 Hidden Elements 270 Lack of Code Signing 270 Review All Key Topics 271 Define Key Terms 272 Q&A 273 ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Chapter 7 Exploiting Local Host and Physical Security Vulnerabilities 277 ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "o I Know This Already?” Quiz 277   \nploiting Local Host Vulnerabilities 281   \nInsecure Service and Protocol Configurations 281   \nLocal Privilege Escalation 285   \nUnderstanding Linux Permissions 286   \nUnderstanding SUID or SGID and Unix Programs 291   \nInsecure SUDO Implementations 294   \nRet2libc Attacks 298   \nWindows Privileges 299   \nCPassword 299   \nClear-Text Credentials in LDAP 300   \nKerberoasting 301   \nCredentials in Local Security Authority Subsystem Service (LSASS) 301   \nSAM Database 302   \nUnderstanding Dynamic Link Library Hijacking 303   \nExploitable Services 304   \nInsecure File and Folder Permissions 305   \nUnderstanding Windows Group Policy 305   \nKeyloggers 306   \nScheduled Tasks 307   \nEscaping the Sandbox 308   \nVirtual Machine Escape 310   \nUnderstanding Container Security 310   \nMobile Device Security 314   \nUnderstanding Android Security 316   \nUnderstanding Apple iOS Security 323   \nderstanding Physical Security Attacks 326   \nUnderstanding Physical Device Security 326   \nProtecting Your Facilities Against Physical Security Attacks 327   \nview All Key Topics 328   \nfine Key Terms 329   \nA 329 ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Chapter 8 ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Performing Post-Exploitation Techniques 333 ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 333   \nMaintaining Persistence After Compromising a System 337 Creating Reverse and Bind Shells 338 Command and Control (C2) Utilities 344 Creating and Manipulating Scheduled Jobs and Tasks 346 Creating Custom Daemons, Processes, and Additional Backdoors 346 Creating New Users 346   \nUnderstanding How to Perform Lateral Movement 347 Post-Exploitation Scanning 347 Using Remote Access Protocols 348 Using Windows Legitimate Utilities 349 Using PowerShell for Post-Exploitation Tasks 349 Using PowerSploit 351 Using the Windows Management Instrumentation for Post-Exploitation Tasks 354 Using Sysinternals and PSExec 355   \nUnderstanding How to Cover Your Tracks and Clean Up Systems After a   \nPenetration Testing Engagement 356   \nReview All Key Topics 357   \nDefine Key Terms 358   \nQ&A 358 ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Chapter 9 Penetration Testing Tools 361 ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz 361   \nUnderstanding the Different Use Cases of Penetration Testing Tools and   \nHow to Analyze Their Output 365 Penetration Testing–Focused Linux Distributions 365 Kali Linux 366 Parrot 367 BlackArch Linux 367 CAINE 369 Security Onion 369 Common Tools for Reconnaissance and Enumeration 370 Tools for Passive Reconnaissance 370 Tools for Active Reconnaissance 390 ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Common Tools for Vulnerability Scanning 400   \nCommon Tools for Credential Attacks 420   \nJohn the Ripper 420   \nCain and Abel 424   \nHashcat 425   \nHydra 428   \nRainbowCrack 429   \nMedusa and Ncrack 430   \nCeWL 431   \nMimikatz 432   \nPatator 432   \nCommon Tools for Persistence 433   \nCommon Tools for Evasion 434   \nVeil 434   \nTor 438   \nProxychains 439   \nEncryption 439   \nEncapsulation and Tunneling Using DNS and Other Protocols Like NTP 440   \nExploitation Frameworks 442   \nMetasploit 442   \nBeEF 449   \nCommon Decompilation, Disassembling, and Debugging Tools 450   \nThe GNU Project Debugger (GDB) 450   \nWindows Debugger 452   \nOllyDbg 452   \nedb Debugger 452   \nImmunity Debugger 454   \nIDA 454   \nObjdump 455   \nCommon Tools for Forensics 457   \nCommon Tools for Software Assurance 458   \nFindbugs, Findsecbugs, and SonarQube 458   \nFuzzers and Fuzz Testing 458   \nPeach 459 ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Mutiny Fuzzing Framework 459 American Fuzzy Lop 459 Wireless Tools 459 Leveraging Bash, Python, Ruby, and PowerShell in Penetration Testing Engagements 460 Introducing the Bash Shell 460 A Brief Introduction to Python 461 A Brief Introduction to Ruby 461 A Brief Introduction to PowerShell 462 Review All Key Topics 462 Define Key Terms 465 Q&A 465 ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Chapter 10 Understanding How to Finalize a Penetration Test 471 ",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Do I Know This Already?” Quiz 471   \nxplaining Post-Engagement Activities 474   \nurveying Report Writing Best Practices 475 Understanding the Importance of a Quality Report 475 Discussing Best Practices of Writing a Penetration Testing Report 476 Knowing Your Audience 476 Avoiding Cutting and Pasting 477 Relating the Findings to the Environment 477 Starting the Report While You Are Testing 478 Exploring Tools for Collecting and Sharing Information 478 Using Dradis for Effective Information Sharing and Reporting 478 Steps in Using the Dradis Framework CE on Kali Linux 479 Exploring the Common Report Elements 490 PCI Data Security Standard Reporting Guidelines 491 Expanding on the Common Report Elements 493 Executive Summary 493 Methodology 494 Finding Metrics and Measurements 494 Findings and Recommendations for Remediation 495   \nUnderstanding Report Handling and Communications Best Practices 4 Understanding Best Practices in Report Handling 499 Correctly Classifying Report Contents 499 Controlling Distribution Method and Media 499 Explaining the Importance of Appropriate Communication 500   \nReview All Key Topics 501   \nDefine Key Terms 502   \nQ&A 502 ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Chapter 11 Final Preparation 505 ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Tools for Final Preparation 505 Pearson Cert Practice Test Engine and Questions on the Website 505 Accessing the Pearson Test Prep Software Online 506 Accessing the Pearson Test Prep Software Offline 506 Customizing Your Exams 507 Updating Your Exams 508 Premium Edition 508 Chapter-Ending Review Tools 509   \nSuggested Plan for Final Review/Study 509   \nSummary 509 ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Appendix A  Answers to the “Do I Know This Already?” Quizzes and Q&A Sections 511 ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Index 541 ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "About the Authors ",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Omar Santos is a principal engineer in the Cisco Product Security Incident Response Team (PSIRT) within Cisco’s Security Research and Operations. He mentors and leads engineers and incident managers during the investigation and resolution of security vulnerabilities in all Cisco products, including cloud services. Omar has been working with information technology and cybersecurity since the mid-1990s. He has designed, implemented, and supported numerous secure networks for Fortune 100 and 500 companies and the U.S. government. Prior to his current role, he was a technical leader within the Worldwide Security Practice and the Cisco Technical Assistance Center (TAC), where he taught, led, and mentored many engineers within both organizations. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Omar is an active member of the security community, where he leads several industrywide initiatives and standards bodies. His active role helps businesses, academic institutions, state and local law enforcement agencies, and other participants that are dedicated to increasing the security of the critical infrastructure. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Omar often delivers technical presentations at many cybersecurity conferences. He is the author of more than 20 books and video courses. You can follow Omar on any of the following: ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "■ Personal website: omarsantos.io and theartofhacking.org Twitter: @santosomar LinkedIn: https://www.linkedin.com/in/santosomar ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Ron Taylor has been in the information security field for almost 20 years, 10 of which were spent in consulting. In 2008, he joined the Cisco Global Certification Team as an SME in information assurance. In 2012, he moved into a position with the Security Research & Operations group, where his focus was mostly on penetration testing of Cisco products and services. He was also involved in developing and presenting security training to internal development and test teams globally. In addition, he provided consulting support to many product teams as an SME on product security testing. He then spent some time as a consulting systems engineer specializing in Cisco’s security product line. In his current role, he works in the Cisco Product Security Incident Response Team (PSIRT). He has held a number of industry certifications, including GPEN, GWEB, GCIA, GCIH, GWAPT, RHCE, CCSP, CCNA, CISSP, and MCSE. Ron is also a Cisco Security Blackbelt, SANS mentor, cofounder and president of the Raleigh BSides Security Conference, and an active member of the Packet Hacking Village team at Defcon. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "You can follow Ron on any of the following: ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "■ Twitter: @Gu5G0rman ■ LinkedIn: www.linkedin.com/in/-RonTaylor ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Dedication ",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "I would like to dedicate this book to my lovely wife, Jeannette, and my two beautiful children, Hannah and Derek, who have inspired and supported me throughout the development of this book. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "I also dedicate this book to my father, Jose, and to the memory of my mother, Generosa. Without their knowledge, wisdom, and guidance, I would not have the goals that I strive to achieve today. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "—Omar ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "The most important thing in life is family: ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "To my wife of 17 years: Kathy, without your support and encouragement, $I$ would not be where I am today. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "To my kids, Kaitlyn, Alex, and Grace: You give me the strength and motivation to do what I do. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "To my parents: It was your example that instilled in me the drive and work ethic that has gotten me this far. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "—Ron ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "Acknowledgments ",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "This book is a result of concerted efforts of various individuals whose help brought this book to reality. We would like to thank the technical reviewers, Chris McCoy and Ben Taylor, for their significant contributions and expert guidance. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "We would also like to express our gratitude to Chris Cleveland, Kitty Wilson, Mandie Frank, Paul Carlstroem, and Brett Bartow for their help and continuous support throughout the development of this book. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "About the Technical Reviewers ",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "Chris McCoy is a technical leader in the Cisco Advanced Security Initiatives Group (ASIG). He has more than 20 years of experience in the networking and security industry. He has a passion for computer security, finding flaws in missioncritical systems, and designing mitigations to thwart motivated and resourceful adversaries. He was formerly with Spirent Communications and the U.S. Air Force. Chris is CCIE certified in the Routing & Switching and Service Provider tracks, which he has held for more than 10 years. You can follow Chris on Twitter@chris_mccoy. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "Benjamin Taylor is a security researcher currently working in the Cisco Security and Trust Organization. He has worked in the security industry for more than 10 years. His work spans numerous architectures and operating systems. His background and experience include security evaluations, penetration testing, security architecture reviews, product security compliance, digital forensics, and reverse engineering. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "We Want to Hear from You! ",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "As the reader of this book, you are our most important critic and commentator. We value your opinion and want to know what we’re doing right, what we could do better, what areas you’d like to see us publish in, and any other words of wisdom you’re willing to pass our way. ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "We welcome your comments. You can email to let us know what you did or didn’t like about this book—as well as what we can do to make our books better. ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "Please note that we cannot help you with technical problems related to the topic of this book. ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "When you write, please be sure to include this book’s title and author as well as your name and email address. We will carefully review your comments and share them with the author and editors who worked on the book. ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "Credits ",
        "text_level": 1,
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Cover: GlebSStock/Shutterstock   \nNIST Computer Security Resource Center defines the term Hacker   \nSun Tzu, The Art of War   \nHigh Level Organization of the Standard by The Penetration Testing Execution Standard   \nPCI Security Standard council, Information Supplement: Penetration Testing Guidance   \nPenetration Testing Framework 0.59 by VulnerabilityAssessment.co.uk   \nOpen Source Security Testing Methodology Manual (OSSTMM), Contemporary Security testing and analysis   \nGLBA (12 U.S.C. § 1843(k))   \nNY DFS Cybersecurity Regulation   \nCovered Entities and Business Associates, The HIPAA Rules apply to covered entities and business associates.   \nPayment Card Industry (PCI) Data Security Standard (DSS) and   \nPayment Application Data Security Standard (PA-DSS), April 2016.   \nElaine Barker, NIST Special Publication 800-57 Part 1 Revision 4   \nRecommendation for Key Management Part 1: General, January 2016. ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Figure Credits ",
        "text_level": 1,
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Figure 2-1 Screenshot of Gantt Chart $\\circledcirc$ 2018 Microsoft Corporation Figure 3-2 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-4 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-6 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 3-8 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-10 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-12 Screenshot of Kali Linux © 2018 Kali Linux Figure 3-13 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-14 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-15 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-16 Screenshot of Kali Linux © 2018 Kali Linux Figure 3-17 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-18 Screenshot of Kali Linux © 2018 Kali Linux Figure 3-19 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-20 Screenshot of Kali Linux $\\copyright$ 2018 Kali Linux Figure 3-21 Screenshot of Kali Linux © 2018 Kali Linux Figure 3-22 Screenshot of Kali Linux $\\copyright$ 2018 Kali Linux ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Figure 3-23 Screenshot of Google $\\mathbb{\\odot}2018$ Google, LLC. Figure 3-24 Screenshot of DNSdumpster $\\mathbb{O}2018$ Hacker Target Figure 3-25 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-26 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-27 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-28 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-29 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-30 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-31 Screenshot of Shodan $\\textcircled{\\odot}2013-2018{\\mathrm{Shodan}}\\textcircled{\\textcircled{\\cdot}}$ Figure 3-32 Screenshot of Shodan © 2013-2018 Shodan $\\textsuperscript{\\textregistered}$ Figure 3-33 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 3-34 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-35 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-36 Screenshot of Kali Linux © 2018 Kali Linux Figure 3-37 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 3-38 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 3-39 Omar Santos Figure 3-41 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 4-3 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 4-4 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 4-5 Screenshot of Kali Linux © 2018 Kali Linux Figure 4-6 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 4-7 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 4-8 Screenshot of Kali Linux © 2018 Kali Linux Figure 4-9 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 4-10 Screenshot of Kali Linux © 2018 Kali Linux Figure 4-11 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-15 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-18 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 5-19 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-20 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-23 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 5-24 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-25 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux Figure 5-26 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux Figure 6-3 Screenshot of Wireshark $\\circledcirc$ The Wireshark team Figure 6-4 Screenshot of Wireshark $\\mathfrak{C}$ The Wireshark team Figure 6-7 Screenshot of WebGoat $\\mathfrak{C}$ OWASP Figure 6-9 Screenshot of W3school $\\mathfrak{C}$ 1999-2018 by Refsnes Da Figure 6-11 Screenshot of WebGoat $\\mathfrak{C}$ OWASP Figure 6-12 Screenshot of WebGoat $\\circledcirc$ OWASP Figure 6-13 Screenshot of WebGoat $\\circledcirc$ OWASP Figure 6-14 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Securi ",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "Figure 6-16 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Security   \nFigure 6-18 Screenshot of Wireshark $\\circledcirc$ The Wireshark team   \nFigure 6-21 Screenshot of DVWA $\\odot2014-2017$ Dewhurst Security   \nFigure 6-22 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Security   \nFigure 6-23 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Security   \nFigure 6-24 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Security   \nFigure 6-25 Screenshot of DVWA $\\circledcirc$ 2014-2017 Dewhurst Security   \nFigure 7-5 Screenshot of Unix Permission Calculator $\\mathfrak{C}$ 2017 Dan’s Tools Figure 7-6 Screenshot of Unix Permission Calculator $\\mathbb{O}2017$ Dan’s Tools Figure 7-7 Screenshot of Visudo Command Man Page $\\mathfrak{C}$ Visudo   \nFigure 7-9 Screenshot of Microsoft Excel $\\mathbb{O}2018$ Microsoft Corporation Mobile Top 10 2016-Top 10 by OWASP   \nFigure 7-13 Screenshot of Android Studio $\\circledcirc$ Google, LLC.   \nFigure 7-14 Screenshot of Android Studio $\\circledcirc$ Google, LLC.   \nFigure 7-15 Screenshot of Kali Linux $\\odot2018\\mathrm{Kali}$ Linux   \nFigure 8-4 Screenshot of Kali Linux $\\mathbb{C}2018$ Kali Linux   \nFigure 8-6 Screenshot of Kali Linux $\\mathbb{C}2018$ Kali Linux   \nFigure 9-1 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux   \nFigure 9-2 Screenshot of Parrot Linux $\\odot2013-2018$ Lorenzo Faletra Figure 9-3 Screenshot of BlackArch Linux $\\odot2013-2018$ BlackArch Linux Figure 9-4 Screenshot of BlackArch Linux $\\mathfrak{C}$ 2013-2018 BlackArch Linux Figure 9-5 Screenshot of Caine $\\circledcirc$ Caine   \nFigure 9-6 Screenshot of Security Onion $\\circledcirc$ Security Onion Solutions, LLC Figure 9-7 Screenshot of Shodan $\\textcircled{\\odot}2013-2018{\\mathrm{Shodan@}}$   \nFigure 9-8 Screenshot of Maltego $\\circledcirc$ Paterva   \nFigure 9-9 Screenshot of Maltego $\\circledcirc$ Paterva   \nFigure 9-10 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux   \nFigure 9-11 Screenshot of Censys $\\mathbb{O}2018$ Censys   \nFigure 9-12 Screenshot of Zenmap $\\circledcirc$ Nmap   \nFigure 9-13 Screenshot of Zenmap $\\circledcirc$ Nmap   \nCategory: Vulnerability Scanning Tools by OWASP   \nFigure 9-14 Screenshot of Greenbone $\\mathbb{\\odot}2017$ Greenbone Networks   \nFigure 9-15 Screenshot of Greenbone $\\mathbb{\\odot}2017$ Greenbone Networks   \nFigure 9-16 Screenshot of Greenbone $\\mathbb{\\odot}2017$ Greenbone Networks   \nFigure 9-17 Screenshot of Greenbone $\\mathbb{\\odot}2017$ Greenbone Networks   \nOWASP Zed Attack Proxy Project by OWASP   \nFigure 9-18 Screenshot of OWASP ZAP $\\circledcirc$ OWASP   \nFigure 9-19 Screenshot of OWASP ZAP $\\circledcirc$ OWASP   \nFigure 9-20 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-21 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-22 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux   \nFigure 9-23 Screenshot of Kali Linux $\\circledcirc$ 2018 Kali Linux Figure 9-24 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-25 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-26 Screenshot of the art of hacking $\\mathbb{O}2018$ Omar Santos Figure 9-27 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux   \nFigure 9-28 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-29 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-30 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux   \nFigure 9-31 Screenshot of Kali Linux $\\mathfrak{C}$ 2018 Kali Linux   \nFigure 9-32 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-33 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-34 Screenshot of Kali Linux $\\mathbb{C}\\textrm{\\allowdisplaybreaks}2018$ Kali Linux   \nFigure 9-35 Screenshot of BeEF Exploitation Framework $\\circledcirc$ Beef Figure 9-36 Screenshot of OllyDbg $\\mathfrak{C}$ 2000-2014 Oleh Yuschuk Figure 9-37 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 9-38 Screenshot of IDA $\\circledcirc$ 2017 Hex-Rays SA.   \nFigure 9-39 Screenshot of IDA $\\circledcirc$ 2017 Hex-Rays SA.   \nFigure 10-1 Screenshot of Kali Linux $\\mathbb{O}2018$ Kali Linux   \nFigure 10-2 Screenshot of Dradis $\\textcircled{\\odot}2012\\textcircled{-}2018$ Dradis Framework Figure 10-3 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-4 Screenshot of Dradis $\\mathfrak{C}$ 2012-2018 Dradis Framework Figure 10-5 Screenshot of Dradis $\\textcircled{\\odot}2012\\textcircled{-}2018$ Dradis Framework Figure 10-6 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-7 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-8 Screenshot of Kali Linux © 2018 Kali Linux   \nFigure 10-9 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-10 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-11 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-12 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-13 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-14 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-15 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-16 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-17 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-18 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-19 Screenshot of Dradis © 2012-2018 Dradis Framework Figure 10-21 Screenshot of SQLMap $\\textcircled{\\odot}2006{-}2018$ by Bernardo Dam Assumpcao Guimaraes   \nFigure 10-22 Screenshot of SQLMap $\\circledcirc$ 2006-2018 by Bernardo Dam Assumpcao Guimaraes ISO 31000   \nChapter Opener images: Charlie Edwards/Gettyimages ",
        "page_idx": 21
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "Introduction ",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "CompTIA PenTest $^+$ is a security penetration testing certification that focuses on performance-based and multiple-choice questions, as well as simulations that require a candidate to demonstrate the hands-on ability to complete a penetration testing engagement. PenTest+ candidates must demonstrate their skills in planning and scoping a penetration testing engagement. Candidates are also required to know how to mitigate security weaknesses and vulnerabilities, as well as how to exploit them. ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "CompTIA PenTest $^+$ is an intermediate-level cybersecurity career certification. Historically, the only intermediate-level cybersecurity certification was the CompTIA Cybersecurity Analyst $(\\mathrm{CySA+})$ ). Today, PenTest+ provides an alternate path from those who want to specialize in security penetration testing (ethical hacking). ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "CompTIA PenTest $^+$ and $\\mathrm{CySA+}$ can be taken in any order. Either exam typically follows the skills learned in Security $^+$ . The main difference between $\\mathrm{CySA+}$ and PenTest+ is that $\\mathrm{CySA+}$ focuses on defensive security (including incident detection and response), whereas PenTest $^+$ focuses on offensive security (ethical hacking or penetration testing). ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "NOTE CompTIA PenTest+ is a globally recognized certification that demonstrates the holder’s knowledge and skills across a broad range of security topics. ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "The Goals of the CompTIA PenTest+ Certification ",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "The CompTIA PenTest+ certification was created and is managed by one of the most prestigious organizations in the world and has a number of stated goals. Although not critical for passing the exam, having knowledge of the organization and of these goals is helpful in understanding the motivation behind the creation of the exam. ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "Sponsoring Bodies ",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "The Computing Technology Industry Association (CompTIA) is a vendor-neutral IT certification body that is recognized worldwide. CompTIA has been in existence for more than 20 years. It develops certificate programs for IT support, networking, security, Linux, cloud, and mobility. CompTIA is a nonprofit trade association. ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "PenTest+ is one of a number of security-related certifications offered by CompTIA Other certifications offered by this organization include the following: ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "■ CompTIA Security+ ■ CompTIA Cybersecurity Analyst $(\\mathrm{CySA+})$ ■ CompTIA Advanced Security Practitioner (CASP) ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "CompTIA offers certifications in other focus areas, including the following: ",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "■ CompTIA IT Fundamentals ■ CompTIA A+ ■ CompTIA Network+ ■ CompTIA Cloud Essentials ■ CompTIA Cloud+ ■ CompTIA Linux+ ■ CompTIA Server+ ■ CompTIA Project+ ■ CompTIA CTT+ ",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "Stated Goals ",
        "text_level": 1,
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "The goal of CompTIA in its administration of the PenTest $^+$ certification is to provide a reliable instrument to measure an individual’s knowledge of cybersecurity penetration testing (ethical hacking). This knowledge is not limited to technical skills alone but extends to all aspects of a successful penetration testing engagement. ",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "The Exam Objectives (Domains) ",
        "text_level": 1,
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "The CompTIA PenTest+ exam is broken down into five major domains. This book covers all the domains and the subtopics included in them. The following table lists the breakdown of the domains represented in the exam: ",
        "page_idx": 24
    },
    {
        "type": "table",
        "img_path": "images/5970687688ee7bdcc94e6f28e9c443d1b77d1f0ee2d217124e097dde141a429e.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Domain</td><td>Percentage of Representation in Exam</td></tr><tr><td>1.0 Planning and Scoping</td><td>15%</td></tr><tr><td>2.0 Information Gathering and Vulnerability Identification</td><td>22%</td></tr><tr><td>3.0 Attacks and Exploits</td><td>30%</td></tr><tr><td>4.0 Penetration Testing Tools</td><td>17%</td></tr><tr><td>5.0 Reporting and Communication</td><td>16%</td></tr><tr><td></td><td>Total 100%</td></tr></table></body></html>\n\n",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "1.0 Planning and Scoping ",
        "text_level": 1,
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "The Planning and Scoping domain, which is covered in Chapter 2, discusses the importance of good planning and scoping in a penetration testing or ethical hacking engagement. Comprising $15\\%$ of the exam, it covers several key legal concepts and the different aspects of compliance-based assessment. It Covers topics including the following: ",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "■ Explain the importance of planning for an engagement.   \n■ Explain key legal concepts.   \n■ Explain the importance of scoping an engagement properly.   \n■ Explain the key aspects of compliance-based assessments. ",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "2.0 Information Gathering and Vulnerability Identification ",
        "text_level": 1,
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "The Information Gathering and Vulnerability Identification domain, which is covered in Chapter 3, starts out by discussing in general what reconnaissance is and the difference between passive and active reconnaissance methods. It touches on some of the common tools and techniques used. From there it covers the process of vulnerability scanning and how vulnerability scanning tools work, including how to analyze vulnerability scanning results to provide useful deliverables and the process of leveraging the gathered information in the exploitation phase. Finally, it discusses some of the common challenges to consider when performing vulnerability scans. This domain accounts for $22\\%$ of the exam. Topics include the following: ",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "■ Given a scenario, conduct information gathering using appropriate techniques.   \n■ Given a scenario, perform a vulnerability scan.   \n■ Given a scenario, analyze vulnerability scan results.   \n■ Explain the process of leveraging information to prepare for exploitation.   \n■ Explain weaknesses related to specialized systems. ",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "3.0 Attacks and Exploits ",
        "text_level": 1,
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "The Attacks and Exploits domain is covered throughout Chapters 4 through 8. These chapters include topics such as social engineering attacks, exploitation of wired and wireless networks, application-based vulnerabilities, local host and physical security vulnerabilities, and post-exploitation techniques. It encompasses $30\\%$ of the exam. Topics include the following: ",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "■ Compare and contrast social engineering attacks.   \n■ Given a scenario, exploit network-based vulnerabilities.   \n■ Given a scenario, exploit wireless and RF-based vulnerabilities.   \n■ Given a scenario, exploit application-based vulnerabilities.   \n■ Given a scenario, exploit local host vulnerabilities. Summarize physical security attacks related to facilities.   \n■ Given a scenario, perform post-exploitation techniques. ",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "4.0 Penetration Testing Tools ",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "The Penetration Testing Tools domain is covered in Chapter 9. In this chapter, you will learn different use cases for penetration testing tools. You will also learn how to analyze the output of some of the most popular penetration testing tools to make informed assessments. At the end of the chapter, you will learn how to leverage the bash shell, Python, Ruby, and PowerShell to perform basic scripting. This domain accounts for $17\\%$ of the exam. The topics include the following: ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "Given a scenario, use Nmap to conduct information gathering exercises.   \n■ Compare and contrast various use cases of tools.   \n■ Given a scenario, analyze tool output or data related to a penetration test.   \n■ Given a scenario, analyze a basic script (limited to bash, Python, Ruby, and PowerShell). ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "5.0 Reporting and Communication ",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "The Reporting and Communication domain is covered in Chapter 10, which starts out by discussing post-engagement activities, such as cleanup of any tools or shells left on systems that were part of the test. From there it covers report writing best practices, including the common report elements as well as findings and recommendations. Finally, it touches on report handling and proper communication best practices. This domain makes up $16\\%$ of the exam. Topics include the following: ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "Given a scenario, use report writing and handling best practices.   \n■ Explain post-report delivery activities.   \n■ Given a scenario, recommend mitigation strategies for discovered vulnerabilities.   \n■ Explain the importance of communication during the penetration testing process. ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "Steps to Earning the PenTest+ Certification ",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "To earn the PenTest $^+$ certification, a test candidate must meet certain prerequisites and follow specific procedures. Test candidates must qualify for and sign up for the exam. ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "Recommended Experience ",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "There are no prerequisites for the PenTest+ certification. However, CompTIA recommends that candidates possess Network+, Security $^+$ , or equivalent knowledge. ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "NOTE Certifications such as Cisco CCNA CyberOps can help candidates and can be used as an alternative to Security $^+$ . ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "CompTIA also recommends a minimum of three to four years of hands-on information security or related experience. ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Signing Up for the Exam ",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "The steps required to sign up for the PenTest $^+$ exam are as follows: ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "1. Create a Pearson Vue account at pearsonvue.com and schedule your exam.   \n2. Complete the examination agreement, attesting to the truth of your assertions regarding professional experience and legally committing to the adherence to the testing policies.   \n3. Review the candidate background questions.   \n4. Submit the examination fee. ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "The following website presents the CompTIA certification exam policies: https://certification.comptia.org/testing/test-policies. ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Facts About the PenTest $^+$ Exam ",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "The PenTest+ exam is a computer-based test that focuses on performance-based and multiple-choice questions. There are no formal breaks, but you are allowed to bring a snack and eat it at the back of the test room; however, any time used for breaks counts toward 165 minutes allowed for the test. You must bring a governmentissued identification card. No other forms of ID will be accepted. You may be required to submit to a palm vein scan. ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "About the CompTIA® PenTest+ Cert Guide ",
        "text_level": 1,
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "This book maps to the topic areas of the CompTIA® PenTest+ exam and uses a number of features to help you understand the topics and prepare for the exam. ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "Objectives and Methods ",
        "text_level": 1,
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "This book uses several key methodologies to help you discover the exam topics on which you need more review, to help you fully understand and remember those details, and to help you prove to yourself that you have retained your knowledge of those topics. This book does not try to help you pass the exam only by memorization; it seeks to help you truly learn and understand the topics. This book is designed to help you pass the PenTest+ exam by using the following methods: ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "■ Helping you discover which exam topics you have not mastered   \n■ Providing explanations and information to fill in your knowledge gaps   \n■ Supplying exercises that enhance your ability to recall and deduce the answers to test questions   \n■ Providing practice exercises on the topics and the testing process via test questions on the companion website ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "Customizing Your Exams ",
        "text_level": 1,
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "In the exam settings screen, you can choose to take exams in one of three modes: ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "■ Study mode: Allows you to fully customize your exams and review answers as you are taking the exam. This is typically the mode you would use first to assess your knowledge and identify information gaps.   \n■ Practice Exam mode: Locks certain customization options, as it is presenting a realistic exam experience. Use this mode when you are preparing to test your exam readiness.   \n■ Flash Card mode: Strips out the answers and presents you with only the question stem. This mode is great for late-stage preparation, when you really want to challenge yourself to provide answers without the benefit of seeing multiple-choice options. This mode does not provide the detailed score reports that the other two modes do, so it will not be as helpful as the other modes at helping you identify knowledge gaps. ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "In addition to choosing among these three modes, you will be able to select the source of your questions. You can choose to take exams that cover all the chapters, or you can narrow your selection to just a single chapter or the chapters that make up specific parts in the book. All chapters are selected by default. If you want to narrow your focus to individual chapters, simply deselect all the chapters and then select only those on which you wish to focus in the Objectives area. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "You can also select the exam banks on which to focus. Each exam bank comes complete with a full exam of questions that cover topics in every chapter. The two exams printed in the book are available to you, as are two additional exams of unique questions. You can have the test engine serve up exams from all four banks or just from one individual bank by selecting the desired banks in the exam bank area. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "There are several other customizations you can make to your exam from the exam settings screen, such as the time of the exam, the number of questions served up, whether to randomize questions and answers, whether to show the number of correct answers for multiple-answer questions, and whether to serve up only specific types of questions. You can also create custom test banks by selecting only questions that you have marked or questions on which you have added notes. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "Updating Your Exams ",
        "text_level": 1,
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "If you are using the online version of the Pearson Test Prep software, you should always have access to the latest version of the software as well as the exam data. If you are using the Windows desktop version, every time you launch the software while connected to the Internet, it checks whether there are any updates to your exam data and automatically downloads any changes made since the last time you used the software. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "Sometimes, due to many factors, the exam data may not fully download when you activate your exam. If you find that figures or exhibits are missing, you may need to manually update your exams. To update a particular exam you have already activated and downloaded, simply click the Tools tab and click the Update Products button. Again, this is only an issue with the desktop Windows application. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "If you wish to check for updates to the Pearson Test Prep exam engine software, Windows desktop version, simply click the Tools tab and click the Update Application button. By doing so, you ensure that you are running the latest version of the software engine. ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "This page intentionally left blank ",
        "page_idx": 31
    },
    {
        "type": "text",
        "text": "Exploiting Local Host and Physical Security Vulnerabilities ",
        "text_level": 1,
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "In this chapter you will learn about exploiting local host vulnerabilities, as well as physical security flaws. This chapter provides details on how to take advantage of insecure services and protocol configurations during a penetration testing engagement. You will also learn how to perform local privilege escalation attacks as part of penetration testing. This chapter provides details to help you gain an understanding of Set-UID, Set-GID, and Unix programs, as well as ret2libc attacks. This chapter also covers privilege escalation attacks against Windows systems and the security flaws of Android and Apple iOS mobile devices. In this chapter you will also gain an understanding of physical security attacks such as piggybacking, tailgating, fence jumping, dumpster diving, lock picking, and badge cloning. ",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "“Do I Know This Already?” Quiz ",
        "text_level": 1,
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "The “Do I Know This Already?” quiz allows you to assess whether you should read this entire chapter thoroughly or jump to the “Exam Preparation Tasks” section. If you are in doubt about your answers to these questions or your own assessment of your knowledge of the topics, read the entire chapter. Table 7-1 lists the major headings in this chapter and their corresponding “Do I Know This Already?” quiz questions. You can find the answers in Appendix A, “Answers to the ‘Do I Know This Already?’ Quizzes and Q&A Sections.” ",
        "page_idx": 32
    },
    {
        "type": "table",
        "img_path": "images/e9e19a67ae2a5b4944335abc2f1d211bf887cc1f5928cecd3b8a3aeba51b3f24.jpg",
        "table_caption": [
            "Table 7-1 “Do I Know This Already?” Section-to-Question Mapping "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Foundation Topics Section</td><td>Questions</td></tr><tr><td>Exploiting Local Host Vulnerabilities</td><td>1-8</td></tr><tr><td>Understanding Physical Security Attacks</td><td>9-10</td></tr></table></body></html>\n\n",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "CAUTION The goal of self-assessment is to gauge your mastery of the topics in this chapter. If you do not know the answer to a question or are only partially sure of the answer, you should mark that question as incorrect for purposes of the selfassessment. Giving yourself credit for an answer you correctly guess skews your selfassessment results and might provide you with a false sense of security. ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "1. Which of the following is not an insecure service or protocol? ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "a. Cisco Smart Install   \nb. Telnet   \nc. Finger   \nd. Windows PowerSploit ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "2. Consider the following example: omar@ares:\\~\\$ ls -l topsecret.txt -rwxrwxr-- 1 omar omar 15 May 26 21:15 topsecret.txt ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "What permissions does the user omar have in the topsecret.txt file? ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "a. Read only   \nb. Write only   \nc. Read, write, execute   \nd. Write, execute ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "3. Which of the following is not true about sticky bits? ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "a. A restricted deletion flag, or sticky bit, is a single bit whose interpretation depends on the file type.   \nb. For directories, the sticky bit prevents unprivileged users from removing or renaming a file in the directory unless they own the file or the directory; this is called the restricted deletion flag for the directory, and is commonly found on world-writable directories such as /tmp.   \nc. If the sticky bit is set on a directory, files inside the directory cannot be renamed or removed by the owner of the file, the owner of the directory, or the superuser (even though the modes of the directory might allow such an operation).   \nd. For regular files on some older systems, the sticky bit saves the program’s text image on the swap device so it will load more quickly when run. ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "4. Which of the following is a type of attack in which a subroutine return address on a call stack is replaced by an address of a subroutine that is already present in the executable memory of the process? ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "a. Ret2libc b. ASLR bypass c. CPassword d. Sticky-bit attack ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "5. Which of the following is a component of Active Directory’s Group Policy Preferences that allows administrators to set passwords via Group Policy? ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "a. Ret2libc b. CPassword c. Sticky-bit d. GPO crack ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "6. Which of the following tools allows an attacker to dump the LSASS process from memory to disk? ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "a. John the Ripper b. SAMsploit c. Sysinternals ProcDump d. Windows PowerShell ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "7. The SELinux and AppArmor security frameworks include enforcement rules that attempt to prevent which of the following attacks? ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "a. Lateral movement   \nb. Sandbox escape   \nc. Cross-site request forgery (CSRF)   \nd. Cross-site scripting (XSS) ",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "8. Which of the following is not one of the top mobile security threats and vulnerabilities? ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "a. Cross-site request forgery (CSRF) b. Insecure data storage c. Insecure communication d. Insecure authentication ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "9. Which of the following is an attack in which the attacker tries to retrieve encryption keys from a running operating system after using a system reload? ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "a. Hot-boot b. Rowhammer c. Cold boot d. ASLR bypass ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "10. Which of the following is the term for an unauthorized individual following an authorized individual to enter a restricted building or facility? ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "a. Lockpicking b. Dumpster diving c. Badge cloning d. Tailgating ",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "Exploiting Local Host Vulnerabilities ",
        "text_level": 1,
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Threat actors take advantage of numerous local host vulnerabilities to carry out different attacks. In this section, you will learn about exploits against local host vulnerabilities such as taking advantage of specific operating system flaws, escalating local privileges, stealing credentials, installing key loggers, and abusing physical device security. You will also learn about different virtual machine and container vulnerabilities, and you will learn about cold boot attacks, JTAG debugging, and different attacks that can be carried out over the serial console of a device. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Insecure Service and Protocol Configurations ",
        "text_level": 1,
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Many attacks materialize because unused or insecure protocols, services, and associated ports, which are low-hanging fruit opportunities for attackers. In addition, many organizations don’t patch vulnerabilities for the services, protocols, and ports they don’t use—despite the fact that vulnerabilities may still be present for months or even years. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "TIP A best practice is to clearly define and document the services, protocols, and ports that are necessary for business. An organization should ensure that all other services, protocols, and ports are disabled or removed. As a penetration tester, you should always go after insecure protocols, services, and associated ports. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Some protocols should never be used, such as Telnet and Cisco Smart Install. Telnet is a clear-text protocol that exposes the entire contents of any session to anyone who can gain access to the traffic. Secure Shell (SSH) should be used instead. If a switch is running the Cisco Smart Install protocol, any unauthenticated attacker can modify the configuration and fully compromise the switch. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "NOTE You can obtain more information about Smart Install and related features from the following Cisco security advisory: https://tools.cisco.com/security/center/ content/CiscoSecurityAdvisory/cisco-sa-20180409-smi. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Other protocols, like Telnet, transfer sensitive data in clear text. Examples of these clear-text protocols include SNMP (versions 1 and 2), HTTP, syslog, IMAP, POP3, and FTP. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "TIP In some cases, there is no secure alternative to otherwise insecure management protocols. In such a case, it is very important to understand what is at risk and what mitigation techniques could be implemented. ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "All insecure protocols are subject to man-in-the-middle (MITM) attacks or to IP traffic capture (sniffing). Example 7-1 shows how easy it is to capture a password from an FTP transaction by just sniffing the traffic using the Linux Tcpdump tool. ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "root@kube1:\\~# tcpdump -nnXSs 0 host 10.1.1.12   \ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode   \nlistening on ens160, link-type EN10MB (Ethernet), capture size 262144   \nbytes   \n22:50:23.958387 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [S], seq   \n314242458, win 29200, options [mss 1460,sackOK,TS val 1523378506 ecr   \n0,nop,wscale 7], length 0 0x0000: 4500 003c 1cd0 4000 4006 07d4 0a01 010c E..<..@.@. 0x0010: 0a01 010b c664 0015 12ba f59a 0000 0000 .d. 0x0020: a002 7210 acf1 0000 0204 05b4 0402 080a 0x0030: 5acc e94a 0000 0000 0103 0307 Z..J.   \n22:50:23.958455 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [S.], seq   \n4230935771, ack 314242459, win 28960, options [mss 1460,sackOK,TS val   \n1523511322 ecr 1523378506,nop,wscale 7], length 0 0x0000: 4500 003c 0000 4000 4006 24a4 0a01 010b E..<..@.@.\\$. 0x0010: 0a01 010c 0015 c664 fc2e f4db 12ba f59b d. 0x0020: a012 7120 1647 0000 0204 05b4 0402 080a ..q..G. 0x0030: 5ace f01a 5acc e94a 0103 0307 Z...Z..J..   \n22:50:23.958524 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.], ack   \n4230935772, win 229, options [nop,nop,TS val 1523378506 ecr 1523511322],   \nlength 0 0x0000: 4500 0034 1cd1 4000 4006 07db 0a01 010c E..4..@.@.. 0x0010: 0a01 010b c664 0015 12ba f59b fc2e f4dc .d.. 0x0020: 8010 00e5 10e4 0000 0101 080a 5acc e94a ..J 0x0030: 5ace f01a Z...   \n22:50:23.961422 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq   \n4230935772:4230935792, ack 314242459, win 227, options [nop,nop,TS val   \n1523511323 ecr 1523378506], length 20: FTP: 220 (vsFTPd 3.0.3) 0x0000: 4500 0048 04c6 4000 4006 1fd2 0a01 010b E..H..@.@. 0x0010: 0a01 010c 0015 c664 fc2e f4dc 12ba f59b 0x0020: 8018 00e3 1653 0000 0101 080a 5ace f01b ..S.. ..Z.. 0x0030: 5acc e94a 3232 3020 2876 7346 5450 6420 Z..J220.(vsFTPd. 0x0040: 332e 302e 3329 0d0a 3.0.3).. L.J， 4230935792, win 229, options [nop,nop,TS val 1523378507 ecr 1523511323],   \nlength 0 0x0000: 4510 0034 1cd2 4000 4006 07ca 0a01 010c  E..4..@.@. 0x0010: 0a01 010b c664 0015 12ba f59b fc2e f4f0 .d. 0x0020: 8010 00e5 10ce 0000 0101 080a 5acc e94b .Z..K 0x0030: 5ace f01b Z...   \n22:50:26.027005 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.], seq 314242459:314242470, ack 4230935792, win 229, options [nop,nop,TS val 1523379024 ecr 1523511323], length 11: FTP: USER omar 0x0000: 4510 003f 1cd3 4000 4006 07be 0a01 010c E..?..@.@.. 0x0010: 0a01 010b c664 0015 12ba f59b fc2e f4f0 0x0020: 8018 00e5 6a32 0000 0101 080a 5acc eb50 ..j2.. .Z..P 0x0030: 5ace f01b 5553 4552 206f 6d61 720d 0a Z...USER.omar..   \n22:50:26.027045 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [.], ack   \n314242470, win 227, options [nop,nop,TS val 1523511839 ecr 1523379024],   \nlength 0 0x0000: 4500 0034 04c7 4000 4006 1fe5 0a01 010b E..4..@.@.. 0x0010: 0a01 010c 0015 c664 fc2e f4f0 12ba f5a6 .d. 0x0020: 8010 00e3 163f 0000 0101 080a 5ace f21f 0x0030: 5acc eb50 Z..P   \n22:50:26.027343 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq   \n4230935792:4230935826, ack 314242470, win 227, options [nop,nop,TS val   \n1523511839 ecr 1523379024], length 34: FTP: 331 Please specify the   \npassword. 0x0000: 4500 0056 04c8 4000 4006 1fc2 0a01 010b E..V..@.@.. 0x0010: 0a01 010c 0015 c664 fc2e f4f0 12ba f5a6 0x0020: 8018 00e3 1661 0000 0101 080a 5ace f21f Z. 0x0030: 5acc eb50 3333 3120 506c 6561 7365 2073 Z..P331.Please.s 0x0040: 7065 6369 6679 2074 6865 2070 6173 7377 pecify.the. 0x0050: 6f72 642e 0d0a password...   \n22:50:26.027393 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.], ack 4230935826, win 229, options [nop,nop,TS val 1523379024 ecr 1523511839],   \nlength 0 0x0000: 4510 0034 1cd4 4000 4006 07c8 0a01 010c E..4..@.@.. 0x0010: 0a01 010b c664 0015 12ba f5a6 fc2e f512 d. 0x0020: 8010 00e5 0c98 0000 0101 080a 5acc eb50 .P 0x0030: 5ace f21f Z..   \n22:50:30.053380 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.], seq   \n314242470:314242485, ack 4230935826, win 229, options [nop,nop,TS val   \n1523380030 ecr 1523511839], length 15: FTP: PASS badpass1 0x0000: 4510 0043 1cd5 4000 4006 07b8 0a01 010c E..C..@.@. 0x0010: 0a01 010b c664 0015 12ba f5a6 fc2e f512 .d. 0x0020: 8018 00e5 c455 0000 0101 080a 5acc ef3e .Z..> 0x0030: 5ace f21f 5041 5353 2062 6164 7061 7373 Z...PASS.badpass 0x0040: 310d 0a 1..   \n22:50:30.085058 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq   \n4230935826:4230935849, ack 314242485, win 227, options [nop,nop,TS val   \n1523512854 ecr 1523380030], length 23: FTP: 230 Login successful. 0x0000: 4500 004b 04c9 4000 4006 1fcc 0a01 010b E..K..@.@. 0x0010: 0a01 010c 0015 c664 fc2e f512 12ba f5b5 0x0020: 8018 00e3 1656 0000 0101 080a 5ace f616 0x0030: 5acc ef3e 3233 3020 4c6f 6769 6e20 7375 Z..>230.Login. 0x0040: 6363 6573 7366 756c 2e0d 0a successful. ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "In Example 7-1 a host at IP address 10.1.1.12 initiates an FTP connection to an FTP server with IP address 10.1.1.11. In the packet capture, you can see the initial login transaction where the user (omar) successfully logs in using the password (badpass1), as demonstrated in the highlighted lines in Example 7-1. It is possible to use similar utilities, such as Tshark, to capture data from a live network (see https:// www.wireshark.org/docs/man-pages/tshark.html). ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "The following are also some of the services that are considered insecure: ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "■ Rlogin: https://linux.die.net/man/1/rlogin ■ Rsh: https://linux.die.net/man/1/rsh ■ Finger: https://linux.die.net/man/1/finger ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "The following services should be carefully implemented and not exposed to untrusted networks: ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "■ Authd (or Identd): https://linux.die.net/man/3/ident   \n■ Netdump: https://linux.die.net/man/8/netdump   \n■ Netdump-server: https://linux.die.net/man/8/netdump-server   \n■ Nfs: https://linux.die.net/man/5/nfs   \n■ Rwhod: https://linux.die.net/man/8/rwhod   \n■ Sendmail: https://linux.die.net/man/8/sendmail.sendmail   \n■ Samba: https://linux.die.net/man/7/samba   \n■ Yppasswdd: https://linux.die.net/man/8/yppasswdd   \n■ Ypserv: https://linux.die.net/man/8/ypserv   \n■ Ypxfrd: https://linux.die.net/man/8/ypxfrd ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "TIP RedHat provides a great resource that goes over Linux server security; see https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/ html/Security_Guide/ch-server.html. ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "Local Privilege Escalation ",
        "text_level": 1,
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "Privilege escalation is the process of elevating the level of authority (privileges) of a compromised user or a compromised application. This is done to further perform actions on the affected system or any other systems in the network, typically postexploitation (that is, after gaining a foothold in the target system and exploiting a vulnerability). ",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "NOTE In Chapter 8, “Performing Post-Exploitation Techniques,” you will learn about additional post-exploitation methodologies and tactics. ",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "The main focus of the post-exploitation phase is to maintain access to the compromised systems and move around in the network while remaining undetected. In many cases, privilege escalation is required to perform those tasks. ",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "It is possible to perform privilege escalation in a few different ways. An attacker may be able to compromise a system by logging in with a non-privileged account. Subsequently, the attacker can go from that unprivileged (or less privileged) account to another account that has greater authority, as shown in Figure 7-1. ",
        "page_idx": 40
    },
    {
        "type": "image",
        "img_path": "images/efaa208c18c0a26bbc16a27ab85c97f2699582dc15b10482cf7b53efcd84bcaa.jpg",
        "img_caption": [
            "FIGURE 7-1 Privilege Escalation from One Account to Another "
        ],
        "img_footnote": [],
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "It is also possible to perform privilege escalation by “upgrading,” or elevating, the privileges of the same account, as shown in Figure 7-2. ",
        "page_idx": 40
    },
    {
        "type": "image",
        "img_path": "images/837b9dbf3fdec1ad3144ac4a0f367c1ff7e025d712c134beb76e7f4b52c78036.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "The same account is used, but the attacker manipulates the system to increase the account privilege. ",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "FIGURE 7-2 Privilege Escalation Using the Same Account ",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "In Figure 7-2, the user (omar) belongs to the engineering group (eng) and does not have administrative rights on the system. The attacker then exploits a vulnerability and is able to manipulate the system to put the same user (omar) in the admin group, subsequently giving the user administrative rights on the system. ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "Understanding Linux Permissions ",
        "text_level": 1,
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "This book assumes that you have familiarity with Linux and user accounts. As a refresher, in some cases users must be able to accomplish tasks that require privileges (for example, when installing a program or adding another user). This is why sudo exists. Example 7-2 shows the first few lines and description of the sudo man page. ",
        "page_idx": 41
    },
    {
        "type": "table",
        "img_path": "images/a871cdb82179b5d49a0011c706a7e44f0307d1885a053bfdb0e7f899a6325258.jpg",
        "table_caption": [
            "Example 7-2 The Linux sudo Command "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>sudo, sudoedit - execute a command as another user</td><td></td><td></td><td></td><td></td></tr><tr><td>SYNOPSIS</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>sudo-h丨-K 丨-k 丨-V</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>sudo -v [-AknS]  [-a type] [-g group] [-h host]  [-p prompt]  [-u user]</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>[-u user] [command]</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>sudo -l[-AknS] [-a type] [-g group] [-h host]  [-p prompt] [-U user]</td><td></td></tr><tr><td></td><td></td><td colspan=\"5\">sudo [-AbEHnPS]  [-a type] [-C num] [-c class] [-g group]  [-h host]</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>[-p prompt] [-r role] [-t type] [-u user] [VAR=value] [-i |-s]  [command]</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>sudoedit [-AknS]   [-a type] [-C num] [-c class] [-g group]  [-h host]</td><td></td></tr><tr><td></td><td>[-p prompt] [-u user] file.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>DESCRIPTION</td><td></td><td></td><td>sudo allows a permitted user to execute a command as the superuser</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>or another user, as specified by the security policy. The invoking user's</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>real (not effective) user ID is used to determine the user name with which</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>toquery the security policy.</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></table></body></html>\n\n",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "sudo supports a plugin architecture for security policies and input/ output logging.  Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end.  The default security policy is sudoers, which is configured via the file /etc/ sudoers, or via LDAP.  See the Plugins section for more information. ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "The security policy determines what privileges, if any, a user has to run sudo.  The policy may require that users authenticate themselves with a password or another authentication mechanism.  If authentication is required, sudo will exit if the user's password is not entered within a configurable time limit.  This limit is policy-specific; the default password prompt timeout for the sudoers security policy is unlimited. ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "Security policies may support credential caching to allow the user to run sudo again for a period of time without requiring authentication. The sudoers policy caches credentials for 15 minutes, unless overridden in sudoers(5).  By running sudo with the -v option, a user can update the cached credentials without running a command. ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "When invoked as sudoedit, the $-\\in$ option (described below), is implied. Security policies may log successful and failed attempts to use sudo. If an I/O plugin is configured, the running command's input and output may be logged as well. ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "<output omitted for brevity>. . ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "On Unix-based systems, you can use the chmod command to set permissions values on files and directories. ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "NOTE You can set permissions of a file or directory (folder) to a given user, a group of users, and others. ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "With Linux you can set three basic permissions: ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "■ Read (r) ■ Write (w) ■ Execute (x) ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "You can apply these permissions to any type of files or to directories. Example 7-3 shows the permissions of a file called omar_file.txt. The user executes the ls -l command, and in the portion of the output on the left, you see -rw-rw-r--, which indicates that the current user (omar) has read and write permissions. ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "Example 7-3 Linux File Permissions ",
        "page_idx": 42
    },
    {
        "type": "image",
        "img_path": "images/744a103140f871fea9aa42c1356c7b056457b41f543d3f3da88fd7fd7e952193.jpg",
        "img_caption": [
            "Figure 7-3 explains the Linux file permissions. "
        ],
        "img_footnote": [],
        "page_idx": 42
    },
    {
        "type": "image",
        "img_path": "images/9eec16e7b743e60e14a47ffa21960f0c1fbdea5fbb4efacd0fc8f30525f75b81.jpg",
        "img_caption": [
            "FIGURE 7-3 Explaining Linux File Permissions "
        ],
        "img_footnote": [],
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "Example 7-4 shows how a user belonging to any group can change the permissions of the file to be read, write, executable by using the chmod 0777 command. ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "Example 7-4 Changing File Permissions ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "omar@dionysus:\\~\\$ chmod 0777 omar_file.txt   \nomar@dionysus:\\~\\$ ls -l omar_file.txt   \n-rwxrwxrwx 1 omar omar 15 May 26 23:45 omar_file.txt   \nomar@dionysus:\\~\\$ ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "As documented in the chmod man pages, the restricted deletion flag, or sticky bit, is a single bit whose interpretation depends on the file type. For directories, the sticky bit prevents unprivileged users from removing or renaming a file in the directory unless they own the file or the directory; this is called the restricted deletion flag for the directory, and it is commonly found on world-writable directories such as /tmp. For regular files on some older systems, the sticky bit saves the program’s text image on the swap device so it will load more quickly when run. ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "TIP The sticky bit is obsolete with files, but it is used for directories to indicate that files can be unlinked or renamed only by their owner or the superuser. Sticky bits were used with files in very old Unix machines due to memory restrictions. If the sticky bit is set on a directory, files inside the directory may be renamed or removed only by the owner of the file, the owner of the directory, or the superuser (even though the modes of the directory might allow such an operation); on some systems, any user who can write to a file can also delete it. This feature was added to keep an ordinary user from deleting another’s files from the /tmp directory. ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "There are two ways that you can use the chmod command: ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "■ Symbolic (text) method ■ Numeric method ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "When you use the symbolic method, the structure includes who has access and the permission given. The indication of who has access to the file is as follows: ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "■ u: The user that owns the file ■ g: The group that the file belongs to ■ o: The other users (that is, everyone else) ■ a: All of the above (that is, use a instead of ugo) ",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "Example 7-5 shows how to remove the execute permissions  for all users by using the chmod a-x omar_file.txt command. ",
        "page_idx": 44
    },
    {
        "type": "image",
        "img_path": "images/0097d27741ed6419ea99a5a54f309b74e2e2f16db713b5d166085464ca685ce6.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "The chmod command allows you to use $^+$ to add permissions and - to remove permissions. The chmod commands clears the set-group-ID (SGID or setgid) bit of a regular file if the file’s group ID does not match the user’s effective group ID or one of the user’s supplementary group IDs, unless the user has appropriate privileges. Additional restrictions may cause the set-user-ID (SUID or setuid) and set-groupID bits of MODE or FILE to be ignored. This behavior depends on the policy and functionality of the underlying chmod system call. When in doubt, check the underlying system behavior. This is clearly explained in the man page of the chmod command (man chmod). In addition, the chmod command retains a directory’s SUID and SGID bits unless you explicitly indicate otherwise. ",
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "You can also use numbers to edit the permissions of a file or directory (for the owner, group, and others), as well as the SUID, SGID, and sticky bits. Example 7-4 shows the numeric method. The three-digit number specifies the permission, where each digit can be anything from 0 to 7. The first digit applies to permissions for the owner, the second digit applies to permissions for the group, and the third digit applies to permissions for all others. ",
        "page_idx": 44
    },
    {
        "type": "image",
        "img_path": "images/cdfa77b636d73f04fdf5ae639ddd8a0ca3a233d93e6398f28b17dd06a6eb151d.jpg",
        "img_caption": [
            "Figure 7-4 demonstrates how the numeric method works. ",
            "FIGURE 7-4 Explaining the Linux File Permission Numeric Method "
        ],
        "img_footnote": [],
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "As shown in Figure 7-4, a binary number 1 is put under each permission granted and a 0 under each permission not granted. On the right in Figure 7-4, the binary-to-decimal conversion is done. This is why in Example 7-4, the numbers 777 make the file omar_file.txt world-writable (which means any user has read, write, and execute permissions). ",
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "A great online tool that you can use to practice setting the different parameters of Linux permissions is the Permissions Calculator, at http://permissions-calculator.org (see Figure 7-5). ",
        "page_idx": 45
    },
    {
        "type": "image",
        "img_path": "images/744eb7b75f5f34b7b879b0d686dcf92bec34eaaf15a0fedc90236680736d9e99.jpg",
        "img_caption": [
            "FIGURE 7-5 Permissions Calculator Online Tool "
        ],
        "img_footnote": [],
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "The Permissions Calculator website also provides several examples using PHP, Python, and Ruby to change file and directory permissions programmatically, as shown in Figure 7-6. ",
        "page_idx": 45
    },
    {
        "type": "image",
        "img_path": "images/888025dbfcfaabd72c645ead18b7ee8419858b96ed5915f0ea5bc8d31685e242.jpg",
        "img_caption": [
            "FIGURE 7-6 Changing Permissions Programmatically "
        ],
        "img_footnote": [],
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "Understanding SUID or SGID and Unix Programs ",
        "text_level": 1,
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "A program or a script in which the owner is root (by setting its Set-UID bit) will execute with superuser (root) privileges. This introduces a security problem: If the system is compromised and that program is manipulated (as in the case of monolithic embedded devices), an attacker may be able to run additional executions as superuser (root). ",
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "Modern Unix and Linux-based systems ignore the SUID and SGID bits on shell scripts for this reason. ",
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "TIP An example of a SUID-based attack is the vulnerability that existed in the program /usr/lib/preserve (or /usr/lib/ex3.5preserve). This program, which is used by the vi and ex editors, automatically made a backup of the file being edited if the user was unexpectedly disconnected from the system before writing out changes to the file. The system wrote the changes to a temporary file in a special directory. The system also sent an email to the user using /bin/mail with a notification that the file had been saved. Because users could have been editing a file that was private or confidential, the directory used by the older version of the Preserve program was not accessible by most users on the system. Consequently, to let the Preserve program write into this directory and let the recovery program read from it, these programs were made SUID root. ",
        "page_idx": 47
    },
    {
        "type": "text",
        "text": "You can find all the SUID and SGID files on your system by using the command shown in Example 7-6. ",
        "page_idx": 47
    },
    {
        "type": "text",
        "text": "omar@dionysus:\\~\\$ sudo find / \\( -perm -004000 -o -perm -002000 \\)   \n-type f -print   \n[sudo] password for omar: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*   \nfind: '/proc/3491/task/3491/fdinfo/6'/usr/sbin/postqueue   \n/usr/sbin/postdrop   \n/usr/lib/eject/dmcrypt-get-device   \n/usr/lib/dbus-1.0/dbus-daemon-launch-helper   \n/usr/lib/policykit-1/polkit-agent-helper-1   \n/usr/lib/x86_64-linux-gnu/utempter/utempter   \n/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic   \n/usr/lib/snapd/snap-confine   \n/usr/lib/openssh/ssh-keysign   \n/usr/bin/dotlock.mailutils   \n/usr/bin/pkexec   \n/usr/bin/chfn   \n/usr/bin/screen   \n/usr/bin/newgrp   \n/usr/bin/crontab   \n/usr/bin/at   \n/usr/bin/chsh   \n/usr/bin/ssh-agent   \n/usr/bin/gpasswd   \n/usr/bin/expiry   \n/usr/bin/wall   \n/usr/bin/sudo   \n/usr/bin/bsd-write   \n/usr/bin/mlocate   \n/usr/bin/newgidmap   \n/usr/bin/chage   \n/usr/bin/newuidmap   \nfind: '/proc/3491/fdinfo/5': No such file or directory   \n/sbin/mount.cifs   \n/sbin/unix_chkpwd   \n/sbin/pam_extrausers_chkpwd   \n/sbin/mount.ecryptfs_private   \n/bin/fusermount   \n/bin/ping6   \n/bin/mount   \n/bin/umount   \n/bin/ntfs-3g   \n/bin/su   \n/bin/ping ",
        "page_idx": 47
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 48
    },
    {
        "type": "text",
        "text": "In Example 7-6, the find command starts in the root directory (/) and looks for all files that match mode 002000 (SGID) or mode 004000 (SUID). The -type f option limits the search to files only. ",
        "page_idx": 48
    },
    {
        "type": "text",
        "text": "TIP Security Enhanced Linux (SELinux) is a collection of kernel modifications and user-space tools that are now part of several Linux distributions. It supports access control security policies, including mandatory access controls. SELinux aims to provide enforcement of security policies and simplify the amount of software required to accomplish such enforcement. Access can be constrained on variables such as which users and applications can access which resources. In addition, SELinux access controls are determined by a policy loaded on the system that cannot be changed by uneducated users or insecure applications. SELinux also allows you to configure more granular access control policies. For instance, SELinux lets you specify who can unlink, append only, or move a file instead of only being able to specify who can read, write, or execute a file. It also allows you to configure access to many other resources in addition to files. For example, it allows you to specify access to network resources and interprocess communication (IPC). ",
        "page_idx": 48
    },
    {
        "type": "text",
        "text": "Insecure SUDO Implementations ",
        "text_level": 1,
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Sudo, which stands for “super user do,” Is a Linux utility that allows a system administrator to give certain users or groups of users the ability to run some or all commands as root or superuser. The Sudo utility operates on a per-command basis, and it is not a replacement for the shell. You can also use the Sudo utility to restrict the commands a user can run on a per-host basis, to restrict logging of each command to have an audit trail of who did what, and to restrict the ability to use the same configuration file on different systems. ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Example 7-7 shows the Linux command groups being used. The command shows the group that the user omar belongs to. You can see in this example that sudo is one of the groups that the user omar belongs to. ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Example 7-7 The groups Command ",
        "text_level": 1,
        "page_idx": 49
    },
    {
        "type": "table",
        "img_path": "images/b2f17eee523ecf53b5d758bdedb81c37e19ee91ae4135267a24af802ff34f042.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td colspan=\"4\">omar@dionysus:~$ groups</td></tr><tr><td>omar adm cdrom sudo dip plugdev lxd sambashare lpadmin</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></table></body></html>\n\n",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Another command you can use to see the groups a user belongs to is the id command, as shown in Example 7-8. ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Example 7-8 The id Command ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "omar@dionysus:\\~\\$ id uid $\\scriptstyle1=1000$ (omar) gid=1000(omar) groups=1000(omar),4(adm),24(cdrom), 27(sudo),30(dip),46(plugdev),110(lxd),113(sambashare),117(lpadmin) ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Example 7-9 shows the same commands used when a different user (ron) is logged in. In this case, you can see that ron belongs only to the group ron. ",
        "page_idx": 49
    },
    {
        "type": "table",
        "img_path": "images/c31e98956b37718065dcd1a80d586fe21e9318b0a9cfd359d0d4496724e5654d.jpg",
        "table_caption": [
            "Example 7-9 The Groups to Which User ron Belongs "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>ron@dionysus:~$ groups</td><td></td></tr><tr><td>ron</td><td></td></tr><tr><td>ron@dionysus:~$ id</td><td></td></tr><tr><td>uid=1001(ron) gid=1001(ron） groups=1001(ron)</td><td></td></tr><tr><td>ron@dionysus:~$</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "Certain Linux systems call this group the “wheel” group. If you want to add an existing user to the wheel (or sudo) group, you can use the usermod command with the ",
        "page_idx": 49
    },
    {
        "type": "text",
        "text": "-G option. You might also want to use the -a option, to avoid removing the user from other groups to which he or she belongs, as shown in Example 7-10. ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "Example 7-10 The usermod Command ",
        "text_level": 1,
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "$\\varsigma$ sudo usermod -a -G wheel ron ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "You can also add a user account to the wheel group as you create it, as shown in Example 7-11. ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "Example 7-11 Adding a User to the wheel Group at Creation ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "$\\varsigma$ sudo useradd -G wheel chris ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "In many different Linux systems, you can also use the visudo command. Figure 7-7 shows the first few lines of the description of the visudo man page (man visudo). ",
        "page_idx": 50
    },
    {
        "type": "image",
        "img_path": "images/23902a3362dfdeb7ed4c02c4de45067e3e2c5aa5d8cbd9c8e731b30a82e6d3f6.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "Manual pagevisudo(8)line 1（pressh forhelp orq toquit) ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "FIGURE 7-7 The visudo Command Man Page ",
        "page_idx": 50
    },
    {
        "type": "text",
        "text": "Example 7-12 shows the contents of the sudoers file after the visudo command is invoked. ",
        "page_idx": 51
    },
    {
        "type": "text",
        "text": "Example 7-12 The sudoers File ",
        "text_level": 1,
        "page_idx": 51
    },
    {
        "type": "table",
        "img_path": "images/8d6644f6f89739a36b5e1cfe5eab6180723cce497f2be2a88caac25e3b99efe3.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td></td><td># This file MUsT be edited with the 'visudo' command as root.</td></tr><tr><td># #</td><td>Please consider adding local content in /etc/sudoers.d/ instead of</td></tr><tr><td>#</td><td>directly modifying this file.</td></tr><tr><td>#</td><td></td></tr><tr><td>#</td><td>See the man page for details on how to write a sudoers file.</td></tr><tr><td>#</td><td></td></tr><tr><td>Defaults</td><td>env_reset</td></tr><tr><td>Defaults</td><td>mail_badpass</td></tr><tr><td>Defaults</td><td>secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/</td></tr><tr><td></td><td>sbin:/usr/bin:/sbin:/bin:/snap/bin\" # Host alias specification</td></tr><tr><td></td><td># User alias specification</td></tr><tr><td></td><td># Cmnd alias specification</td></tr><tr><td></td><td></td></tr><tr><td>root</td><td># User privilege specification ALL=(ALL:ALL） ALL</td></tr><tr><td></td><td></td></tr><tr><td></td><td># Members of the admin group may gain root privileges</td></tr><tr><td>%admin ALL=(ALL） ALL</td><td></td></tr><tr><td></td><td># Allow members of group sudo to execute any command</td></tr><tr><td>%sudo</td><td>ALL=(ALL:ALL） ALL</td></tr><tr><td></td><td></td></tr><tr><td></td><td># See sudoers(5) for more information on \"#include\" directives:</td></tr><tr><td>#includedir /etc/sudoers.d</td><td></td></tr></table></body></html>\n\n",
        "page_idx": 51
    },
    {
        "type": "text",
        "text": "The first highlighted line in Example 7-12 means that the root user can execute commands from ALL terminals, acting as ALL (that is, any) users, and can run the ALL command (any commands). The second highlighted line specifies that members of the admin group may gain root privileges and can also execute commands from all terminals, acting as ALL (any) users, and can run the ALL command (any commands). The third highlighted line specifies the same for any members of the group sudo. ",
        "page_idx": 51
    },
    {
        "type": "text",
        "text": "A huge mistake that some people make is to copy and paste the root privileges and assign them to a user, as shown in Example 7-13. ",
        "page_idx": 52
    },
    {
        "type": "table",
        "img_path": "images/30acff553fff92cae5dc5821d091d2e5f92ea077a09169c311f44b0f1a5db371.jpg",
        "table_caption": [
            "Example 7-13 Improper sudoers File Entry "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>ben ALL=(ALL:ALL) ALL</td></tr></table></body></html>\n\n",
        "page_idx": 52
    },
    {
        "type": "text",
        "text": "In Example 7-13 the user ben has been assigned all the privileges of root. Attackers can take advantage of misconfigured sudoers files, like this one, to cause severe negative effects on a system. In most cases, you probably want a specific user to power off the system or just execute certain commands that will be required for the user to do certain tasks. Example 7-14 shows a better setup than Example 7-13: Because ben only needs to be able to power off the system, he has only been given that sudo capability. ",
        "page_idx": 52
    },
    {
        "type": "table",
        "img_path": "images/606fd63c8795960bf345f3d2c6da0349a167c1160868953170432119e8f89bef.jpg",
        "table_caption": [
            "Example 7-14 Allowing ben to Power Off the System "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>ben ALL= /sbin/poweroff</td></tr></table></body></html>\n\n",
        "page_idx": 52
    },
    {
        "type": "text",
        "text": "As demonstrated in Example 7-15, you can also create aliases for users (User_Alias), run commands as other users (Runas_Alias), specify the host or network from which they can log in (Host_Alias), and specify the command (Cmnd_Alias). ",
        "page_idx": 52
    },
    {
        "type": "table",
        "img_path": "images/4a0d3e1b8a21884138617f79997c093950342dfe071b075f222d2be2d67fc063.jpg",
        "table_caption": [
            "Example 7-15 sudoers File Using Aliases "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>User_Alias COOLGUYS = ben, chris， ron</td></tr><tr><td>Runas_Alias LESSCooL = root， operator</td></tr><tr><td>Host_Alias CO0LNET = 192.168.78.0/255.255.255.0</td></tr><tr><td>Cmnd_Alias PRINT = /usr/sbin/lpc, /usr/bin/lprm</td></tr><tr><td>omar ALL=(LESSCOOL） ALL # The user omar can run any command from any terminal as any user in</td></tr><tr><td>the LESSCooL group (root or operator).</td></tr><tr><td>trina COOLNET=(ALL） ALL # The user trina may run any command from any machine in the CooLNET</td></tr><tr><td>network, as any user.</td></tr><tr><td></td></tr><tr><td>ben ALL=PRINT</td></tr><tr><td># The user ben may run lpc and lprm from any machine.</td></tr></table></body></html>\n\n",
        "page_idx": 52
    },
    {
        "type": "text",
        "text": "In Example 7-15 the alias COOLGUYS includes the users ben, chris, and ron. The alias LESSCOOL includes the users root and operator. The alias COOLNET includes the network 192.168.78.0/24, and the command alias PRINT includes the commands lpc and lprm. ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "TIP Sudo has been affected by several vulnerabilities that allow users to overwrite system configurations, run additional commands that should not be authorized, among other things. You can stay informed of any new vulnerabilities in Sudo at https://www.sudo.ws/security.html. ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "Ret2libc Attacks ",
        "text_level": 1,
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "A “return-to-libc” (or ret2libc) attack typically starts with a buffer overflow. In this type of attack, a subroutine return address on a call stack is replaced by an address of a subroutine that is already present in the executable memory of the process. This is done to potentially bypassing the no-execute (NX) bit feature and allow the attacker to inject his or her own code. ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "Operating systems that support non-executable stack help protect against code execution after a buffer overflow vulnerability is exploited. On the other hand, nonexecutable stack cannot prevent a ret2libc attack because in this attack, only existing executable code is used. Another technique, called stack-smashing protection, can prevent or obstruct code execution exploitation because it can detect the corruption of the stack and can potentially “flush out” the compromised segment. ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "A technique called ASCII armoring can be used to mitigate ret2libc attacks. When you implement ASCII armoring, the address of every system library (such as libc) contains a NULL byte (0x00) that you insert in the first 0x01010101 bytes of memory. This is typically a few pages more than $16M{\\mathrm{B}}$ and is called the ASCII armor region because every address up to (but not including) this value contains at least one NULL byte. When this methodology is implemented, an attacker cannot place code containing those addresses using string manipulation functions such as strcpy(). ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "Of course, this technique doesn’t protect the system if the attacker finds a way to overflow NULL bytes into the stack. A better approach is to use the address space layout randomization (ASLR) technique, which mitigates the attack on 64-bit systems. When you implement ASLR, the memory locations of functions are random. ASLR is not very effective in 32-bit systems, though, because only 16 bits are available for randomization, and an attacker can defeat such a system by using bruteforce attacks. ",
        "page_idx": 53
    },
    {
        "type": "text",
        "text": "Windows Privileges ",
        "text_level": 1,
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "The following sections cover several methodologies and attacks for performing privilege escalation in Windows systems. ",
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "CPassword ",
        "text_level": 1,
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "Legacy Windows operating systems were susceptible to CPassword attacks. CPassword was a component of Active Directory’s Group Policy Preferences that allowed administrators to set passwords via Group Policy. Microsoft patched this vulnerability in MS14-025 (see https://docs.microsoft. com/en-us/security-updates/securitybulletins/2014/ms14-025). Microsoft also released a document explaining the vulnerability details, as well as wellknown mitigations (see https://support.microsoft.com/en-us/help/2962486/ ms14-025-vulnerability-in-group-policy-preferences-could-allow-elevati). ",
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "If administrators use CPassword to perform common tasks (such as changing the local administrator account), any user with basic read rights to the SYSVOL directory can obtain the authentication key and crack it by using tools such as John the Ripper and Hashcat. ",
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "TIP A CPassword attack is also referred to as a GPP attack. To test and find vulnerable systems, you can just perform a keyword search for “cpassword” through all the files in the SYSVOL directory and modify or remove any Group Policy Objects (GPOs) that reference them. A GPO is a virtual compilation of policy settings. Each GPO is configured with a unique name, such as a GUID. You can obtain more information about GPOs at https://msdn.microsoft.com/en-us/library/aa374162(v=vs.85). aspx. Microsoft has also published an article describing the SYSVOL implementation at https://social.technet.microsoft.com/wiki/contents/articles/24160.active-directoryback-to-basics-sysvol.aspx. ",
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "You can automatically decrypt passwords that are stored in the Group Policy Preferences by using Metasploit, and you can use the Meterpreter post-exploitation module to obtain and decrypt CPassword from files stored in the SYSVOL directory. In addition, a number of PowerShell scripts can be used to perform this type of attack, such as the ones at https://github.com/PowerShellMafia/PowerSploit/blob/ master/Exfiltration/Get-GPPPassword.ps1. ",
        "page_idx": 54
    },
    {
        "type": "text",
        "text": "Clear-Text Credentials in LDAP ",
        "text_level": 1,
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "Unfortunately, many organizations still configure their Windows domain controllers to receive credentials in clear text over the network. One easy way to determine whether a system is affected by sending credentials in the clear is to look for event IDs 2886 and 2887 in the Active Directory Service log. Example 7-16 shows an example of Event 2886. ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "Example 7-16 Directory Service Event 2886 ",
        "text_level": 1,
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "Log Name: Directory Service   \nSource: Microsoft-Windows-ActiveDirectory_DomainService   \nDate: 6/12/2018 3:08:11 AM   \nEvent ID: 2886   \nTask Category: LDAP Interface   \nLevel: Warning   \nKeywords: Classic   \nUser: hacker   \nComputer: omar_workstation.sd.lan ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "Description: ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "The security of this directory server can be significantly enhanced by configuring the server to reject SASL (Negotiate, Kerberos, NTLM, or Digest) LDAP binds that do not request signing (integrity verification) and LDAP simple binds that are performed on a cleartext (non-SSL/TLS-encrypted) connection. Even if no clients are using such binds, configuring the server to reject them will improve the security of this server. ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "Some clients may currently be relying on unsigned SASL binds or LDAP simple binds over a non-SSL/TLS connection, and will stop working if this configuration change is made. To assist in identifying these clients, if such binds occur this directory server will log a summary event once every 24 hours indicating how many such binds occurred. You are encouraged to configure those clients to not use such binds. Once no such events are observed for an extended period, it is recommended that you configure the server to reject such binds. ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "If any domain controller has the 2886 event present, this indicates that LDAP signing is not being enforced by the domain controller, and it is possible to perform a simple (clear-text) LDAP bind over a non-encrypted connection. ",
        "page_idx": 55
    },
    {
        "type": "text",
        "text": "TIP The tool at https://github.com/russelltomkins/Active-Directory/blob/master/ Query-InsecureLDAPBinds.ps1 can be used to query logs for insecure LDAP binds and clear-text passwords. Furthermore, the following post includes additional information about how such an attack could be performed: https://www.harmj0y.net/blog/ powershell/kerberoasting-without-mimikatz. ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "Kerberoasting ",
        "text_level": 1,
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "Kerberoast is a series of tools for attacking Microsoft Kerberos implementations and Windows service accounts. The tool can be obtained from https://github.com/ nidem/kerberoast. ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "TIP The post https://www.blackhillsinfosec.com/a-toast-to-kerberoast/ provides step-by-step instructions for remotely running a Kerberoast attack over an established Meterpreter session to a command and control server and cracking the ticket offline using Hashcat. ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "You will learn more about Meterpreter and Hashcat in Chapter 9, “Penetration Testing Tools.” ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "Credentials in Local Security Authority Subsystem Service (LSASS) ",
        "text_level": 1,
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "Another attack commonly performed against Windows systems involves obtaining user and application credentials from the Local Security Authority Subsystem Service (LSASS). It is possible to dump the LSASS process from memory to disk by using tools such as Sysinternals ProcDump. Attackers have been successful using ProcDump because it is a utility digitally signed by Microsoft. Therefore, this type of attack can evade many antivirus programs. ProcDump creates a minidump of the target process. An attacker can then use tools such as Mimikatz to mine user credentials ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "TIP You can use the VMware tool vmss2core to dump memory from a suspended virtual machine (VM). You can easily identify a suspended VM by the file extension .vmss. You can also use the VMware tool vmss2core to dump memory from snapshotted VMs (\\*.vmsn). You can then use the Volatility Framework to extract the hashes. For more information about the Volatility Framework, see http:// www.volatilityfoundation.org. ",
        "page_idx": 56
    },
    {
        "type": "text",
        "text": "The following are additional resources related to the aforementioned attacks: ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "■ ProcDump and Windows Sysinternals: https://docs.microsoft.com/en-us/ sysinternals/downloads/procdump   \n■ Mimikatz: http://blog.gentilkiwi.com/mimikatz   \n■ The Volatility Foundation: http://www.volatilityfoundation.org   \n■ Vmss2core: https://labs.vmware.com/flings/vmss2core   \n■ VMware Snapshot and Saved State Analysis: http://volatility-labs.blogspot.be/ 2013/05/movp-ii-13-vmware-snapshot-and-saved.html ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "SAM Database ",
        "text_level": 1,
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "Microsoft Active Directory plays an important role in many organizations. Active Directory provides a directory service for managing and administering different domain activities. Active Directory is based on a client/server architecture. Understanding how Active Directory works and the underlying architecture is very important for any pen tester tasked with testing Windows environments. ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "Of course, one of the common tasks in a penetration testing engagement is to retrieve passwords from a Windows system and ultimately try to get domain administrator access. In Chapter 5, “Exploiting Wired and Wireless Networks,” you learned about the pass-the-hash attack technique and other attacks against Windows systems. As a refresher, Windows stores password hashes in three places: ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "■ The Security Account Manager (SAM) database ■ The LSASS ■ The Active Directory database ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "All versions of Windows store passwords as hashes, in a file called the Security Accounts Manager (SAM) database. ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "NOTE The SAM database stores only hashes the passwords. Windows itself does not know what the passwords are. ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "The SAM database stores usernames and NT hashes in a $\\%$ SystemRoot%/ system32/config/SAM file. This file contains all the hash values for accounts that are local to the computer. ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "Microsoft created its own hash process for its Windows operating systems. This is where the NT LAN Manager (NTLM) comes into play. NTLM is a suite of ",
        "page_idx": 57
    },
    {
        "type": "text",
        "text": "Microsoft security protocols that have been proven to be vulnerable and used by many penetration testers as well as threat actors to compromise machines. Because password hashes cannot be reversed, instead of trying to figure out a user’s password, you (or an attacker) can just use a password hash collected from a compromised system and then use the same hash to log in to another client or server system. This technique, called pass-the-hash, is illustrated in Figure 7-8. ",
        "page_idx": 58
    },
    {
        "type": "image",
        "img_path": "images/b2a9907f6e2edb6a82d50ce062e0cc27a089f41088c316c23a20a3422dbd888a.jpg",
        "img_caption": [
            "FIGURE 7-8 Pass-the-Hash Attack Example "
        ],
        "img_footnote": [],
        "page_idx": 58
    },
    {
        "type": "text",
        "text": "Microsoft now uses Kerberos in Windows domains, but NTLM is still used when the client is authenticating to a server in a different Active Directory forest that has a legacy NTLM trust instead of a transitive inter-forest trust. NTLM is also used when the client is authenticating to a server that doesn’t belong to a domain and when Kerberos is blocked by a firewall or a similar device. ",
        "page_idx": 58
    },
    {
        "type": "text",
        "text": "Understanding Dynamic Link Library Hijacking ",
        "text_level": 1,
        "page_idx": 58
    },
    {
        "type": "text",
        "text": "Dynamic link libraries (DLLs) are common components in all versions of Windows. Some DLLs are loaded into applications when they start (if needed). DLLs interact with APIs and other operating system procedures. If you tamper with a system in order to control which DLL an application loads, you may be able to insert a malicious DLL during the DLL loading process to compromise the system. An application can decide the order of the directories to be searched for a DLL to load, depending on the configuration of the system. The following list shows the order of the Windows DLL search process: ",
        "page_idx": 58
    },
    {
        "type": "text",
        "text": "Step 1. Windows searches the working directory from which the application is loaded. Step 2. Windows searches the current directory (from which the user is working). ",
        "page_idx": 58
    },
    {
        "type": "text",
        "text": "Step 3. Windows searches the system directory (typically \\Windows\\System32\\). The GetSystemDirectory function is called to obtain this directory.   \nStep 4. Windows searches the 16-bit system directory.   \nStep 5. Windows searches the Windows directory. The GetWindowsDirectory function is called to obtain this directory.   \nStep 6. Windows searches directories that are listed in the PATH environment variable. ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "In this process, the attack relies on a program making a decision to load a DLL from the current directory (step 2). An attacker can manipulate that step and perform a DLL hijacking attack. For instance, if the user is opening an Excel spreadsheet, Microsoft Office attempts to load its DLL component from the location of that document file. An attacker can put a malicious DLL in that directory. Subsequently, Microsoft Office can carelessly load the malicious DLL. ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "TIP DLL hijack attacks are not as effective as they used to be. This is because Microsoft has released several patches and features that help prevent these types of attacks. The following article explains some of the mitigations: https://docs.microsoft .com/en-us/windows/desktop/dlls/dynamic-link-library-search-order. ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "Exploitable Services ",
        "text_level": 1,
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "You as a pen tester can take advantage of exploitable services such as the following: ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "■ Unquoted service paths: If an executable (application binary) is enclosed in quotation marks (“”), Windows knows where to find it. On the contrary, if the path where the application binary is located doesn’t contain any quotation marks, Windows will try to locate it and execute it inside every folder of this path until it finds the executable file. An attacker can abuse this functionality to try to elevate privileges if the service is running under SYSTEM privileges. A service is vulnerable if the path to the executable has a space in the filename and the filename is not wrapped in quotation marks; exploitation requires write permissions to the path before the quotation mark. ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "■ Writable services: Administrators often configure Windows services that run with SYSTEM privileges. This could lead to a security problem because an attacker may obtain permissions over the service or over the folder where the binary of the service is stored (or both). Services configured this way are also often found in third-party software (TPS) and may be used for privilege escalation. ",
        "page_idx": 59
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "Insecure File and Folder Permissions ",
        "text_level": 1,
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "An attacker can take advantage of unsecured and misconfigured file and folder permissions. Files and folders in Windows can have read and write permissions. These permissions are established strictly to specific users or groups. In contrast, Unix and Linux-based systems grant file and folder permissions to the owner, the group owner, or everybody. Windows uses specific permissions to allow users to access folder content. Windows does not use execute permissions on files. Windows uses the filename extension to determine whether a file (including a script file) can be run. ",
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "TIP For details on how Windows file security and access rights work, see https:// docs.microsoft.com/en-us/windows/desktop/fileio/file-security-and-access-rights. Microsoft has also published a detailed document explaining Windows access control lists at https://docs.microsoft.com/en-us/windows/desktop/secauthz/ access-control-lists. ",
        "page_idx": 60
    },
    {
        "type": "table",
        "img_path": "images/092dd41adf1f8faeaffb529a11ef6e21930b3ec36eda9a330fff9d2fa37b4b65.jpg",
        "table_caption": [
            "Table 7-2 compares the permissions between Unix/Linux systems and Windows. ",
            "Table 7-2 A Comparison Between Permissions for Unix/Linux-Based Systems and Windows Systems "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Unix/Linux</td><td>Windows</td></tr><tr><td colspan=\"2\">Read and write permissions on a folder in Unix is the same as the read and write permissions in Windows.</td></tr><tr><td colspan=\"2\">The read and execute permissions on a file in Unix are the same as the read and execute permissions in Windows.</td></tr><tr><td>Write permission on a file</td><td>Modify permission on a file</td></tr><tr><td>Execute permission on a folder</td><td>List Folder Contents permission</td></tr><tr><td>Read, write, and execute permissions on a file or folder</td><td>Full Control permission</td></tr></table></body></html>\n\n",
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "Understanding Windows Group Policy ",
        "text_level": 1,
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "In Windows, Group Policy is a centralized administration feature for systems belonging to a Windows domain. This functionality allows you to create policies in Active Directory and assign them to users or systems. You create policies to configure specific settings and permissions within the Windows operating system. The item inside Active Directory that contains these settings is called a Group Policy Object (GPO). GPOs can be used for user accounts, for client computer settings, or for configuring policies in servers. Typically, the goal is to configure GPOs in such a way that they cannot be overridden by users. ",
        "page_idx": 60
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 61
    },
    {
        "type": "text",
        "text": "TIP Microsoft provides a series of spreadsheets and other documentation to help manage GPOs; see http://www.microsoft.com/en-us/download/details.aspx?id=25250. These spreadsheets list the policy settings for computer and user configurations that are included in the Administrative template files delivered with the specified Windows operating system. You can configure these policy settings when you edit GPOs. A brief example of one of these spreadsheets is shown in Figure 7-9. ",
        "page_idx": 61
    },
    {
        "type": "table",
        "img_path": "images/c35bb4d2929cb87f8a1e2e680ee723bb4574c16bc995b0207aa2e000e293e85f.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td colspan=\"4\"></td></tr><tr><td>Inser1 Page Layout</td><td>Date View</td><td></td><td>Sharo</td></tr><tr><td colspan=\"4\">A</td></tr><tr><td></td><td>8 PolieyPath</td><td>C</td><td>SupportedC</td></tr><tr><td>1 Status</td><td>Cump CofqWd SatingAcont PulciPw Puy</td><td>Policy Name Enloroe pawotd flry</td><td>ALlastindow</td></tr><tr><td>2</td><td></td><td>Maoimu pasrord age</td><td>AL least Windows</td></tr><tr><td>3</td><td>Compur ConfigutiorWno Setings/Account PolicisiPword Pulicy</td><td>Minimumt password age</td><td></td></tr><tr><td>4</td><td>Comptr CofigurtirWnd SettingAcont PeicisiPaw Pullcy</td><td></td><td>AL ieal Window</td></tr><tr><td>5</td><td>CoCgAc PiP</td><td>Mnimum pawond langh</td><td>AL iat Window</td></tr><tr><td>6</td><td>Comput CoigueatiorWindos SatingsAcnt PolicinsiPswrd Policy</td><td>Paseon must met nmpisty quramart</td><td>Al lat Window</td></tr><tr><td>7</td><td>Domp CafiguWdx SettngAcnt PmPw Puy</td><td>S p ung n ncry ra un the dmn</td><td>AL ieaat Window</td></tr><tr><td>8</td><td>Computnt ConfiguratioriWindous SettingsAcoount PolicinsiAccount Lodkout Polcy</td><td>Aooount lckut duon</td><td>ALieast Windowe</td></tr><tr><td>9</td><td>Computer ConfigurstiriWindous SettingeAccount PolicieiAccounl Locout Polcy</td><td>Aooount logkout heshd</td><td>ALliatWindowe</td></tr><tr><td>10</td><td>Compt CogrtWdSettngAonPocAccot LutPo</td><td>Retcutoufer</td><td>Atiest Windowe</td></tr><tr><td>11</td><td>Compur CogurtriWindos Seting/LcalPolcee/KerbroPoicy</td><td>Enforoe user lognerictine</td><td>ALlieast Windowe</td></tr><tr><td>12</td><td>Coput CofiguatiWind Seting/LclPuiKerrsPocy</td><td>Maodmuf at</td><td>AL leaet Windowe</td></tr><tr><td>13</td><td>CoerCofgtosSetinaPuicsKerPolcy</td><td>Marimuee r ur tidt</td><td>A ilast Window</td></tr><tr><td>14</td><td>ComputCoigioiWndoSetinglLoclPuicKerberosPolicy</td><td>Maoimum llete foruser tict enwl</td><td>AL least Windows</td></tr><tr><td>15</td><td>CompeCoigioWndesSetingaLclPuicKeberos Picy</td><td>Maimulran for compde locksnchronizatn</td><td>ALleastWindow</td></tr><tr><td>16</td><td>Computet ConfigurationiWindous Setinge/Local Pulicies/Autit Polcy</td><td>Autit account logon events</td><td>Atiest Windows</td></tr><tr><td>17</td><td>ComCoigutWs SetnglclPsAuPoy</td><td>Audtaccount mansement</td><td>At ieastWindow</td></tr><tr><td>18</td><td>ComCoguti Seting PiAPoy</td><td>Audieyes</td><td>At least Window</td></tr><tr><td>19</td><td>Compuer CngurtWn SeinglLclPoliestPoy</td><td>Audt iogonevents</td><td>AtiestWindowe</td></tr><tr><td>20</td><td>Comput ConguratrWindsSetting/LcalPolicAuitPocy</td><td>Audtobjecacoess</td><td>AtieastWindowe</td></tr><tr><td>21</td><td>ComputConguralloWndSetinglocalPoliceAdPollcy</td><td>Audt polychange</td><td>AtiastWindowe</td></tr><tr><td>22</td><td>ComputCguratindsSeingeLcPolAuPoy</td><td>Autdt prllge ue</td><td>AL leastWindowe</td></tr><tr><td>23</td><td>ComputerCongurlloWndosSeinglLoclPolideeAudPollcy</td><td>Audt proces racking</td><td>ALliostWindows</td></tr><tr><td>24</td><td>Compu ConguatWindosSetinge/LclPulcAuPuy</td><td>Audt syslem eens</td><td>ALleastWindowe</td></tr><tr><td>25</td><td>CompurCoguradsSetngllPocUsrRsAsgt</td><td>Aooes tis compuler Trom the mework</td><td>ALleast Windows</td></tr><tr><td>26</td><td>Computer ConfguratoriWindows Settinge/Local Pulices/UserRigpts Assigrment</td><td>Access Credental Manager asa tusted caler</td><td>ALleastWindows</td></tr><tr><td>27</td><td>Computer ConfiguralloniWndoes SetingslLocal PoliciesUser Rights Assigrment</td><td>Act as art ofthe operaing sysem</td><td>ALlieastWindows</td></tr><tr><td>28</td><td>CompurConguratoWidosSetingcalPociesUserRtsAsigment</td><td>Add workstations to adoman</td><td>At leastWindows</td></tr><tr><td>29</td><td>Compuiter ConigurationiWindows SettingslL.ocal PoliceslUser Rights Assignment</td><td>Adjstemoyquotasfor prss</td><td>At ieastWindows</td></tr><tr><td>30</td><td>ComCogurtSetngPsUsrsAign</td><td>Alowlog n locally</td><td>AtiastWindows</td></tr><tr><td colspan=\"4\">Adraeedie Teeglde Secarly + Resty</td></tr></table></body></html>\n\n",
        "page_idx": 61
    },
    {
        "type": "text",
        "text": "An attacker may use a keylogger to capture every key stroke of a user in a system and steal sensitive data (including credentials). There are two main types of keyloggers: keylogging hardware devices and keylogging software. A hardware (physical) keylogger is usually a small device that can be placed between a user’s keyboard and the main system. Software keyloggers are dedicated programs designed to track and log user keystrokes. ",
        "page_idx": 61
    },
    {
        "type": "text",
        "text": "NOTE Keyloggers are legal in some countries and designed to allow employers to oversee the use of their computers. However, recent regulations like GDPR have made keyloggers a very sensitive and controversial topic. Threat actors use keyloggers for the purpose of stealing passwords and other confidential information. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "There are several categories of software-based keyloggers: ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ Kernel-based keylogger: A program on the machine obtains root access to hide itself in the operating system and intercepts keystrokes that pass through the kernel. This method is difficult both to write and to combat. Such keyloggers reside at the kernel level, which makes them difficult to detect, especially for user-mode applications that don’t have root access. They are frequently implemented as rootkits that subvert the operating system kernel to gain unauthorized access to the hardware. This makes them very powerful. A keylogger using this method can act as a keyboard device driver, for example, and thus gain access to any information typed on the keyboard as it goes to the operating system. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ API-based keylogger: With this type of keylogger, compromising APIs reside inside a running application. Different types of malware have taken advantage of Windows APIs, such as GetAsyncKeyState() and GetForeground Window(), to perform keylogging activities. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ Hypervisor-based keylogger: This type of keylogger is effective in virtual environments, where the hypervisor could be compromised to capture sensitive information. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ Web form–grabbing keylogger: Keyloggers can steal data from web form submissions by recording the web browsing on submit events. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ JavaScript-based keylogger: Malicious JavaScript tags can be injected into a web application and then capture key events (for example, the onKeyUp() JavaScript function). ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "■ Memory-injection-based keylogger: This type of keylogger tampers with the memory tables associated with the browser and other system functions. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "Scheduled Tasks ",
        "text_level": 1,
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "Threat actors can take advantage of the Windows Task Scheduler to bypass User Account Control (UAC) if the user has access to its graphical interface. This is possible because the security option runs with the system’s highest privileges. When a Windows user creates a new task, the system typically doesn’t require the user to authenticate with an administrator account. You can also use this functionality for post-exploitation and persistence. ",
        "page_idx": 62
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "NOTE You can access the scheduled tasks of a Windows system by navigating to Start $\\mathbf{-}>$ Programs $\\mathrel{-}>$ Accessories $\\mathbf{-}>$ System Tools $\\lnot>$ Scheduled Tasks. ",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "Escaping the Sandbox ",
        "text_level": 1,
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "The term sandbox can mean different things depending on to the field. In cybersecurity, a sandbox allows you to isolate running applications to minimize the risk of software vulnerabilities spreading from one application to another. Figure 7-10 illustrates this sandboxing concept. ",
        "page_idx": 63
    },
    {
        "type": "image",
        "img_path": "images/4eda5f59c86c7bd68747c9709f2b5985e0446e736414dfacbacd82480d659c03.jpg",
        "img_caption": [
            "FIGURE 7-10 Sandboxes "
        ],
        "img_footnote": [],
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "Sandboxes can also be used to run untested or untrusted software from unverified or untrusted third parties, suppliers, users, or websites. In addition, they can be used to test malware without allowing the software to compromise the host system. ",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "TIP Sandbox implementations typically operate and provide a controlled set of resources for guest applications to run in. These resources include a “scratch space” on disk and memory. Typically, network access is disallowed or highly restricted. ",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "In web development, a sandbox is a mirrored production environment that developers use to create an application before migrating it to a production environment. Companies like Amazon, Google, and Microsoft, among others, provide sandboxing services. ",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "NOTE For the purpose of this book, we of course concentrate on sandboxes related to cybersecurity. ",
        "page_idx": 63
    },
    {
        "type": "text",
        "text": "The following are examples of sandbox implementations: ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ A jail: This implementation is commonly used in mobile devices where there is restricted filesystem namespace and rule-based execution to not allow untrusted applications to run in the system. This is where the term jail-braking comes in. Users may “jail-break” their phones to be able to install games and other applications. With a jail-broken phone, an attacker can more easily impersonate applications and deliver malware to the user because a jail-broken device does not have the security controls in place to prevent malware from running on the system. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "Rule-based execution in SELinux and AppArmor security frameworks: This implementation restricts control over what processes are started, spawned by other applications, or allowed to inject code into the system. These implementations can control what programs can read and write to the file system. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Virtual machines: Virtual machines can be used to restrict a guest operating system to run sandboxed so that the applications do not run natively on the host system and can only access host resources through the hypervisor. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Sandboxing on native hosts: Security researchers may use sandboxing to analyze malware behavior. Even commercial solutions such as Cisco’s ThreatGrid use sandbox environments that mimic or replicate the victim system to evaluate how malware infects and compromises such a system. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Secure Computing Mode (seccomp) and seccomp-bpf (seccomp extension): These are sandboxes built in the Linux kernel to only allow the write(), read(), exit(), and sigreturn() system calls. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Software fault isolation (SFI): This implementation uses sandboxing methods in all store, read, and jump assembly instructions to isolated segments of memory. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Web browsers: Browsers provide sandboxing capabilities to isolate extensions and plugins. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ HTML5: HTML5 has a sandbox attribute for use with iframes. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "Java virtual machines: These VMs include a sandbox to restrict the actions of untrusted code, such as a Java applet. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ .NET Common Language Runtime: This implementation enforces restrictions on untrusted code. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Adobe Reader: This implementation runs PDF files in a sandbox to prevent them from escaping the PDF viewer and tampering with the rest of the computer. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "■ Microsoft Office: Office has a sandbox mode to prevent unsafe macros from harming the system. ",
        "page_idx": 64
    },
    {
        "type": "text",
        "text": "If an attacker finds a way to bypass (escape) the sandbox, he or she can then compromise other applications and potentially implement a full system compromise. Several sandbox escape vulnerabilities in the past have allowed attackers to do just that. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Virtual Machine Escape ",
        "text_level": 1,
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "In the previous section, you learned that VMs can be used to restrict a guest operating system to run sandboxed. This is because the applications do not run natively on the host system and can only access host resources through the hypervisor. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "If an attacker finds a way to escape the VM, he or she can then compromise other VMs and potentially compromise the hypervisor. This is catastrophic in cloud environments, where multiple customers can be affected by these types of attacks. A VM escape attack is illustrated in Figure 7-11. ",
        "page_idx": 65
    },
    {
        "type": "image",
        "img_path": "images/e8759baae958387a3f646529ebea5ad8106cce94c1b0f87c5ae9231a8fb7c079.jpg",
        "img_caption": [
            "FIGURE 7-11 VM Escape "
        ],
        "img_footnote": [],
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Understanding Container Security ",
        "text_level": 1,
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "A lot of people immediately think about Docker when they hear the word containers, but there are other container technologies out there. Linux Containers (LXC) is a well-known set of tools, templates, and library and language bindings for Linux containers. It’s pretty low level and very flexible, and it covers just about every containment feature supported by the upstream kernel. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "NOTE You can learn more about LXC at https://linuxcontainers.org. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "Docker is really an extension of LXC’s capabilities. A high-level API provides a lightweight virtualization solution to run different processes in isolation. Docker was developed in the Go language and utilizes LXC, cgroups, and the Linux kernel itself. ",
        "page_idx": 65
    },
    {
        "type": "text",
        "text": "NOTE You can learn more about Docker at https://www.docker.com. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Another popular container technology or package is rkt (or Rocket). rkt aims to provide a feature and capability that its creators call “secure-by-default.” It includes a number of security features such as support for SELinux, TPM measurement, and running app containers in hardware-isolated VMs. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "NOTE You can learn more about Rocket at https://github.com/rkt/rkt. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Cri-o is a lightweight container technology used and designed with Kubernetes. It provides support for containers based on the Open Container Initiative specifications (see https://www.opencontainers.org), a set of two specifications: the Runtime Specification (runtime-spec) and the Image Specification (image-spec). The runtime-spec outlines how to run a filesystem bundle that is unpacked on disk. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "NOTE You can learn more about Cri-o at http://cri-o.io. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Another container package is called OpenVz. It is not as popular as Docker or Rocket, but it is making the rounds. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "NOTE You can learn more about OpenVz at https://openvz.org. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "What is a container? A container image is a lightweight, standalone, executable package of a piece of software that includes everything you need to run it, including code, the runtime, system tools, system libraries, and settings. Containers are available for Linux, Mac OS X, and Windows applications. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "NOTE Containerized software will always run the same, regardless of the environment. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "Containers isolate software from its surroundings and help reduce conflicts between teams running different software on the same infrastructure. ",
        "page_idx": 66
    },
    {
        "type": "text",
        "text": "So what is the difference between a container and a virtual machine? Figure 7-12 provides a comparison. ",
        "page_idx": 66
    },
    {
        "type": "image",
        "img_path": "images/d1a6f16a2e9272a79d5b638fac5f55c2f198282d8e75aaf30c9e443cf8d076dd.jpg",
        "img_caption": [],
        "img_footnote": [
            "FIGURE 7-12 VMs vs. Containers "
        ],
        "page_idx": 67
    },
    {
        "type": "text",
        "text": "Figure 7-12 shows the architectural differences between container and VM environments. A VM generally includes an entire operating system along with the application. It also needs a hypervisor running along with it to control the VM. VMs tend to be pretty big in size, since they include whole operating systems. Because of this, they take up several minutes to boot up the operating system and initialize the application they are hosting. Containers are much smaller; they perform much better than VMs and can start almost instantly. ",
        "page_idx": 67
    },
    {
        "type": "text",
        "text": "One of the biggest advantages of container technologies is that containers can be created much faster than VM instances. Their lightweight footprint means less overhead in terms of performance and size. Containers increase developer productivity by removing cross-service dependencies and conflicts. Each container can be seen as a different microservice, and you can very easily upgrade them independently. ",
        "page_idx": 67
    },
    {
        "type": "text",
        "text": "Each image of a container can be version controlled, so you can track different versions of a container. Containers encapsulate all the relevant details, such as application dependencies and operating systems. This makes them extremely portable across systems. ",
        "page_idx": 67
    },
    {
        "type": "text",
        "text": "Docker and container technologies are supported by all major cloud providers, including Amazon Web Services (AWS), Google Cloud Platform, and Microsoft Azure. In addition, Docker can be integrated with tools like Ansible, Chef, Puppet, Jenkins, Kubernetes, OpenStack, Vagrant, and dozens of other tools and infrastructures. ",
        "page_idx": 67
    },
    {
        "type": "text",
        "text": "TIP Of course, this is not a book about Docker and containers. However, if you have never played with containers, you can easily download your favorite Linux distribution and install Docker. For example, in Ubuntu or even Kali Linux, you can simply install Docker with the apt install docker.io command. ",
        "page_idx": 68
    },
    {
        "type": "text",
        "text": "Some of the most challenging issues with containers and DevOps are operational in nature. For example, due to the convenience and agility that containers bring to the table, developers often pull Docker containers from community repositories and stores not knowing what vulnerabilities they are inheriting in those containers. Asset discovery and container vulnerability management are therefore very important. ",
        "page_idx": 68
    },
    {
        "type": "text",
        "text": "The following are a few examples of tools and solutions that have been developed roughout the years for container security: ■ Anchore: Anchore is used to analyze container images for the presence of known security vulnerabilities and against custom security policies. It has both open source and commercial versions. You can obtain the open source code and more information about it from https://github.com/anchore/ anchore-engine. ■ Aqua Security: This is a commercial tool for securing container-based applications (see https://www.aquasec.com). Bane: This is an AppArmor profile generator for Docker containers. You can download it from https://github.com/genuinetools/bane. ■ CIS Docker Benchmark: This tool provides an automated way to test containers against well-known security best practices. You can download the CIS Docker Benchmark from https://github.com/dev-sec/cis-docker-benchmark. ■ Dev-Sec.io: This tool allows you to automatically apply hardening best practices to different types of servers (see https://dev-sec.io). ■ Clair: This is an open source static analysis for Docker containers from Core-OS. You can download Clair from https://github.com/coreos/clair. ■ Dagda: This is another tool for performing static analysis of known vulnerabilities. You can download Dagda from https://github.com/eliasgranderubio/ dagda. ■ docker-bench-security: This script, created by Docker, checks for common security best practices when deploying Docker containers in production. You can download this tool from https://github.com/docker/docker-bench-security. ",
        "page_idx": 68
    },
    {
        "type": "text",
        "text": "■ docker-explorer: This tool was created by Google to help analyze offline Docker file systems. It can be useful when performing forensic analysis of Docker containers. You can download it from https://github.com/google/ docker-explorer. ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "■ Notary: This open source project includes a server and a client for running and interacting with trusted containers. Notary is maintained by The Update Framework (TUF). You can obtain more information about Notary from https://github.com/theupdateframework/notary and information about TUF from https://theupdateframework.github.io. ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "■ oscap-docker: OpenSCAP (created by RedHat) includes the oscap-docker tool, which is used to scan Docker containers and images. OpenSCAP and the oscap-docker tool can be downloaded from https://github.com/OpenSCAP/ openscap. ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "Mobile Device Security ",
        "text_level": 1,
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "Mobile device security is a hot topic today. Individuals and organizations are increasingly using mobile devices for personal use and to conduct official business. Because of this, the risk in mobile devices and applications continues to increase. ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "The OWASP organization created the Mobile Security Project to provide mobile application and platform developers, as well as security professionals, resources to understand cybersecurity risks and to build and maintain secure mobile applications. The OWASP Mobile Security Project website can be accessed at https://www.owasp.org/index.php/OWASP_Mobile_Security_Project. ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "OWASP often performs studies of the top mobile security threats and vulnerabilities. According to OWASP, the top 10 mobile security risks at the time of this writing are: ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "■ Improper platform usage ■ Insecure data storage Insecure communication Insecure authentication Insufficient cryptography Insecure authorization Client code quality Code tampering Reverse engineering Extraneous functionality ",
        "page_idx": 69
    },
    {
        "type": "text",
        "text": "Mobile applications (apps) run either directly on a mobile device, on a mobile device web browser, or both. Mobile operating systems (such as Android and Apple iOS) offer software development kits (SDKs) for developing applications (such as those for games, productivity, business, and more). These mobile apps, referred to as native apps, typically provide the fastest performance with the highest degree of reliability and adhere to platform-specific design principles. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "Mobile web apps are basically websites designed to look and feel like native apps. These apps are accessed by a user via a device’s browser and are usually developed in HTML5 and responsive mobile frameworks. Another option, a hybrid app, executes like a native app, but a majority of its processes rely on web technologies. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "A lot of attacks against mobile apps start with reverse engineering and then move into tampering with the mobile app. Reverse engineering involves analyzing the compiled app to extract information about its source code. The goal of reverse engineering is to understand the underlying code and architecture. Tampering is the process of changing a mobile app (either the compiled app or the running process) or its environment to affect its behavior. In order to perform good reverse engineering of mobile apps, you should become familiar with the mobile device processor architecture, the app executable format, and the programming language used to develop a mobile app. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "Modern apps often include controls that hinder dynamic analysis. Certificate pinning and end-to-end (E2E) encryption sometimes prevent you from intercepting or manipulating traffic with a proxy. Root detection could prevent an app from running on a rooted device, preventing you from using advanced testing tools. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "NOTE Mobile apps that implement the protections specified in the Mobile AppSec Verification Standard (MASVS) Anti-Reversing Controls should withstand reverse engineering to a certain degree. Details about MASVS can be accessed at https://www.owasp.org/images/6/61/MASVS_v0.9.4.pdf. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "There are a few basic tampering techniques: ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "■ Binary patching (“modding”): This involves changing the compiled app in binary executables or tampering with resources. Modern mobile operating systems such as iOS and Android enforce code signing to mitigate binary tampering. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "■ Code injection: This allows you to explore and modify processes at runtime. Several tools, including Cydia Substrate (http://www.cydiasubstrate.com), Frida (https://www.frida.re), and XPosed (https://github.com/rovo89/ XposedInstaller), give you direct access to process memory and important structures such as live objects instantiated by the app. ",
        "page_idx": 70
    },
    {
        "type": "text",
        "text": "■ Static and dynamic binary analysis: This is done using disassemblers and decompilers to translate an app’s binary code or bytecode back into a more understandable format. By using these techniques on native binaries, you can obtain assembler code that matches the architecture for which the app was compiled. ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "■ Debugging and tracing: It is possible to identify and isolate problems in a program as part of the software development life cycle. The same tools used for debugging are valuable to reverse engineers even when identifying bugs is not their primary goal. Debuggers enable program suspension at any point during runtime, inspection of the process’s internal state, and even register and memory modification. ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Understanding Android Security ",
        "text_level": 1,
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Android is a Linux-based open source platform developed by Google as a mobile operating system. Android is not only used in mobile phones and tablets but also in wearable products, TVs, and many other smart devices. Android-based solutions come with many pre-installed (“stock”) apps and support installation of third-party apps through the Google Play store and other marketplaces. ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Android’s software stack is composed of several different layers (see https://source .android.com/devices/architecture). Each layer defines interfaces and offers specific services. At the lowest level, Android is based on a variation of the Linux kernel. On top of the kernel, the Hardware Abstraction Layer (HAL) defines a standard interface for interacting with built-in hardware components. Several HAL implementations are packaged into shared library modules that the Android system calls when required. This is how applications interact with the device’s hardware (for instance, how a phone uses the camera, microphone, and speakers). ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Android apps are usually written in Java and compiled to Dalvik bytecode, which is somewhat different from the traditional Java bytecode. The current version of Android executes this bytecode on the Android runtime (ART). ART is the successor to Android’s original runtime, the Dalvik virtual machine. The key difference between Dalvik and ART is the way the bytecode is executed (see https://source .android.com/devices/tech/dalvik/). ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Android apps do not have direct access to hardware resources, and each app runs in its own sandbox (see https://source.android.com/security/app-sandbox). The Android runtime controls the maximum number of system resources allocated to apps, preventing any one app from monopolizing too many resources. ",
        "page_idx": 71
    },
    {
        "type": "text",
        "text": "Even though the Android operating system is based on Linux, it doesn’t implement user accounts in the same way other Unix-like systems do. In Android, the multiuser support of the Linux kernel extends to sandbox apps: With a few exceptions, each app runs as though under a separate Linux user, effectively isolated from other apps and the rest of the operating system. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "TIP The file android_filesystem_config.h includes a list of the predefined users and groups to which system processes are assigned. User IDs (UIDs) for other applications are added as they are installed. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "Android apps interact with system services such as the Android Framework and related APIs. Most of these services are invoked via normal Java method calls and are translated to IPC calls to system services that are running in the background. Examples of system services include the following: ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "■ Network connectivity, including Wi-Fi, Bluetooth, and NFC   \nCameras   \nGeolocation (GPS)   \nDevice microphone ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "The framework also offers common security functions, such as cryptography. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "The Android Package Kit (APK) file is an archive that contains the code and resources required to run the app it comes with. This file is identical to the original signed app package created by the developer. The installed Android apps are typically located at /data/app/[package-name]. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "The following are some key Android files: ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "■ AndroidManifest.xml: This file contains the definition of the app’s package name, target, and minimum API version, app configuration, components, and user-granted permissions. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "■ META-INF: This file contains the application’s metadata and the following three files: ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "■ MANIFEST.MF: This file stores hashes of the app resources. ■ CERT.RSA: This file stores the app’s certificate(s). ■ CERT.SF: This file lists resources and the hash of the corresponding lines in the MANIFEST.MF file. ",
        "page_idx": 72
    },
    {
        "type": "text",
        "text": "assets: This directory contains app assets (files used within the Android app, such as XML files, JavaScript files, and pictures), which the AssetManager can retrieve.   \n■ classes.dex: This directory contains classes compiled in the DEX file format that the Dalvik virtual machine/Android runtime can process. DEX is Java bytecode for the Dalvik virtual machine, and it is optimized for small devices.   \n■ lib: This directory contains native compiled libraries that are part of the APK, such as the third-party libraries that are not part of the Android SDK.   \nres: This directory contains resources that haven’t been compiled into resources.arsc.   \nresources.arsc: This file contains precompiled resources, such as XML files for layout. ",
        "page_idx": 73
    },
    {
        "type": "text",
        "text": "AndroidManifest.xml is encoded into binary XML format, which is not readable with a text editor. However, you can unpack an Android app by using Apktool. When you run Apktool with the default command-line flags, it automatically decodes the manifest file to text-based XML format and extracts the file resources. The following are the typical decoded and extracted files: ",
        "page_idx": 73
    },
    {
        "type": "text",
        "text": "■ AndroidManifest.xml: This is the decoded manifest file, which can be opened and edited in a text editor.   \n■ apktool.yml: This file contains information about the output of Apktool.   \n■ original: This folder contains the MANIFEST.MF file, which stores information about the files contained in the JAR file.   \n■ res: This directory contains the app’s resources.   \n■ smalidea: This is a Smali language plugin. Smali is a human-readable representation of the Dalvik executable. Every app also has a data directory for storing data created during runtime. Additional information about smalidea can be obtained from https://github.com/JesusFreke/smali/wiki/smalidea.   \n■ cache: This location is used for data caching. For example, the WebView cache is found in this directory.   \n■ code_cache: This is the location of the file system’s application-specific cache directory that is designed for storing cached code. On devices running Lollipop or later Android versions, the system deletes any files stored in this location when the app or the entire platform is upgraded.   \n■ databases: This folder stores SQLite database files generated by the app at runtime (for example, user data files). ",
        "page_idx": 73
    },
    {
        "type": "text",
        "text": "■ files: This folder stores regular files created by the app. ■ lib: This folder stores native libraries written in $\\mathrm{C/C_{\\mathrm{++}}}$ . These libraries can have one of several file extensions, including .so and .dll (x86 support). This folder contains subfolders for the platforms for which the app has native libraries, including the following: ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "armeabi: Compiled code for all ARM-based processors ■ armeabi-v7a: Compiled code for all ARM-based processors, version 7 and above only arm64-v8a: Compiled code for all 64-bit ARM-based processors, version 8 and above only x86: Compiled code for x86 processors only ■ x86_64: Compiled code for x86_64 processors only ■ mips: Compiled code for MIPS processors ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "■ shared_prefs: This folder contains an XML file that stores values saved via the SharedPreferences APIs. ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "Android leverages Linux user management to isolate apps. This approach is different from user management in traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for each Android app and runs the app in a separate process. Consequently, each app can access its own resources only. This protection is enforced by the Linux kernel. Typically, apps are assigned UIDs in the range 10000 and 19999. An Android app receives a user name based on its UID. For example, the app with UID 10188 receives the username u0_a188. If the permissions an app requested are granted, the corresponding group ID is added to the app’s process. For example, the user ID of the app in this example is 10188. It belongs to the group ID 3003 (inet). That group is related to the android.permission.INTERNET permission in the application manifest. ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "Apps are executed in the Android Application Sandbox, which separates the app data and code execution from other apps on the device. This separation adds a layer of security. Installation of a new app creates a new directory named after the app package (for example, /data/data/[package-name]). This directory holds the app’s data. Linux directory permissions are set such that the directory can be read from and written to only with the app’s unique UID. ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "The process Zygote starts up during Android initialization. Zygote is a system service for launching apps. The Zygote process is a base process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/ zygote and listens for connections from local clients. When it receives a connection, it forks a new process, which then loads and executes the app-specific code. ",
        "page_idx": 74
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when an app component is started and the same app doesn’t yet have any other components running. Android may kill this process when the process is no longer necessary or when it needs to reclaim memory to run more important apps. The decision to kill a process is primarily related to the state of the user’s interaction with the process. ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "Android apps are made of several high-level components, including the following: ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "Activities Fragments Intents Broadcast receivers   \n■ Content providers and services ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "All these elements are provided by the Android operating system, in the form of predefined classes available through APIs. ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "TIP During development, an app is signed with an automatically generated certificate. This certificate is inherently insecure and is for debugging only. Most stores don’t accept this kind of certificate for publishing; therefore, a certificate with more secure features must be created. When an application is installed on the Android device, PackageManager ensures that it has been signed with the certificate included in the corresponding APK. If the certificate’s public key matches the key used to sign any other APK on the device, the new APK may share a UID with the preexisting APK. This facilitates interactions between applications from a single vendor. Alternatively, specifying security permissions for the Signature protection level is possible; this restricts access to applications that have been signed with the same key. ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "To perform detailed analysis of Android applications, you can download Android Studio. It comes with the Android SDK, an emulator, and an app to manage the various SDK versions and framework components. Android Studio also comes with the Android Virtual Device (AVD) Manager application for creating emulator images. You can download Android Studio from https://developer.android.com/studio. ",
        "page_idx": 75
    },
    {
        "type": "text",
        "text": "Figure 7-13 shows a screenshot of an application called OmarsApplication being developed using Android Studio. ",
        "page_idx": 75
    },
    {
        "type": "image",
        "img_path": "images/ba33d6fa30d757cb7e5ed28ba5add2809510d7ffa34b7b0f86ad35f67fb5d1c9.jpg",
        "img_caption": [
            "FIGURE 7-13 Android Studio "
        ],
        "img_footnote": [],
        "page_idx": 76
    },
    {
        "type": "text",
        "text": "For dynamic analysis, you need an Android device to run the target app. In principle, however, you can do without a real Android device and test on the emulator. Figure 7-14 shows the Android emulator that comes with Android Studio. ",
        "page_idx": 76
    },
    {
        "type": "image",
        "img_path": "images/1a0dcc3aaedf8554e0e49050f1e3d529f96ae216d803ab7058fadf26b48a0001.jpg",
        "img_caption": [
            "FIGURE 7-14 Android Emulator "
        ],
        "img_footnote": [],
        "page_idx": 76
    },
    {
        "type": "text",
        "text": "Testing on a real device makes for a smoother process and a more realistic environment. However, emulators provide a lot of convenience and flexibility. ",
        "page_idx": 77
    },
    {
        "type": "text",
        "text": "Developers and users often root their real devices to get full control over the operating system and to bypass restrictions such as app sandboxing. These privileges in turn allow individuals to use techniques like code injection and function hooking more easily. Rooting is risky and can void the device warranty. You might end up “bricking” a device (rendering it inoperable and unusable) if you run into problems when rooting the device. More importantly, rooting a device creates additional security risks because built-in exploit mitigations are often removed. ",
        "page_idx": 77
    },
    {
        "type": "text",
        "text": "TIP You should not root a personal device on which you store your private information. It is recommended to use a cheap, dedicated test device instead. ",
        "page_idx": 77
    },
    {
        "type": "image",
        "img_path": "images/0c705cec60e2bb98ba2e36a45572f0f80c066d83c1761a1da21348fe5ff1c79c.jpg",
        "img_caption": [
            "Figure 7-15 demonstrates how to use Apktool to decode and analyze the Android application OmarsApplication. ",
            "FIGURE 7-15 Using Apktool "
        ],
        "img_footnote": [],
        "page_idx": 77
    },
    {
        "type": "text",
        "text": "NOTE The source code for this sample application can be accessed at https://github.com/The-Art-of-Hacking/art-of-hacking. ",
        "page_idx": 77
    },
    {
        "type": "text",
        "text": "A few tools and frameworks are designed to test Android-based systems and related applications: ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "■ Androick: This collaborative research project allows any user to analyze an Android application. You can download Androick from https://github.com/ Flo354/Androick.   \n■ NowSecure App Testing: This is a mobile app security testing suite for Android and iOS mobile devices. There are two versions: a commercial edition and a community (free) edition. You can obtain more information about NowSecure from https://www.nowsecure.com/solutions/ mobile-app-security-testing.   \n■ OWASP SeraphimDroid: This privacy and device protection application for Android devices helps users learn about risks and threats coming from other Android applications. SeraphimDroid is also an application firewall for Android devices that blocks malicious SMS or MMS from being sent, Unstructured Supplementary Service Data (USSD) codes from being executed, or calls from being called without user permission and knowledge. You can obtain more information about SeraphimDroid from https://www.owasp.org/index.php/OWASP_SeraphimDroid_Project. ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "Understanding Apple iOS Security ",
        "text_level": 1,
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "The iOS operating system runs only in Apple mobile devices, including the iPhone, iPad, and iPods. Apple tvOS has inherited many architectural components and features from iOS. iOS apps run in a restricted environment and are isolated from each other at the file system level. iOS apps are also significantly limited in terms of system API access compared to macOS and other operating systems. Apple restricts and controls access to the apps that are allowed to run on iOS devices. The Apple App Store is the only official application distribution platform. ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "iOS apps are isolated from each other via the Apple sandbox and mandatory access controls defining the resources an app is allowed to access. iOS offers very few IPC options compared to Android, which significantly reduces the attack surface. Uniform hardware and tight hardware/software integration create another security advantage. ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "The iOS security architecture consists of six core features: ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "■ Hardware security Secure boot ■ Code signing ",
        "page_idx": 78
    },
    {
        "type": "text",
        "text": "■ Sandbox Encryption and data protection ■ General exploit mitigations ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "Every iOS device has two built-in Advanced Encryption Standard (AES) 256-bit keys (GID and UID). These keys are included in the application processor and secure enclave during manufacturing. There’s no direct way to read these keys with software or debugging interfaces such as JTAG. The GID is a value shared by all processors in a class of devices that is used to prevent tampering with firmware files. The UID is unique to each device and is used to protect the key hierarchy that’s used for device-level file system encryption. UIDs are not created during manufacturing, and not even Apple can restore the file encryption keys for a particular device. ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "The Apple secure boot chain consists of the kernel, the bootloader, the kernel extensions, and the baseband firmware. Apple has also implemented an elaborate DRM system to make sure that only Apple-approved code runs on Apple devices. FairPlay Code Encryption is applied to apps downloaded from the App Store. FairPlay was developed as a DRM for multimedia content purchased through iTunes. ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "The App Sandbox is an iOS sandboxing technology. It is enforced at the kernel level and has been a core security feature since the first release of iOS. All thirdparty apps run under the same user (mobile), and only a few system applications and services run as root. Regular iOS apps are confined to a container that restricts access to the app’s own files and a very limited number of system APIs. Access to all resources (such as files, network sockets, IPCs, and shared memory) is controlled by the sandbox. In addition, iOS implements address space layout randomization (ASLR) and the eXecute Never (XN) bit to mitigate code execution attacks. ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "iOS developers cannot set device permissions directly; they do so by using APIs. The following are a few examples of APIs and resources that require user permission: ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "Contacts   \n■ Microphone   \n■ Calendars Camera Reminders HomeKit Photos   \n■ HealthKit   \n■ Motion activity and fitness ",
        "page_idx": 79
    },
    {
        "type": "text",
        "text": "■ Speech recognition ■ Location Services Bluetooth ■ Media library Social media accounts ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "There are a few tools you can use to practice security testing on mobile devices. One of the most popular is the Damn Vulnerable iOS application, a project that provides an iOS application to practice mobile attacks and security defenses. It has a set of challenges that can be completed by an individual. Each challenge area corresponds to an in-depth article designed to teach the fundamentals of mobile security on the iOS platform. The following are examples of the challenges in the Damn Vulnerable iOS application: ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "■ Insecure Data Storage   \nJailbreak Detection   \nRuntime Manipulation   \nTransport Layer Security Client-Side Injection Broken Cryptography Binary Patching   \n■ Side Channel Data Leakage   \n■ Security Decisions via Untrusted Input ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "A learning tool for iOS security that is very popular and maintained by OWASP is iGoat. iGoat was inspired by the OWASP WebGoat project and has a similar conceptual flow. iGoat is free software, released under the GPLv3 license. iGoat can be downloaded from https://www.owasp.org/index.php/OWASP_iGoat_Tool_Project. ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "Another tool is the MobiSec Live Environment Mobile Testing Framework. MobiSec is a live environment for testing mobile environments, including devices, applications, and supporting infrastructure. The purpose is to provide attackers and defenders the ability to test their mobile environments to identify design weaknesses and vulnerabilities. MobiSec can be downloaded from https://sourceforge.net/projects/mobisec. ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "MITRE started a collaborative research project focused on open source iOS security controls called iMAS. iMAS was created to protect iOS applications and data beyond the Apple-provided security model and reduce the attack surface of iOS mobile devices and applications. The source code for iMAS is available on GitHub at https://github.com/project-imas. ",
        "page_idx": 80
    },
    {
        "type": "text",
        "text": "Understanding Physical Security Attacks ",
        "text_level": 1,
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "Physical security is a very important element when defending an organization against any security risk. The following sections provide an overview of physical device security and facilities/building security concepts. ",
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "Understanding Physical Device Security ",
        "text_level": 1,
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "Attackers with physical access to a device can perform a large number of attacks. Of course, device theft is one of the most common risks and the main reason it is important to encrypt workstations, laptops, and mobile devices as well as to enable remote wipe and remote recovery features. On the other hand, a few more sophisticated attacks and techniques can be carried out, including the following: ",
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "■ Cold boot attacks: Cold boot is a type of side channel attack in which the attacker tries to retrieve encryption keys from a running operating system after using a cold reboot (system reload). Cold boot attacks attempt to compromise the data remanence property of DRAM and SRAM to retrieve memory contents that could remain readable in the seconds to minutes after power has been removed from the targeted system. Typically, this type of attack by using removable media to boot a different operating system used to dump the contents of pre-boot physical memory to a file. ",
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "■ Serial console debugging, reconnaissance, and tampering: Many organizations use terminal servers (serial console servers) to allow remote access to the serial port of another device over a network. These devices provide remote access to infrastructure devices (for example, routers, switches), servers, and industrial control systems. They are also used to provide out-of-band access to network and power equipment for the purpose of recovery in the case of an outage. Many serial devices do not require authentication and instead assume that if you are physically connected to a serial port, you probably are assumed to be allowed to configure and connect to the system. Clearly, this can be abused by any attacker to gain access to a victim system. Even if terminal servers may allow you to connect using a non-privileged account, attackers can use unprotected serial consoles for reconnaissance and debugging to then perform further attacks on the targeted system. ",
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "■ JTAG debugging, reconnaissance, and tampering: JTAG is a hardware access interface that allows a penetration tester to perform debugging of hardware implementations. Debuggers can use JTAG access registers, memory contents, and interrupts, and they can even pause or redirect software instruction flows. JTAG can be an effective attack research tool because it allows debugging software (such as OpenOCD) control over a JTAG interface. OpenOCD can be used to manipulate the JTAG’s TAP controller and to send bits to a state machine with the goal of the chip being able to interpret them as valid commands. These types of tools allow you to debug firmware and software in devices via the GNU Project Debugger (GDB) or even interact with other tools like IDA Pro and other disassemblers and debuggers. ",
        "page_idx": 81
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "Clearly, an attacker with physical access to the targeted system has an advantage. Physical security to protect buildings and facilities is therefore crucial. In the next section, you will learn details about different physical security threats and attacks against buildings and facilities. ",
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "Protecting Your Facilities Against Physical Security Attacks ",
        "text_level": 1,
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "Numerous types of attacks can be carried to infiltrate facilities and to steal sensitive information from an organization. The following are some of the most common of them: ",
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "■ Piggybacking/tailgating: An unauthorized individual may follow an authorized individual to enter a restricted building or facility.   \n■ Fence jumping: An unauthorized individual may jump a fence or a gate to enter a restricted building or facility.   \n■ Dumpster diving: An unauthorized individual may search for and attempt to collect sensitive information from the trash.   \n■ Lockpicking: An unauthorized individual may manipulate or tamper with a lock to enter a building or obtain access to anything that is protected by a lock. Lock bypass is a technique used in lockpicking. Locks may be bypassed in many ways, including by using techniques such as simple loiding attempts (using a “credit card” or similar items against self-closing “latch” locks) and bypassing padlocks by shimming.   \n■ Egress sensors: Attackers may tamper with egress sensors to open doors.   \n■ Badge cloning: Attackers may clone the badges of employees and authorized individuals to enter a restricted facility or a specific area in a building. One of the most common techniques is to clone radio-frequency identification (RFID) tags (refer to Chapter 5). ",
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "Exam Preparation Tasks ",
        "text_level": 1,
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "As mentioned in the section “How to Use This Book” in the Introduction, you have a couple of choices for exam preparation: the exercises here, Chapter 11, “Final Preparation,” and the exam simulation questions in the Pearson Test Prep software online. ",
        "page_idx": 82
    },
    {
        "type": "text",
        "text": "Review All Key Topics ",
        "text_level": 1,
        "page_idx": 83
    },
    {
        "type": "text",
        "text": "Review the most important topics in this chapter, noted with the Key Topics icon in the outer margin of the page. Table 7-3 lists these key topics and the page number on which each is found. ",
        "page_idx": 83
    },
    {
        "type": "table",
        "img_path": "images/1ea9719fc6d02840f69b7ca8a67a95f075fa55b3bd0bb295eca252ea44252b47.jpg",
        "table_caption": [
            "Table 7-3 Key Topics for Chapter 7 "
        ],
        "table_footnote": [],
        "table_body": "\n\n<html><body><table><tr><td>Key Topic Element</td><td>Description</td><td>Page Number</td></tr><tr><td>Summary</td><td>Understanding insecure service and protocol configurations</td><td>281</td></tr><tr><td>Summary</td><td>Understanding local privilege escalation</td><td>285</td></tr><tr><td>Summary</td><td>Understanding Linux permissions</td><td>286</td></tr><tr><td>Summary</td><td>Changing Linux permissions and understanding sticky bits</td><td>288</td></tr><tr><td>Summary</td><td>Understanding SUID or SGID and Unix programs</td><td>291</td></tr><tr><td>Summary</td><td>Identifying insecure Sudo implementations</td><td>294</td></tr><tr><td>Summary</td><td>Understanding ret2libc attacks</td><td>298</td></tr><tr><td>Summary</td><td>Defining CPassword</td><td>299</td></tr><tr><td>Summary</td><td>Abusing and obtaining clear-text LDAP credentials</td><td>300</td></tr><tr><td>Summary</td><td>Understanding Kerberoasting</td><td>301</td></tr><tr><td>Summary</td><td>Compromising credentials in Local Security Authority Subsystem Service (LSASS) implementations</td><td>301</td></tr><tr><td>Summary</td><td>Understanding and attacking the Windows SAM database</td><td>302</td></tr><tr><td>Summary</td><td>Understanding dynamic link library (DLL) hijacking</td><td>303</td></tr><tr><td>Summary</td><td>Abusing exploitable services</td><td>304</td></tr><tr><td>Summary</td><td>Exploiting insecure file and folder permissions</td><td>305</td></tr><tr><td> Summary</td><td> Defining and understanding keyloggers</td><td>306</td></tr><tr><td>Summary</td><td> Defining and understanding scheduled tasks</td><td>307</td></tr><tr><td>Summary</td><td>Understanding sandbox escape attacks</td><td>308</td></tr><tr><td>Summary</td><td>Understanding virtual machine (VM) escape attacks</td><td>310</td></tr><tr><td>Summary</td><td>Identifying container security challenges</td><td>313</td></tr><tr><td>Summary</td><td>Understanding the top mobile security threats and vulnerabilities </td><td>314</td></tr><tr><td>Summary</td><td> Understanding Android security</td><td>316</td></tr><tr><td>Summary</td><td>Understanding Apple iOS security</td><td>323</td></tr><tr><td>Summary</td><td>Understanding cold boot attacks, serial console, and JTAG debugging reconnaissance and tampering</td><td>326</td></tr><tr><td>Summary</td><td>Understanding physical security attacks</td><td>327</td></tr></table></body></html>\n\n",
        "page_idx": 83
    },
    {
        "type": "text",
        "text": "Define Key Terms ",
        "text_level": 1,
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "Define the following key terms from this chapter and check your answers in the glossary: ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "piggybacking, tailgating, fence jumping, dumpster diving, lockpicking, lock bypass, JTAG, sandbox, keylogger, Group Policy Object (GPO), Kerberoast, CPassword, Ret2libc ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "Q&A ",
        "text_level": 1,
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "The answers to these questions appear in Appendix A. For more practice with exam format questions, use the Pearson Test Prep software online. ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "1. Which of the following involves an unauthorized individual searching and attempting to collect sensitive information from the trash? ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "a. Piggybacking b. Fence jumping c. Dumpster diving d. Lockpicking ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "2. Which of the following is a technique that is executed using disassemblers and decompilers to translate an app’s binary code or bytecode back into a more or less understandable format? ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "a. Static and dynamic binary analysis b. Static and dynamic source code analysis c. Binary patching, or “modding” d. Binary code injection ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "3. Which of the following is a sandbox built in the Linux kernel to only allow the write(), read(), exit(), and sigreturn() system calls? ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "a. SUDI b. Seccomp c. SELinux d. Linux-jail ",
        "page_idx": 84
    },
    {
        "type": "text",
        "text": "4. Which of the following statements is not true? ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "a. Modern web browsers provide sandboxing capabilities to isolate extensions and plugins.   \nb. HTML5 has a sandbox attribute for use with iframes.   \nc. Java virtual machines include a sandbox to restrict the actions of untrusted code, such as a Java applet.   \nd. Microsoft’s .NET Common Language Runtime cannot enforce restrictions on untrusted code. ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "5. Which of the following can attackers use to capture every keystroke of a user in a system and steal sensitive data (including credentials)? ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "a. RATs b. Keybinders c. Keyloggers d. Ransomware ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "6. Which of the following functionalities can an attacker abuse to try to elevate privileges if the service is running under SYSTEM privileges? ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "a. Unquoted service paths   \nb. Unquoted PowerShell scripts   \nc. Writable SYSTEM services using the GetSystemDirectory function   \nd. Cross-site scripting (XSS) ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "7. Which of the following is not a place where Windows stores password hashes? ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "a. SAM database   \nb. LSASS   \nc. PowerShell hash store   \nd. AD database ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "8. Which of the following is an open source tool that allows an attacker to retrieve user credential information from the targeted system and potentially perform pass-the-hash and pass-the-ticket attacks? ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "a. SAM Stealer b. Mimikatz c. Kerberoast d. Hashcrack ",
        "page_idx": 85
    },
    {
        "type": "text",
        "text": "This page intentionally left blank ",
        "page_idx": 86
    },
    {
        "type": "text",
        "text": "Index ",
        "text_level": 1,
        "page_idx": 87
    },
    {
        "type": "text",
        "text": "A ",
        "text_level": 1,
        "page_idx": 87
    },
    {
        "type": "text",
        "text": "AC (Attack Complexity) metrics, 37   \nacceptance of risk, 48   \nAccess Vector (AV) metrics, 37   \naccount data, elements of, 55   \nacquirers, 54   \nActivate Exam button (Pearson Test Prep software), 507   \nActivate New Product button (Pearson Test Prep software), 506   \nactive reconnaissance defined, 70–71 Enum4linux, 395–400 enumeration defined, 71 group, 81–82 host, 78–79 network share, 82 packet crafting, 85–87 service, 85 user, 80–81 web page/web application, 83–84 Nikto scans, 84 Nmap port scans, 391–393 half-open, 71–72 ping, 77–78 SYN, 71–72 TCP connect, 73–74 TCP FIN, 76–77 UDP, 74–75 Recon-ng, 90–102 hackertarget module, 96 help menu, 92 ",
        "page_idx": 87
    },
    {
        "type": "text",
        "text": "key list command, 96–97 launching, 91 main menu and splash page, 91 searches, 95 Shodan API, 96–102 show modules command, 92–95 Zenmap, 393–395 adapters, wireless, 189 Add-Persistence script, 351 Address Resolution Protocol. See ARP (Address Resolution Protocol) address space layout randomization (ASLR), 298, 324 ADIA (Appliance for Digital Investigation and Analysis), 457 Adobe Reader, 309 Advanced Encryption Standard (AES), 324 advertisements, malvertising, 127–128 AES (Advanced Encryption Standard), 324 AFL (American Fuzzy Lop), 459 Aircrack-ng suite, 186–189, 191–196 Aireplay-ng, 188, 191, 194–195 Airmon-ng, 186–187, 191, 194 Airodump-ng, 188, 191, 194–195 algorithms cryptographic, 243–244 Luhn, 55 ALTER DATABASE statement, 228 ALTER TABLE statement, 228 American Fuzzy Lop (AFL), 459 ",
        "page_idx": 87
    },
    {
        "type": "text",
        "text": "amplification DDoS (distributed denialof-service) attacks, 178–179   \nAnchore, 313   \nAndersson, Bjorn, 441   \nAndroick, 323   \nAndroid android_filesystem_config.h file, 317 AndroidManifest.xml file, 317 APK (Android Package Kit), 317 AVD (Android Virtual Device) Manager, 320 security, 316–323   \nAPIs (application programming interfaces), 40 API-based keyloggers, 307 documentation, 40 ESAPI (Enterprise Security API), 240 RESTful (REST), 269 Shodan, 96–102, 378–380 unprotected, 267–270   \nAPK (Android Package Kit), 317   \nApktool, 322   \napktool.yml file, 318   \nappetite for risk, 49–50   \nApple iOS security, 323–325 Remote Desktop, 348, 433   \nAppliance for Digital Investigation and Analysis (ADIA), 457   \napplication-based vulnerabilities, 207   \napproved scanning vendors (ASVs), 54   \nAPs (access points), rogue, 185   \nAqua Security, 313   \narm64-v8a folder, 319   \narmeabi folder, 319   \narmeabi-v7a folder, 319   \narmoring, ASCII, 298   \nARP (Address Resolution Protocol) cache poisoning, 173–175 spoofing, 173–175   \nArt of Hacking GitHub repository, 225, 346, 390, 395, 410, 454   \nSCII armor region, 298   \nSCII armoring, 298   \nSLR (address space layout randomization), 298, 324   \nssets directory, 318   \nSVs (approved scanning vendors), 54   \nttack Complexity (AC) metrics, 37   \nttacks, 7–8. See also evasion techniques; privilege escalation   \nauthentication-based vulnerabilities credential brute forcing, 243–245 default credential exploits, 249–250 Kerberos exploits, 250 redirect attacks, 249 session hijacking, 245–249   \nauthorization-based vulnerabilities Insecure Direct Object Reference vulnerabilities, 251–252 parameter pollution, 250–251   \nclickjacking, 261   \ncommand injection, 241–242   \ncredential, 420 Cain and Abel, 424–425 CeWL, 431–432 Hashcat, 425–427 Hydra, 428–429 John the Ripper, 420–425 Johnny, 425 Medusa, 430–431 Mimikatz, 432 Ncrack, 430–431 Patator, 432–433 RainbowCrack, 429–430   \nCSRF (cross-site request forgery), 260–261   \ncurrent threat landscape, 7–9   \nDDoS (distributed denial-of-service), 8–9   \nexploitation frameworks BeEF, 449–450 Metasploit, 442–449   \nfile inclusion vulnerabilities LFI (local file inclusion), 264 RFI (remote file inclusion), 264–265   \nHTML injection, 241   \ninsecure code practices code signing, lack of, 270 error-handling errors, 266 hard-coded credentials, 266 hidden elements, 270 race conditions, 266–267 source code comments, 265–266 unprotected APIs, 267–270   \ninsecure service and protocol configurations, 281–284   \nto IoT devices, 8–9   \nmobile device security, 314–316 Android, 316–323 Apple iOS, 323–325 OWASP Mobile Security Project, 314   \nnetwork-based vulnerabilities DDoS (distributed denial-of-service), 178–179 DHCP (Dynamic Host Control Protocol), 183–185 DNS cache poisoning, 155–157 DoS (denial-of-service), 176–177 FTP (File Transfer Protocol), 166–168 Kerberos, 169–172 LDAP (Lightweight Directory Access Protocol), 169–172 man-in-the-browser attacks, 249 MITM (man-in-the-middle) attacks, 173–175, 193 NAC (network access control) bypass, 179–180 name resolution and SMB attacks, 148–155 pass-the-hash attacks, 168–169, 302–303 route manipulation attacks, 175–176 SMB (Server Message Block), 151–155, 157–159 SMTP (Simple Mail Transfer Protocol), 159–166 VLAN hopping, 181–183   \nphysical, 326–327   \nransomware Nyeta, 354 WannaCry, 8   \nret2libc (“return-to-libc”), 298   \nsecurity misconfigurations, 262 cookie manipulation attacks, 263–264 directory traversal vulnerabilities, 262–263   \nsocial engineering, 11–12 characteristics of, 125–126 elicitation, 135 interrogation, 136 malvertising, 127–128 motivation techniques, 137 pharming, 126–127 phishing, 126 pretexting, 136 SET (Social-Engineer Toolkit), 129–134 shoulder surfing, 137 SMS phishing, 134–135 spear phishing, 128–134 USB key drop, 138 voice phishing, 135 whaling, 135   \nSQL injection, 228 blind, 237 Boolean technique, 233, 237 categories of, 232–234 database fingerprinting, 234–235 error-based technique, 233 examples of, 228–232 mitigations, 240 out-of-band technique, 233, 237–2 stored procedures, 239–240 time-delay technique, 233, 239 UNION operator technique, 233, 235–236 threat actors, 9–10 wireless and RF-based credential harvesting, 199–200 deauthentication attacks, 186–189 evil twin attacks, 185–186 fragmentation attacks, 197–198 IV (initialization vector) attacks, 190 KARMA attacks, 197 KRACK (key reinstallation attack), 196–197 PNL (preferred network list) attacks, 189 RFID (radio-frequency identification) attacks, 200 rogue access points, 185 signal jamming, 189 war driving, 190 WEP (Wired Equivalent Privacy) attacks, 190–192 WPA (Wi-Fi Protected Access) attacks, 192–196 WPS (Wi-Fi Protected Setup), 197 XSS (cross-site scripting) vulnerabilities, 252–253 DOM-based XSS attacks, 256–257 evasion techniques, 257–259 reflected XSS attacks, 253–254 stored XSS attacks, 255–256 zero-day, 8   \naudience for reports, identifying, 476–477   \nAUTH command (SMTP), 161   \nAuthd, 284   \nauthenticated scans, 105   \nauthentication Authentication Cheat Sheet (OWASP), 222, 246 vulnerabilities ",
        "page_idx": 88
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 88
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 89
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 89
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 90
    },
    {
        "type": "text",
        "text": "credential brute forcing, 243–245 default credential exploits, 249–250 Kerberos, 169–172 Kerberos exploits, 250 redirect attacks, 249 session hijacking, 245–249 authority, in social engineering, 137 authorization-based vulnerabilities Insecure Direct Object Reference vulnerabilities, 251–252 parameter pollution, 250–251 AV (Access Vector) metrics, 37 Availability Impact (A) metrics, 37 AVD (Android Virtual Device) Manager, 320 avoidance of risk, 49 ",
        "page_idx": 90
    },
    {
        "type": "text",
        "text": "B ",
        "text_level": 1,
        "page_idx": 90
    },
    {
        "type": "text",
        "text": "backdoors, 238, 346   \nbacktracking, 262–263   \nbadge cloning, 327   \nbandwidth limitations, vulnerability   \nscanning and, 111   \nBane, 313   \nbase groups, 34–37   \nbash, 460–461   \nbasic service set identifiers (BSSIDs), 188   \nBeEF, 449–450   \nBGP hijacking attacks, 175   \nBienaimé, Pierre, 441   \nbilateral NDAs (nondisclosure   \nagreements), 43   \nbinary patching, 315   \nBlack Hills Information Security, 90–91   \nblack lists, 46   \nBlackArch Linux, 224, 367–368   \nblack-box tests, 12, 47   \nblind shells, creating, 338–344   \nblind SQL injection, 237   \nBlowfish, 166   \nblue teams, 46   \nBluejacking, 199–200   \nBluesnarfing, 199–200   \nBooleans, SQL injection with, 233, 237   \nBorn, Kenton, 441   \nbotnets, 177   \nBourne-Again shell (bash), 460–461   \nBreach Notification Rule, 52   \nBSSIDs (basic service set identifiers), 188   \nbudget, planning, 32–33   \nBurp Suite, 41, 214   \nBursztein, Elie, 138   \nbusiness associates, 53   \nbWAPP, 225 ",
        "page_idx": 90
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 91
    },
    {
        "type": "text",
        "text": "C ",
        "text_level": 1,
        "page_idx": 91
    },
    {
        "type": "text",
        "text": "C (Confidentiality Impact) metrics, 37   \nC2 (command and control) utilities, 344–345   \ncache file, 318   \ncache poisoning ARP (Address Resolution Protocol), 173–175 DNS (Domain Name System), 155–157   \nCain and Abel, 424–425   \nCAINE (Computer Aided Investigative Environment), 369, 457   \nCAPEC (Common Attack Pattern Enumeration and Classification), 114   \ncard security codes, 56   \ncardholder data environment, 55   \ncat command, 343   \nCAV2 codes, 56   \ncd command, 343, 350   \nCensys, 389–390   \nCERT.RSA file, 317   \nCERT.SF file, 317   \nCeWL, 431–432   \nCFTC (Commodity Futures Trading Commission), 52   \nchaining analysis, 37–38   \nchmod command, 287–289   \nChoose a Tool dropdown (Dradis), 484–485   \nCID codes, 56   \nCIFS (Common Internet File System), 172   \nCIS Docker Benchmark, 313   \nCisco ETA (Encrypted Traffic Analytics), 440   \nCisco Smart Install, 281   \nClair, 313   \nclasses.dex directory, 318   \nclassification, report, 499   \ncleanup process, 356   \nclearev command, 343   \nclear-test credentials in LDAP, 300–301   \nclickjacking, 261   \nClickjacking Defense Cheat Sheet (OWASP), 261   \nclients, HTTP (Hypertext Transfer Protocol), 213   \ncode injection, 315   \ncode practices, insecurity in code signing, lack of, 270 error-handling errors, 266 hard-coded credentials, 266 hidden elements, 270 race conditions, 266–267 source code comments, 265–266 unprotected APIs, 267–270   \ncode_cache file, 318   \ncold boot attacks, 326   \nCollignon, Nicolas, 441   \ncommand and control. See C2 (command and control) utilities   \ncommand injection vulnerabilities, 241–242   \ncommands. See also scripts; tools aireplay-ng, 188, 191, 194–195 airmon-ng, 186–187, 191, 194 airodump-ng, 191, 194 cat, 343 cd, 343, 350 ",
        "page_idx": 91
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 91
    },
    {
        "type": "text",
        "text": "chmod, 287–289   \nclearev, 343   \ncontinue, 451   \nCopy-Item, 349   \ndig, 90, 371–372   \ndownload, 343   \nedit, 343   \nexecute, 343   \nfind, 292–293   \nGet-ChildItem, 349   \nGet-Command, 350   \nGet-Content, 350   \nGet-HotFix, 350   \nGet-Location, 350   \nGet-NetFirewallRule, 350   \nGet-Process, 350   \nGet-Service, 350   \ngetsystem, 449   \ngetuid, 343   \ngroups, 294   \nhashdump, 343, 448   \nhost, 371–372   \nid, 294   \nidletime, 343   \nipconfig, 343   \njohn --list=formats, 420–421   \njohn -show hashes, 423   \nkey list, 96–97   \nkeys add, 386   \nkeys add shodan_api, 98   \nkeys list, 386–387   \nlcd, 343   \nlist audit, 417–419   \nlocate, 423   \nlpwd, 343   \nls, 343, 350   \nmigrate, 343   \nMove-Item, 349   \nmsfconsole, 90–91, 442   \nmsfdb init, 443   \nNew-NetFirewallRule, 350   \nnmap ",
        "page_idx": 92
    },
    {
        "type": "text",
        "text": "-sF option, 76–77 -sn option, 77–78 -sS option, 71–72 -sT option, 73–74 -sU option, 74–75   \nnslookup, 90, 156–157, 371–372   \nps, 343   \npwd, 343   \nresource, 343   \nrun, 451   \nscapy, 86   \nscreenshot, 448   \nsearch, 343   \nSelect-String, 349   \nservice dradis start, 479   \nset LHOST, 155   \nset RHOST, 155   \nsetoolkit, 129   \nshell, 343   \nshow info, 387–388   \nshow modules, 383–386   \nshow options, 155   \nSMTP (Simple Mail Transfer Protocol), 160–163   \nsudo, 286–287, 294–298   \nsysinfo, 449   \nupload, 343   \nuse, 387–389   \nuse exploit/windows/smb/ms17_010_ eternalblue, 155   \nuseradd, 295   \nusermod, 294–295   \nvisudo, 296   \nwebcam_list, 344   \nwebcam_snap, 344   \nwhois, 372–373   \nomments, exploiting, 265–266   \nommodity Futures Trading Commissio (CFTC), 52   \nommon Attack Pattern Enumeration and Classification (CAPEC), 114   \nCommon Internet File System (CIFS), 172   \nCommon Vulnerabilities and Exposures (CVE), 114–115   \nCommon Vulnerability Scoring System (CVSS), 34–37, 494–495   \nCommon Weakness Enumeration (CWE), 115   \ncommunication escalation path, 31–32   \ncommunications, reporting and, 500–501   \nCommunity Edition (Dradis), 479   \ncompliance scans, 109–110   \ncompliance-based assessment, 45, 50 financial sector regulations, 50–52 healthcare sector regulations, 52–53 key technical elements, 56–57 limitations of, 57–58 PCI DSS (Payment Card Industry Data Security Standard), 53–56   \nComputer Aided Investigative Environment (CAINE), 369, 457   \nConfidentiality Impact (C) metrics, 37   \nconfidentiality of findings, 32   \nCONNECT method (HTTP), 217   \ncontainer security, 310–314   \ncontinue command, 451   \ncontracts, 41–42   \ncookie manipulation attacks, 263–264   \nCopy-Item command, 349   \ncorporate policies, 43–44   \ncovering tracks, 356   \nCPassword attacks, 299   \ncracking passwords. See password crackers   \nCREATE DATABASE statement, 228   \nCREATE INDEX statement, 228   \nCREATE TABLE statement, 228   \ncredentials attacks, 420 brute forcing, 243–245 Cain and Abel, 424–425 CeWL, 431–432 ",
        "page_idx": 92
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "credential harvesting, 199–200 Hashcat, 425–427 Hydra, 428–429 John the Ripper, 420–425 Medusa, 430–431 Mimikatz, 432 Ncrack, 430–431 Patator, 432–433 RainbowCrack, 429–430 RFID (radio-frequency identification) attacks, 200 hard-coded, 266 Cri-o, 311 cross-site scripting. See XSS (cross-site scripting) vulnerabilities cryptographic algorithms, 243–244 Crysis, 8 CSRF (cross-site request forgery), 260–261 curl, 221 custom daemons and processes, creating, 346 CVC2 codes, 56 CVE (Common Vulnerabilities and Exposures), 114–115 CVSS (Common Vulnerability Scoring System), 34–37, 494–495 CVV2 codes, 56 CWE (Common Weakness Enumeration), 115 cyber ranges, 227 Cydia Substrate, 315 ",
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "D ",
        "text_level": 1,
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "daemons, creating, 346   \nDagda, 313   \nDalvik, 316   \nDamn Vulnerable ARM Router (DVAR), 225   \nDamn Vulnerable iOS Application (DVIA), 225   \nDamn Vulnerable Web App (DVWA), 225   \nDATA command (SMTP), 160   \ndata isolation, 56   \ndatabase fingerprinting, 234–235   \ndatabases, SAM (Security Account Manager), 302–303   \ndatabases folder, 318   \nDDoS (distributed denial-of-service) attacks, 8–9 amplification, 178–179 reflected, 178   \ndeauthentication attacks, 186–189   \ndebugging tools edb debugger, 452–454 GDB (GNU Project Debugger), 450–452 Immunity, 454 OllyDbg, 452–453 Windows Debugger, 452   \ndefault credential exploits, 249–250   \ndefensive controls, 49   \nDEFT (Digital Evidence & Forensics Toolkit), 457   \nDELETE method (HTTP), 217   \nDELETE statement (SQL), 228   \nDembour, Olivier, 441   \ndenial-of-service (DoS) attacks, 176–177   \nDeNiSe, 441   \nDepartment of Health and Human Services (HHS), 52   \nDES, 166   \nDev-Sec.io, 313   \nDHCP (Dynamic Host Control Protocol) spoofing, 183–185 starvation attacks, 183–185   \ndig command, 90   \nDig tool, 371–372   \nDigital Evidence & Forensics Toolkit (DEFT), 457   \nDirbuster, 419   \ndirectory climbing, 262–263   \nDirectory Information Tree (DIT), 170   \ndirectory traversal vulnerabilities, 262–263   \ndisassemblers IDA, 454–455 Objdump, 455–457   \ndisclaimers, documentation of, 38–39   \ndiscovery scans, 106   \nDistinguished Name (DN), 170   \ndistributed denial-of-service. See DDoS (distributed denial-of-service) attacks   \ndistribution of reports, 499–500   \nDIT (Directory Information Tree), 170   \nDLL (dynamic link library) hijacking, 303–304   \nDN (Distinguished Name), 170   \nDNS (Domain Name System) cache poisoning, 155–157 DNSSEC (Domain Name System Security Extension), 157 exfiltration, 440–442 tunneling, 440–442   \ndns2tcp, 441   \nDNScapy, 441   \nDNScat, 441   \nDNScat2, 345, 441   \nDNSdumpster, 88   \nDNSRecon, 67–69   \nDNSSEC (Domain Name System Security Extension), 157   \nDocker, 310–313   \ndocker-bench-security, 313   \ndocker-explorer, 314   \nDocument Object Model. See DOM (Document Object Model)   \ndocumentation, 41 API (application programming interface), 268 legal contracts, 41–42 MSAs (master service agreements), 42 NDAs (nondisclosure agreements), 43 SOWs (statements of work), 42 pre-engagement budget, 32–33 communication escalation path, 31–32 confidentiality of findings, 32 disclaimers, 38–39 impact analysis and remediation timelines, 34–38 point-in-time assessment, 33 rules of engagement, 30 target audience, 29–30 technical constraints, 39 rules of engagement, 30 support resources, 40–41   \nDOM (Document Object Model) DOM-based XSS (cross-site scripting) attacks, 256–257 stored DOM-based attacks, 263–264   \ndomain enumeration, 88–91   \nDomain Name System. See DNS (Domain Name System)   \nDoS (denial-of-service) attacks, 176–177   \ndot-dot-slash, 262–263   \ndowngrade attacks, 175   \ndownload command, 343   \nDradis Framework Choose a Tool dropdown, 484–485 data import, 483 imported scans, viewing, 488–490 launching, 479 login screen, 480 node organization, 486–488 node/subnode creation, 481–483 output file processing, 485–486 password creation, 479–480 plugin.output node, 486 Project Summary screen, 481 ",
        "page_idx": 93
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 94
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "Upload Manager screen, 484 Upload Output from Tool option, 483–484 versions, 478–479 DROP INDEX statement, 228 DROP TABLE statement, 228 DropboxC2 (DBC2), 345 Dual Elliptic Curve Deterministic Random Bit Generator (Dual_EC_DRBG), 439 dumpster diving, 327 DVAR (Damn Vulnerable ARM Router), 225 DVIA (Damn Vulnerable iOS Application), 225 DVWA (Damn Vulnerable Web App), 225 dynamic binary analysis, 316 Dynamic Host Control Protocol. See DHCP (Dynamic Host Control Protocol) dynamic link library (DLL) hijacking, 303–304 DynDNS service, 8–9 ",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "E ",
        "text_level": 1,
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "E (Exploit Code Maturity), 36   \neavesdropping, packet, 90   \nedb debugger, 452–454   \nedit command, 343   \negress sensors, 327   \nEHLO command (SMTP), 160   \nEkman, Erik, 441   \nelectronic protected health information (ePHI), 53   \nelicitation, 135   \nemail threats pharming, 126–127 phishing, 126 SMS phishing, 134–135 spear phishing, 128–134 voice phishing, 135 whaling, 135   \nEmpire, 171, 353–354, 434   \nEncrypted Traffic Analytics (ETA), 440   \nEncryption, 439–440   \nencryption AES (Advanced Encryption Standard) 324 cryptographic algorithms, 243–244   \nengagement, rules of, 30   \nEnterprise Security API (ESAPI), 240   \nEnum4linux, 155, 395–400   \nenumeration defined, 71 domain, 88–91 group, 81–82 host, 78–79 network share, 82 packet crafting, 85–87 service, 85 user, 80–81 web page/web application, 83–84   \nenvironmental groups, 34–37   \nePHI (electronic protected health information), 53   \nerror handling lack of, 266 verbose, 266   \nerror-based SQL injection, 233   \nESAPI (Enterprise Security API), 240   \nescalation of privileges. See privilege escalation   \nescalation path, 31–32   \nESSIDs (extended basic service set identifiers), 188   \nETA (Encrypted Traffic Analytics), 440   \nEternalBlue exploit, 8, 154–155   \nethical hacking defined, 6–7 importance of, 7 nonethical hacking compared to, 6–7   \nEttercap, 199   \nEvan’s debugger, 452–454   \nevasion techniques DNS tunneling, 440–442 Encryption, 439–440 Proxychains, 439 Tor, 438–439 Veil, 434–437 XSS (cross-site scripting) vulnerabilities, 257–258   \nevil twin attacks, 185–186   \nexam preparation chapter-ending review tools, 509 Pearson Test Prep software, 505 exam customization, 507–508 exam updates, 508 offline access, 506–507 online access, 505 Premium Edition, 508–509 study plans, 509   \nexecute command, 343   \neXecute Never (XN), 324   \nexecutive summary section (reports), 493   \nexfiltration, DNS (Domain Name System), 440–442   \nExifTool, 374–375   \nExploit Code Maturity (E), 36   \nThe Exploit Database, 151   \nExploitability metrics, 35   \nexploitable services, 304–305   \nexploitation frameworks BeEF, 449–450 Metasploit, 90–91, 115, 154–155, 442–449 Metasploit Unleashed course, 344 Meterpreter, 299, 343–344, 446–449 RDP connections, creating, 348–349   \nexploits. See attacks   \nEXPN command (SMTP), 161   \nexport restrictions, 43   \nextended basic service set identifier (ESSID), 188 ",
        "page_idx": 95
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 96
    },
    {
        "type": "text",
        "text": "F ",
        "text_level": 1,
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "false negatives, 475–476, 477   \nfalse positives, 475–476, 477, 495–496   \nFBI (Federal Bureau of Investigation), 439   \nFDIC (Federal Deposit Insurance Corporation) Safeguards Act, 51   \nfear, social engineering and, 137   \nFederal Bureau of Investigation (FBI), 439   \nFederal Deposit Insurance Corporation (FDIC) Safeguards Act, 51   \nFederal Financial Institutions Examination Council (FFIEC), 51   \nFederal Trade Commission (FTC), 52   \nFeederbot and Moto, 442   \nfence jumping, 327   \nFFIEC (Federal Financial Institutions Examination Council), 51   \nfile inclusion vulnerabilities LFI (local file inclusion), 264 RFI (remote file inclusion), 264–265   \nFile Transfer Protocol. See FTP (File Transfer Protocol)   \nfiles permissions, insecurity in, 305 SOAP (Simple Object Access Protocol), 40   \nfiles folder, 319   \nFILS (Financial Institutions Letters), 51   \nfinancial sector regulations, 50–52   \nfind command, 292–293   \nFind-AVSignature script, 351   \nFindbugs, 458   \nfindings, reporting, 495–497   \nFindsecbugs, 458   \nFinger, 284   \nfingerprinting databases, 234–235   \nFingerprinting Organizations with Collected Archives (FOCA), 374   \nFIRST (Forum of Incident Response and Security Teams), 34, 37   \nFIRST.org, 494   \nFOCA (Fingerprinting Organizations with Collected Archives), 374   \nfolder permissions, 305   \nforensics tools, 457–458   \nforgery, CSRF (cross-site request forgery), 260–261   \nForum of Incident Response and Security Teams (FIRST), 34, 37   \nfragile systems, vulnerability scans for, 111–112   \nfragmentation attacks, 197–198   \nFrida, 315   \nFTC (Federal Trade Commission), 52   \nFTP (File Transfer Protocol) exploits, 166–168 FTPS (File Transfer Protocol Secure), 166   \nfull scans, 106–108   \nfunctions. See also commands GetSystemDirectory, 304 GetWindowsDirectory, 304   \nfuzz testing, 458   \nfuzzers, 458 AFL (American Fuzzy Lop), 459 Mutiny Fuzzing Framework, 459 Peach, 459 ",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "G ",
        "text_level": 1,
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Game of Hacks, 225   \nGDB (GNU Project Debugger), 450–452   \nGET method (HTTP), 215, 217   \nGet-ChildItem command, 349   \nGet-Command command, 350   \nGet-Content command, 350   \nGet-GPPAutologon script, 352   \nGet-GPPPassword script, 352   \nGet-HotFix command, 350   \nGet-HttpStatus script, 352   \nGet-Keystrokes script, 352   \nGet-Location command, 350   \nGet-MicrophoneAudio script, 352   \nGet-NetFirewallRule command, 350 ",
        "page_idx": 97
    },
    {
        "type": "text",
        "text": "Get-Process command, 350   \nGet-SecurityPackages script, 351   \nGet-Service command, 350   \ngetsystem command, 449   \nGetSystemDirectory function, 304   \nGet-TimedScreenshot script, 352   \ngetuid command, 343   \nGet-VaultCredential script, 352   \nGet-VolumeShadowCopy script, 352   \nGetWindowsDirectory function, 304   \nGLBA (Gramm-Leach-Bliley Act), 51–52   \nGNU Project Debugger (GDB), 450–452   \ngoals-based assessment, 45   \ngolden ticket attacks (Kerberos), 170–172   \nGPOs (Group Policy Objects), 305–306   \nGPP attacks. See CPassword attacks   \nGramm-Leach-Bliley Act (GLBA), 51–52   \nGraphQL, 40, 267   \ngray-box tests, 13, 47   \ngroups CVSS (Common Vulnerability Scoring System), 34–37 enumeration, 81–82 Group Policy Objects (GPOs), 305–306   \ngroups command, 294 ",
        "page_idx": 98
    },
    {
        "type": "text",
        "text": "H ",
        "text_level": 1,
        "page_idx": 98
    },
    {
        "type": "text",
        "text": "Hack This, 225   \nHack This Site, 225   \nHackazon, 225   \nhackertarget module, 96   \nhacktivists, 10   \nHAL (Hardware Abstraction Layer),   \n316   \nhalf-open scanning, 71–72   \nhandling reports, 499–500   \nhard-coded credentials, 266   \nHardware Abstraction Layer (HAL), 316   \nHashcat, 425–427   \nhashdump command, 343, 448 ",
        "page_idx": 98
    },
    {
        "type": "text",
        "text": "HEAD method (HTTP), 217   \nHealth Information Technology for Economic and Clinical Health Act, 52   \nhealth plans, 53   \nhealthcare clearinghouses, 53   \nhealthcare providers, 53   \nhealthcare sector regulations, 52–53   \nHellBound Hackers, 225   \nHELO command (SMTP), 160   \nHELP command (SMTP), 161   \nhelp menu (Recon-ng), 92   \nHeyoka, 441   \nhidden elements, 270   \nhijacking DLL (dynamic link library), 303–304 session, 245–249   \nHIPAA Security Enforcement Final Rule, 52   \nHIPAA Security Rule, 52–53   \nHITECH (Health Information Technology for Economic and Clinical Health) Act, 52   \nhopping, VLAN, 181–183   \nHost, 371–372   \nhost enumeration, 78–79   \nhosts, local. See local host vulnerabilities   \nHPP (HTTP parameter pollution), 250–251   \nHTML (Hypertext Markup Language) HTML5, 309 injection, 241   \nHTTP (Hypertext Transfer Protocol), 213–221 clients, 213 HPP (HTTP parameter pollution), 250–251 proxies defined, 214 ZAP, 214 request/response model, 215–218 ",
        "page_idx": 98
    },
    {
        "type": "text",
        "text": "servers, 213 sessions, 213 URLs (uniform resource locators), 219–220 http-enum script, 83–84 Hydra, 428–429 Hypertext Markup Language. See HTML (Hypertext Markup Language) Hypertext Transfer Protocol. See HTTP (Hypertext Transfer Protocol) hypervisor-based keyloggers, 307 ",
        "page_idx": 99
    },
    {
        "type": "text",
        "text": "",
        "text_level": 1,
        "page_idx": 99
    },
    {
        "type": "text",
        "text": "I (Integrity Impact) metrics, 37   \nid command, 294   \nIDA, 454–455   \nIdentd, 284   \nidletime command, 343   \nIDs SGID (set-group-ID) Linux, 289 Unix, 291–293 SUID (set-user-ID) Linux, 289 Unix, 291–293   \nIETF (Internet Engineering Task Force), 157   \niGoat, 325   \nIIHI (individually identifiable health information), 53   \nIMAP (Internet Message Address Protocol), 159   \niMAS, 325   \nImmunity, 454   \nimpact analysis, 34–38   \nImpact metrics, 36–44   \nimpersonation, 136   \nindividually identifiable health information (IIHI), 53   \ninformation gathering.   \nInformation Systems Security Assessment Framework (ISSAF), 16   \ninitialization vector (IV) attacks, 190   \ninjection-based vulnerabilities command injection, 241–242 HTML injection, 241 SQL injection, 228 blind, 237 Boolean technique, 233, 237 categories of, 232–234 database fingerprinting, 234–235 error-based technique, 233 examples of, 228–232 mitigations, 240 out-of-band technique, 233, 237–238 stored procedures, 239–240 time-delay technique, 233, 239 UNION operator technique, 233, 235–236   \ninsecure code practices code signing, lack of, 270 error-handling errors, 266 hard-coded credentials, 266 hidden elements, 270 race conditions, 266–267 source code comments, 265–266 unprotected APIs, 267–270   \nInsecure Direct Object Reference vulnerabilities, 251–252   \nINSERT INTO statement, 228   \ninsider threats, 10   \ninspection, packet, 90   \nInstall-SSP script, 351   \nIntegrity Impact (I) metrics, 37   \nintentionally vulnerable systems, 224–227   \nInternet Engineering Task Force. See IETF (Internet Engineering Task Force)   \nInternet Message Address Protocol (IMAP), 159   \ninterrogation, 136   \nintrusion prevention systems (IPSs), 46 ",
        "page_idx": 99
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 99
    },
    {
        "type": "text",
        "text": "Invoke-CredentialInjection script, 351   \nInvoke-DllInjection script, 351   \nInvoke-Mimikatz script, 352   \nInvoke-NinjaCopy script, 352   \nInvoke-Portscan script, 352   \nInvoke-ReflectivePEInjection script, 351   \nInvoke-ReverseDnsLookup script, 352   \nInvoke-Shellcode script, 351   \nInvoke-TokenManipulation script, 351   \nInvoke-WmiCommand script, 351   \nIodine, 441   \niOS security, 323–325   \nIoT (Internet of Things), threats to,   \n8–9   \nipconfig command, 343   \nIPSs (intrusion prevention systems),   \n46   \nISSAF (Information Systems Security   \nAssessment Framework), 16   \nIV (initialization vector) attacks, 190 ",
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "",
        "text_level": 1,
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "jail, 309   \nJapan Computer Emergency Response   \nTeam (JPCERT), 113   \nJavaScript-based keyloggers, 307   \njohn --list $\\varXi$ formats command, 420–421   \njohn -show hashes command, 423   \nJohn the Ripper, 420–425   \nJohnny, 425   \nJPCERT (Japan Computer Emergency   \nResponse Team), 113   \nJTAG debugging, 326–327   \nJWT (JSON Web Token), 223 ",
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "K ",
        "text_level": 1,
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "Kali Linux, 224, 366   \nKaminsky, Dan, 441   \nKARMA attacks, 197   \nKennedy, Dave, 11–12   \nKerberoast, 301   \nKerberos ",
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "exploits, 250 Kerberos Delegation, 172 KRBTGT(Kerberos TGT) password hash, 170 vulnerabilities, 169–172   \nkernel-based keyloggers, 307   \nkey list command, 96–97   \nkey management, 57   \nkey reinstallation attack (KRACK), 196–197   \nkeyloggers, 306–307   \nkeys add command, 386   \nkeys add shodan_api command, 98   \nkeys list command, 386–387   \nKRACK (key reinstallation attack), 196–197   \nKRBTGT (Kerberos TGT) password hash, 170 ",
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "L ",
        "text_level": 1,
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "labs, 16–17 recovery, 19 requirements and guidelines, 18 tools, 18–19 web application, 224–227   \nlanguages Python, 461 Ruby, 461–462   \nLanman, 80–81   \nlateral movement, 347 post-exploitation scanning, 347–348 remote access protocols, 348–349   \nlcd command, 343   \nLDAP (Lightweight Directory Access Protocol) clear-test credentials in, 300–301 vulnerabilities, 169–172   \nlegal concepts, 41 contracts, 41–42 MSAs (master service agreements), 42 NDAs (nondisclosure agreements), 43 SOWs (statements of work), 42   \nlegislation. See regulations   \nLFI (local file inclusion) vulnerabilities, 264   \nlib directory, 318   \nlib folder, 319   \nLightweight Directory Access Protocol. See LDAP (Lightweight Directory Access Protocol)   \nlikeness, social engineering and, 137   \nLink-Local Multicast Name Resolution. See LLMNR (Link-Local Multicast Name Resolution)   \nLinux distributions, 224, 365 BlackArch Linux, 224, 367–368 CAINE (Computer Aided Investigative Environment), 369 Kali Linux, 224, 366 Parrot, 224, 367 Security Onion, 369–370 SELinux (Security Enhanced Linux), 293 LXC (Linux Containers), 310 permissions, 286–291   \nlist audit command, 417–419   \nLLMNR (Link-Local Multicast Name Resolution), 148–150   \nlocal file inclusion (LFI) vulnerabilities, 264   \nlocal host vulnerabilities, 281. See also privilege escalation insecure service and protocol configurations, 281–284 mobile device security, 314–316 Android, 316–323 Apple iOS, 323–325 physical security attacks, 326–327   \nlocal privilege escalation. See privilege escalation   \nLocal Security Authority Subsystem Service (LSASS) credentials, 301–302 ",
        "page_idx": 100
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 101
    },
    {
        "type": "text",
        "text": "locate command, 423   \nlockpicking, 327   \nLocky, 8   \nlpwd command, 343   \nls command, 343, 350   \nLSASS (Local Security Authority   \nSubsystem Service) credentials,   \n301–302   \nLuhn, Hans Peter, 55   \nLuhn algorithm, 55   \nLXC (Linux Containers), 310 ",
        "page_idx": 101
    },
    {
        "type": "text",
        "text": "M ",
        "text_level": 1,
        "page_idx": 101
    },
    {
        "type": "text",
        "text": "MAC authentication (auth) bypass, 179–180   \nmagnetic credit card stripes, 56   \nMAIL command (SMTP), 161   \nMaltego, 381–382   \nmalvertising, 127–128   \nManagement Frame Protection (MFP), 189   \nManagement Information Base (MIB), 158   \nMANIFEST.MF file, 317   \nman-in-the-browser attacks, 249   \nman-in-the-middle attacks. See MITM (man-in-the-middle) attacks   \nMasscan, 78–79   \nmaster service agreements (MSAs), 42   \nMASVS (Mobile AppSec Verification Standard) Anti-Reversing Controls, 315   \nMD5 algorithm, 166   \nmeasurements, 494–495   \nMedusa, 430–431   \nmemory-injection-based keyloggers, 307   \nmerchants, 54   \nmessages (SMB) SMB_COM_NEGOTIATE, 80 SMB_COM_SESSION_SETUP_ ANDX, 80–81   \nMETA-INF file, 317   \nMetasploit, 90–91, 115, 154–155, 442–449 Metasploit Unleashed course, 344 Meterpreter, 299, 343–344, 446–449 RDP connections, creating, 348–349   \nMetasploitable2, 225   \nMetasploitable3, 225   \nMeterpreter, 299, 343–344, 446–449   \nmethodologies, penetration testing, 13–16   \nmethodology section (reports), 494   \nmetrics, 34–37, 494–495   \nMFA (multifactor authentication), 243   \nMFP (Management Frame Protection), 189   \nMIB (Management Information Base), 158   \nMicrosoft MOM (Microsoft Operations Manager), 354 MS17-010 security bulletin, 8 MSRPC (Microsoft Remote Procedure Call), 82 Office, 309   \nmigrate command, 343   \nMimikatz, 169–172, 302, 432   \nmips file, 319   \nmitigation risk, 48–49 SQL injection, 240 XSS (cross-site scripting) vulnerabilities, 258–259   \nMITM (man-in-the-middle) attacks, 249 ARP cache poisoning, 173–175 ARP spoofing, 173–175 downgrade attacks, 175 KARMA, 197 session hijacking, 193   \nMITRE iMAS, 325   \nMobile AppSec Verification Standard (MASVS) Anti-Reversing Controls, 315   \nmobile device security, 314–316 ",
        "page_idx": 101
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 102
    },
    {
        "type": "text",
        "text": "Android, 316–323 Apple iOS, 323–325 OWASP Mobile Security Project, 314 MobiSec Live Environment Mobile Testing Framework, 325 modding, 315 Modified Base Metrics, 36 modules PowerSploit, 351–352 Recon-ng hackertarget, 96 show modules command, 92–95 MOM (Microsoft Operations Manager), 354 Moore, H. D., 442 motivation techniques, social engineering, 137 Mount-VolumeShadowCopy script, 352 Move-Item command, 349 MS17–010 security bulletin, 8 MSAs (master service agreements), 42 msfconsole command, 90–91, 442 msfdb init command, 443 MSRPC (Microsoft Remote Procedure Call), 82 multifactor authentication (MFA), 243 multilateral NDAs (nondisclosure agreements), 43 Mutiny Fuzzing Framework, 459 ",
        "page_idx": 102
    },
    {
        "type": "text",
        "text": "N ",
        "text_level": 1,
        "page_idx": 102
    },
    {
        "type": "text",
        "text": "NAC (network access control), 46, 179–180   \nname resolution, 148 LLMNR (Link-Local Multicast Name Resolution), 148–150 NetBIOS, 148–150   \nNational Cybersecurity and Communications Integration Center (NCCIC), 113   \nNational Institute of Standards and Technology (NIST), 15, 57, 113   \nNational Security Agency (NSA), 439   \nNCCIC (National Cybersecurity and Communications Integration Center), 113   \nNcrack, 430–431   \nNDAs (nondisclosure agreements), 43   \nneed-to-know, 499   \nNessus scanner, 106–108, 403–404   \n.NET Common Language Runtime, 309   \nNetBIOS, 148–150   \nNetcat, 338–342   \nNetdump, 284   \nNetdump-server, 284   \nnetstat command, 105   \nnetwork access control. See NAC (network access control)   \nnetwork diagrams, 41   \nnetwork infrastructure tests, 11   \nnetwork share enumeration, 82   \nNetwork Time Protocol (NTP), 178   \nnetwork-based vulnerabilities, 148 DDoS (distributed denial-of-service) amplification, 178–179 reflected, 178 DHCP (Dynamic Host Control Protocol) spoofing, 183–185 starvation attacks, 183–185 DNS cache poisoning, 155–157 DoS (denial-of-service), 176–177 FTP (File Transfer Protocol), 166–168 Kerberos, 169–172 LDAP (Lightweight Directory Access Protocol), 169–172 man-in-the-browser attacks, 249 MITM (man-in-the-middle) attacks, 249 ARP cache poisoning, 173–175 ARP spoofing, 173–175 downgrade attacks, 175 KARMA, 197 session hijacking, 193   \nNAC (network access control) bypass, 179–180   \nname resolution and SMB attacks, 148 LLMNR (Link-Local Multicast Name Resolution), 148–150 NetBIOS, 148–150 SMB (Server Message Block), 151–155   \nnetwork topology, 110–111   \npass-the-hash attacks, 168–169, 302–303   \nroute manipulation attacks, 175–176   \nSMTP (Simple Mail Transfer Protocol) commands, 160–163 known SMTP server exploits, 163–166 open relay, 160 TCP port numbers, 159   \nSNMP (Simple Network Management Protocol), 157–159   \nVLAN hopping, 181–183   \nwireless and RF-based credential harvesting, 199–200 deauthentication attacks, 186–189 evil twin attacks, 185–186 fragmentation attacks, 197–198 IV (initialization vector) attacks, 190 KARMA attacks, 197 KRACK (key reinstallation attack), 196–197 PNL (preferred network list) attacks, 189 RFID (radio-frequency identification) attacks, 200 rogue access points, 185 signal jamming, 189 war driving, 190 WEP (Wired Equivalent Privacy) attacks, 190–192 WPA (Wi-Fi Protected Access) attacks, 192–196 WPS (Wi-Fi Protected Setup), 197   \nNew York Department of Financial Services Cybersecurity Regulati 51, 52   \nNew-ElevatedPersistenceOption script 351   \nNew-NetFirewallRule command, 350   \nNew-UserPersistenceOption script, 351   \nNew-VolumeShadowCopy script, 352   \nNfs, 284   \nNikto, 84, 410–413, 488–489   \nNIST (National Institute of Standards and Technology), 15, 57, 113   \nNmap, 155, 391–393 enumeration group, 81–82 host, 78–79 network share, 82 service, 85 user, 80–81 web page/web application, 83–84 scans ping, 77–78 TCP connect, 73–74 TCP FIN, 76–77 UDP, 74–75 scripts http-enum, 83–84 smb-enum-groups, 81–82 smb-enum-processes, 85 smb-enum-shares, 82 smb-enum-users.nse, 80–81 smtp-open-relay, 160 SNMP-related, 158–159 Zenmap, 393–395   \nnmap command -sF option, 76–77 -sS option, 71–72 -sT option, 73–74 -sU option, 74–75   \nNmap Scripting Engine (NSE), 69   \nnodes (Dradis) ",
        "page_idx": 102
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 103
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 103
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 104
    },
    {
        "type": "text",
        "text": "creating, 481–483 organizing, 486–488 plugin.output, 486 no-execute (NX) bit feature, 298 nondisclosure agreements (NDAs), 43 nonethical hacking, 6–7 nontraditional assets, vulnerability scans for, 111–112 Notary, 314 NotPetya, 8 NowSecure App Testing:323 NSA (National Security Agency), 439 NSE (Nmap Scripting Engine), 69 http-enum script, 83–84 smb-enum-groups script, 81–82 smb-enum-processes script, 85 smb-enum-shares script, 82 smb-enum-users.nse script, 80–81 smtp-open-relay script, 160 SNMP-related scripts, 158–159 Nslookup, 90, 156–157, 371–372 NTLM (NT LAN Manager), 80–81, 168, 302–303 NTP (Network Time Protocol), 178 NX (no-execute) bit feature, 298 Nyeta ransomware, 354 ",
        "page_idx": 104
    },
    {
        "type": "text",
        "text": "O ",
        "text_level": 1,
        "page_idx": 104
    },
    {
        "type": "text",
        "text": "OASP Mobile Security Testing   \nGuidelines, 16   \nOBEX (Object Exchange), 199   \nObjdump, 455–457   \nObject Exchange (OBEX), 199   \noffensive controls, 49   \nOffensive Security Example penetration   \ntest report, 497   \noffline brute-force attacks, 243   \nOllyDbg, 452–453   \none-click attacks, 260–261   \nonline brute-force attacks, 243   \nopen relay (SMTP), 160 ",
        "page_idx": 104
    },
    {
        "type": "text",
        "text": "Open Source Intelligence. See OSINT (Open Source Intelligence) gathering   \nOpen Source Security Testing Methodology Manual (OSSTMM), 15–16   \nOpen Web Application Security Project. See OWASP (Open We Application Security Project)   \nOpenAPI, 40, 268   \nOpenSCAP, 314   \nOpenSSL, POODLE (Padding Oracle Downgraded Legacy Encryptio vulnerability, 175   \nOpenVAS, 401–403   \nOpenVz, 311   \noperators, UNION, 233, 235–236   \nOPTIONS method (HTTP), 217   \norganized crime, 9–10   \noriginal folder, 318   \noscap-docker, 314   \nOSINT (Open Source Intelligence) gathering, 90 defined, 90 tools, 370 Censys, 389–390 Dig, 371–372 ExifTool, 374–375 FOCA (Fingerprinting Organizations with Collected Archives), 374 Host, 371–372 Maltego, 381–382 Nslookup, 371–372 Recon-ng, 382–389 Shodan API, 378–380 Theharvester, 376–378 Whois, 372–373   \nOSSTMM (Open Source Security Testing Methodology Manual), 15–16   \nOut-CompressedDll script, 351   \nOut-EncodedCommand script, 351   \nOut-EncryptedScript script, 351   \nOut-Minidump script, 352   \nout-of-band SQL injection, 233, 237–238   \noutput file processing (Dradis), 485–486   \nOverTheWire Wargames, 225   \nOWASP (Open Web Application Security Project), 11, 226 Authentication Cheat Sheet, 222, 246 Clickjacking Defense Cheat Sheet, 261 Enterprise Security API (ESAPI), 240 iGoat, 325 Mobile Security Project, 314 Mutillidae II, 225 REST Security Cheat Sheet, 269 Risk Rating Methodology, 495 SeraphimDroid, 323 ZAP (Zed Attack Proxy), 41, 251, 413–414   \nOzymanDNS and sods, 441 ",
        "page_idx": 105
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 105
    },
    {
        "type": "text",
        "text": "P ",
        "text_level": 1,
        "page_idx": 105
    },
    {
        "type": "text",
        "text": "Packetforge-ng, 197–198   \npackets capture, 215 crafting, 85–87 inspection and eavesdropping, 90   \nPadding Oracle on Downgraded Legacy Encryption (POODLE) vulnerability, 175   \nPALADIN, 457   \nPANs (primary account numbers), 54   \nparameter pollution, 250–251   \nParrot, 224, 367   \npassive reconnaissance, 87–88, 370 Censys, 389–390 defined, 70–71 Dig, 371–372 domain enumeration, 88–91 ExifTool, 374–375 FOCA (Fingerprinting Organizations with Collected Archives), 374   \nHost, 371–372   \nMaltego, 381–382   \nNslookup, 90, 156–157, 371–372   \nOSINT (Open Source Intelligence) gathering, 90   \npacket inspection and eavesdropping, 90   \nRecon-ng, 90–102, 382–389 hackertarget module, 96 help menu, 92 key list command, 96–97 keys add command, 386 keys list command, 96–97, 386–387 launching, 91 main menu and splash page, 91 searches, 95 Shodan API, 96–102 show info command, 387–388 show modules command, 92–95, 383–386 support resources, 389 use command, 387–389   \nShodan API, 96–102, 378–380   \nTheharvester, 376–378   \nvulnerability scans, 103 authenticated, 105 challenges of, 109–112 compliance, 109–110 discovery, 106 full, 106–108 how it works, 103–104 results analysis, 112–113 stealth, 108–109 support resources, 113–115 unauthenticated, 104–105 vulnerability management, 115–116   \nWhois, 372–373   \nassive vulnerability scanners, 108. See also scans   \nass-the-hash attacks, 168–169, 302–30   \nassword crackers Cain and Abel, 424–425 CeWL, 431–432 Hashcat, 425–427 Hydra, 428–429 John the Ripper, 420–425 Johnny, 425 Medusa, 430–431 Mimikatz, 432 Ncrack, 430–431 Patator, 432–433 RainbowCrack, 429–430   \npasswords Dradis Framework, 479–480 management, 56   \nPatator, 432–433   \npath traversals, 262–263   \npayment brands, 54   \nPayment Card Industry Data Security Standard. See PCI DSS (Payment Card Industry Data Security Standard)   \nPCI DSS (Payment Card Industry Data Security Standard), 13–14, 53–56, 491–493   \nPCI forensic investigators (PFIs), 54   \nPCI SSC (Payment Card Industry Security Standards Council), 53   \nPeach, 459   \nPearson Test Prep software, 505 exam customization, 507–508 exam updates, 508 offline access, 506–507 online access, 505 Premium Edition, 508–509   \nPearsonITCertification.com, 506   \npenetration testing, defined, 6–7   \nPenetration Testing Execution Standard (PTES), 13, 16   \nPenetration Testing Framework, 14   \npenetration testing labs. See labs   \npenetration testing methodologies, 10, 13–16 reasons for following, 10 web application tests, 11   \npenetration testing planning. See plannin and preparation   \npenetration testing reports. See reports   \npenetration testing tools. See tools   \npermission escalation. See privilege escalation   \nPermissions Calculator website, 290   \npersistence, 337, 433 blind shells, creating, 338–344 C2 (command and control) utilities, 344–345 custom daemons and processes, creating, 346 reverse shells, creating, 338–344 scheduled tasks, creating, 346 tools, 433–434 users, creating, 346   \nPeruggia, 225   \nPFIs (PCI forensic investigators), 54   \npharming, 126–127   \nphishing, 126 SMS, 134–135 spear, 128–134 voice, 135 whaling, 135   \nphysical facility tests, 11   \nphysical security attacks, 326–327   \nPiessens, Frank, 196   \nPietraszek, Tadeusz, 441   \npiggybacking, 327   \nping scans, 77–78   \nping sweeps, 77   \npivoting, 347 post-exploitation scanning, 347–348 remote access protocols, 348–349   \nplanning and preparation compliance-based assessment, 50 financial sector regulations, 50–52 healthcare sector regulations, 52–53 key technical elements, 56–57 limitations of, 57–58 PCI DSS (Payment Card Industry Data Security Standard), 53–56 corporate policies, 43–44 export restrictions, 43 importance of, 29 legal concepts, 41 contracts, 41–42 MSAs (master service agreements), 42 NDAs (nondisclosure agreements), 43 SOWs (statements of work), 42 pre-engagement documentation budget, 32–33 communication escalation path, 31–32 confidentiality of findings, 32 disclaimers, 38–39 impact analysis and remediation timelines, 34–38 point-in-time assessment, 33 rules of engagement, 30 target audience, 29–30 technical constraints, 39 risk management, 47–50 scoping assessment types, 45 importance of, 44 scope creep, 44 special considerations, 45–46 target selection, 46–47 strategy, 47 support resources, 40–41   \nplugin.output node (Dradis), 486   \nPNL (preferred network list) attacks, 189   \npoint-in-time assessments, 33   \npolicies corporate, 43–44 Windows Group Policy, 305–306   \nPOODLE (Padding Oracle on Downgraded Legacy Encryption) vulnerability, 175   \nPOP3 (Post Office Protocol v3) port numbers, 159   \nport numbers, 159   \nport scans, Nmap, 391–393 half-open, 71–72 ping, 77–78 SYN, 71–72 TCP connect, 73–74 TCP FIN, 76–77 UDP, 74–75 Zenmap, 393–395   \nPOST method (HTTP), 217   \nPost Office Protocol v3 (POP3) port numbers, 159   \npost-engagement activities, 474–475. See also reports   \npost-exploitation techniques blind shells, creating, 338–344 C2 (command and control) utilities, 344–345 cleanup process, 356 custom daemons and processes, creating, 346 lateral movement, 347 post-exploitation scanning, 347–348 remote access protocols, 348–349 persistence, 337 reverse shells, creating, 338–344 scheduled tasks, creating, 346 users, creating, 346 Windows legitimate utilities, 349 Empire, 353–354 PowerShell, 349–350 PowerSploit, 351–353 PSExec, 355–356 Sysinternals, 355–356 WMI (Windows Management Instrumentation), 354–355   \nPowerShell, 349–350, 433, 462   \nPowerSploit, 351–353, 434   \nPowerUp script, 352   \nPowerView script, 352   \nPR (Privilege Required) metrics, 37   \npre-engagement documentation budget, 32–33 communication escalation path, 31–32 confidentiality of findings, 32 disclaimers, 38–39 impact analysis and remediation timelines, 34–38 point-in-time assessment, 33 rules of engagement, 30 target audience, 29–30 technical constraints, 39   \npreferred network list (PNL) attacks, 189   \npretexting, 136   \nprimary account numbers (PANs), 54   \nprivilege escalation, 285–286 insecure SUDO implementations, 294–298 Linux permissions, 286–291 ret2libc (“return-to-libc”) attacks, 298 Unix programs, 291–293 Windows privileges clear-test credentials in LDAP, 300–301 container security, 310–314 CPassword, 299 DLL (dynamic link library) hijacking, 303–304 exploitable services, 304–305 Group Policy, 305–306 insecure file/folder permissions, 305 Kerberoast, 301 keyloggers, 306–307 LSASS (Local Security Authority Subsystem Service) credentials, 301–302 SAM (Security Account Manager) database, 302–303 sandbox escape, 308–310 scheduled tasks, 307–308 VM (virtual machine) escape, 310 ",
        "page_idx": 105
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 106
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 106
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 107
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 107
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 108
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 108
    },
    {
        "type": "text",
        "text": "Privilege Required (PR) metrics, 37   \nPRNGs (pseudorandom number   \ngenerators), 247   \nProcDump, 301–302   \nprocedures, stored, 239–240   \nprocesses, creating, 346   \nProfessional Edition (Dradis), 479   \nProject Summary screen (Dradis), 481   \nprotocol configurations, insecurity in,   \n281–284   \nproxies (HTTP)   \ndefined, 214   \nZAP, 214   \nProxychains, 439   \nps command, 343   \npseudorandom number generators   \n(PRNGs), 247   \nPSExec, 355–356   \nPsExec tool (Sysinternals), 355   \nPsFile tool (Sysinternals), 355   \nPsGetSid tool (Sysinternals), 355   \nPsInfo tool (Sysinternals), 355   \nPsKill tool (Sysinternals), 355   \nPsList tool (Sysinternals), 355   \nPsLoggedOn tool (Sysinternals), 355   \nPsLogList tool (Sysinternals), 355   \nPsPassword tool (Sysinternals), 355   \nPsPing tool (Sysinternals), 355   \nPsService tool (Sysinternals), 355   \nPsShutdownPsSuspend tool   \n(Sysinternals), 355   \npsudp, 441   \nPTES (Penetration Testing Execution   \nStandard), 13, 16   \nPUT method (HTTP), 217   \npwd command, 343   \nPython, 461 ",
        "page_idx": 109
    },
    {
        "type": "text",
        "text": "Q ",
        "text_level": 1,
        "page_idx": 109
    },
    {
        "type": "text",
        "text": "QSAs (qualified security assessors), 54   \nqualified security assessors (QSAs), 54   \nQualys scanner, 404   \nquery throttling, 111   \nQUIT command (SMTP), 161 ",
        "page_idx": 109
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 109
    },
    {
        "type": "text",
        "text": "R   \nrace conditions, 266–267   \nRadamsa, 459   \nradio-frequency identification (RFID) attacks, 200   \nrainbow tables, 244, 429   \nRainbowCrack, 429–430   \nransomware Nyeta, 354 WannaCry, 8   \nRapid7, 404   \nRC (Report Confidence), 36   \nRCPT command (SMTP), 160   \nrcrack, 429–430   \nRDP (Remote Desktop Protocol), 348, 433   \nReader (Adobe), 309   \nReaver, 197   \nrecommendations for remediation, reporting, 495–497   \nreconnaissance. See active reconnaissance; passive reconnaissance   \nRecon-ng, 90–102, 382–389 hackertarget module, 96 help menu, 92 key list command, 96–97 keys add command, 386 keys list command, 386–387 launching, 91 main menu and splash page, 91 searches, 95 Shodan API, 96–102 show info command, 387–388 show modules command, 92–95, 383–386 support resources, 389 use command, 387–389   \nred teams, 46   \nredirect attacks, 249   \nreflected DDoS (distributed denialof-service) attacks, 178   \nreflected XSS (cross-site scripting) attacks, 253–254   \nregulations financial sector, 50–52 healthcare sector, 52–53 PCI DSS (Payment Card Industry Data Security Standard), 53–56   \nRemediation Level (RL), 36   \nremediation timelines, 34–38   \nremote access protocols, 348–349   \nRemote Desktop Protocol (RDP), 348, 433   \nremote file inclusion (RFI) vulnerabilities, 264–265   \nRemove-Comments script, 351   \nRemove-VolumeShadowCopy script, 352   \nReport Confidence (RC), 36   \nreporting/html module, 102   \nreports classifying, 499 common elements of, 490 executive summary, 493 findings and recommendations, 495–497 methodology, 494 metrics and measurements, 494–495 communications, 500–501 distribution, 499–500 Dradis Framework Choose a Tool dropdown, 484–485 data import, 483 imported scans, viewing, 488–490 launching, 479 login screen, 480 node organization, 486–488 node/subnode creation, 481–483 output file processing, 485–486 password creation, 479–480 plugin.output node, 486 Project Summary screen, 481 Upload Manager screen, 484 Upload Output from Tool option, 483–484 versions, 478–479 handling, 499–500 Offensive Security Example penetration test report, 497 PCI DSS reporting guidelines, 491–493 writing best practices, 475, 476–478 importance of, 475–476   \nRepresentational State Transfer (REST), 267   \nrequest for proposal (RFP), 44   \nrequests (HTTP), 215–218   \nres directory, 318   \nresource command, 343   \nresources, support, 40–41 CAPEC (Common Attack Pattern Enumeration and Classification), 114 CVE (Common Vulnerabilities and Exposures), 114–115 CWE (Common Weakness Enumeration), 115 JPCERT (Japan Computer Emergency Response Team), 113 NIST (National Institute of Standards and Technology), 113 US-CERT (U.S. Computer Emergency Readiness Team), 113   \nresources.arsc directory, 318   \nresponses HTTP (Hypertext Transfer Protocol), 215–218 port scans SYN scans, 71 TCP connect scans, 73 TCP FIN scans, 76 UDP scans, 75   \nREST (Representational State Transfer), 267   \nRESTful (REST) APIs, 269   \nret2libc (“return-to-libc”) attacks, 298   \nreverse shells, 238, 338–344   \nRF-based attacks. See wireless network vulnerabilities   \nRFI (remote file inclusion) vulnerabilities 264–265   \nRFP (request for proposal), 44   \nrisk, 47–50 acceptance, 48 appetite for risk, 49–50 avoidance, 49 mitigation, 48–49 Risk Rating Methodology (OWASP), 495 sharing, 49 tolerance, 47–48 transfer, 49   \nRL (Remediation Level), 36   \nRlogin, 284   \nRocket, 311   \nrockyou wordlist, 424   \nrogue access points, 185   \nrogue DHCP servers, 183–185   \nRoot Me, 225   \nroute manipulation attacks, 175–176   \nRSET command (SMTP), 161   \nRsh, 284   \nRuby, 461–462   \nrules of engagement, 30   \nrun command, 451   \nRwhod, 284 ",
        "page_idx": 109
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 110
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 110
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 111
    },
    {
        "type": "text",
        "text": "S ",
        "text_level": 1,
        "page_idx": 111
    },
    {
        "type": "text",
        "text": "S (Scope) metrics, 37   \nSAM (Security Account Manager)   \ndatabase, 302–303   \nSamba, 284   \nSamurai Web Testing Framework, 225   \nsandboxes, escaping, 308–310 ",
        "page_idx": 111
    },
    {
        "type": "text",
        "text": "SANS Institute InfoSec Reading Roo 493   \nSANS Investigative Forensic Toolkit (SIFT) Workstation, 458   \nSaved State Analysis, 302   \nscans, 391–393 Nmap port scans half-open, 71–72 ping, 77–78 SYN, 71–72 TCP connect, 73–74 TCP FIN, 76–77 UDP, 74–75 post-exploitation, 347–348 tools, 18–19 vulnerability, 103 authenticated, 105 challenges of, 109–112 compliance, 109–110 Dirbuster, 419 discovery, 106 full, 106–108 how it works, 103–104 management, 115–116 Nessus, 403 Nexpose, 403–404 Nikto, 84, 410–413, 488–489 OpenVAS, 401–403 Qualys, 404 results analysis, 112–113 SQLmap, 404–410 stealth, 108–109 support resources, 113–115 unauthenticated, 104–105 W3AF, 415–419 ZAP (Zed Attack Proxy), 41, 214, 251, 413–414 vulnerability scans, 400   \nScapy, 85–87   \nscapy command, 86   \nscarcity, social engineering and, 137   \nscheduled tasks creating, 346 privilege escalation and, 307–308   \nScope (S) metrics, 37   \nscoping. See also planning and preparation assessment types, 45 importance of, 44 scope creep, 44 special considerations, 45–46 target selection, 46–47   \nscreenshot command, 448   \nscripts Add-Persistence, 351 docker-bench-security, 313 Find-AVSignature, 351 Get-GPPAutologon, 352 Get-GPPPassword, 352 Get-HttpStatus, 352 Get-Keystrokes, 352 Get-MicrophoneAudio, 352 Get-SecurityPackages, 351 Get-TimedScreenshot, 352 Get-VaultCredential, 352 Get-VolumeShadowCopy, 352 http-enum, 83–84 Install-SSP, 351 Invoke-CredentialInjection, 351 Invoke-DllInjection, 351 Invoke-Mimikatz, 352 Invoke-NinjaCopy, 352 Invoke-Portscan, 352 Invoke-ReflectivePEInjection, 351 Invoke-ReverseDnsLookup, 352 Invoke-Shellcode, 351 Invoke-TokenManipulation, 351 Invoke-WmiCommand, 351 Mount-VolumeShadowCopy, 352 New-ElevatedPersistenceOption, 35 New-UserPersistenceOption, 351 New-VolumeShadowCopy, 352 Out-CompressedDll, 351 ",
        "page_idx": 111
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 112
    },
    {
        "type": "text",
        "text": "Out-EncodedCommand, 351 Out-EncryptedScript, 351 Out-Minidump, 352 PowerUp, 352 PowerView, 352 Remove-Comments, 351 Remove-VolumeShadowCopy, 352 Set-CriticalProcess, 352 Set-MasterBootRecord, 352 smb-enum-groups, 81–82 smb-enum-processes, 85 smb-enum-shares, 82 smb-enum-users.nse, 80–81 smtp-open-relay, 160 SNMP-related, 158–159 SDKs (software development kits), 40 search command, 343 searches, Recon-ng, 95 SearchSploit, 151–154, 163–166 SEC (Securities and Exchange Commission), 52 Secure Computing Mode (seccomp), 309 Secure File Transfer Protocol (SFTP), 166 Secure SMTP (SSMTP) port number, 159 Securities and Exchange Commission (SEC), 52 Security Account Manager (SAM) database, 302–303 Security Enhanced Linux (SELinux), 293 security misconfigurations, 262 cookie manipulation attacks, 263–264 directory traversal vulnerabilities, 262–263 Security Onion, 369–370, 457 Security Requirements metrics, 36 Security Standards for the Protection of Electronic Protected Health Information. See HIPAA Security Rule SELECT statement, 228 ",
        "page_idx": 112
    },
    {
        "type": "text",
        "text": "Select-String command, 349   \nSELinux (Security Enhanced Linux), 293   \nSendmail, 284   \nsensors, egress, 327   \nSeraphimDroid, 323   \nserial console debugging, 326   \nServer Message Block (SMB), 8, 76, 151–155   \nservers, HTTP (Hypertext Transfer Protocol), 213   \nservice dradis start command, 479   \nservice providers, 54–55   \nservice set identifiers (SSIDs), 46, 186   \nservices enumeration, 85 insecure configurations of, 281–284   \nsession hijacking, 245–249   \nsession riding, 260–261   \nsession sniffing, 249   \nsessions HTTP (Hypertext Transfer Protocol), 213 web, 221–224   \nSET (Social-Engineer Toolkit), 11–12, 129–134   \nset LHOST command, 155   \nset RHOST command, 155   \nSet-CriticalProcess script, 352   \nSet-MasterBootRecord script, 352   \nsetoolkit command, 129   \n-sF option (nmap command), 76–77   \nSFI (software fault isolation), 309   \nSFTP (Secure File Transfer Protocol), 166   \nSGID (set-group-ID) Linux, 289 Unix, 291–293   \nSHA-1 algorithm, 166   \nSHA-2 algorithm, 166   \nSHA-512 algorithm, 166   \nThe Shadow Brokers, 8   \nshared_prefs folder, 319   \nsharing risk, 49   \nshell command, 343   \nshells bash, 460–461 blind, 338–344 reverse, 238, 338–344   \nShodan API, 96–102, 378–380   \nshodan_hostname module, 100   \nshoulder surfing, 137   \nshow info command, 387–388   \nshow modules command, 383–386   \nshow options command, 155   \nSIFT (SANS Investigative Forensic Toolkit) Workstation, 458   \nsignal jamming, 189   \nsilver ticket attacks (Kerberos), 172   \nSimple Network Management Protocol. See SNMP (Simple Network Management Protocol)   \nSimple Object Access Protocol (SOAP), 40, 267   \nSkadi, 457   \nSmali, 318   \nsmalidea, 318   \nSmart Install, 281   \nSMB (Server Message Block), 8, 76, 151–155   \nSMB_COM_NEGOTIATE message, 80   \nSMB_COM_SESSION_SETUP_ANDX message, 80–81   \nsmb-enum-groups script, 81–82   \nsmb-enum-processes script, 85   \nsmb-enum-shares script, 82   \nsmb-enum-users.nse script, 80–81   \nSMS phishing, 134–135   \nSMTP (Simple Mail Transfer Protocol) commands, 160–163 known SMTP server exploits, 163–166 open relay, 160 SMTPS (SMTP over SSL), 159 TCP port numbers, 159   \nsmtp-open-relay script, 160   \nSMTPS (SMTP over SSL), 159   \nsmtp-user-enum tool, 161–163   \n-sn option (nmap command), 77–78   \nsniffing, session, 249   \nSNMP (Simple Network Management Protocol), 157–159   \nSOAP (Simple Object Access Protocol), 40, 267   \nsocat, 345   \nsocial engineering attacks, 11–12 characteristics of, 125–126 elicitation, 135 interrogation, 136 malvertising, 127–128 motivation techniques, 137 pharming, 126–127 phishing, 126 SMS, 134–135 spear, 128–134 voice phishing, 135 whaling, 135 pretexting, 136 SET (Social-Engineer Toolkit), 129–134 shoulder surfing, 137 USB key drop, 138   \nsocial engineering tests, 11–12, 129–134   \nsocial proof, in social engineering, 137   \nSocial-Engineer Toolkit. See SET (Social-Engineer Toolkit)   \nSocial-Engineer Toolkit (SET), 11–12   \nsoftware. See tools   \nsoftware assurance tools, 458–459   \nsoftware development kits (SDKs), 40   \nsoftware fault isolation (SFI), 309   \nSonarQube, 458   \nsource code comments, exploits in, 265–266   \nSOWs (statements of work), 42   \nspear phishing, 128–134   \nSpecial Publication 800–57 (NIST), 57   \nSpecial Publication 800–115 (NIST), 15   \nspoofing ARP, 173–175 DHCP (Dynamic Host Control Protocol), 183–185   \nSQL injection vulnerabilities, 228 blind SQL injection, 237 Boolean technique, 233, 237 categories of, 232–234 database fingerprinting, 234–235 error-based technique, 233 examples of, 228–232 mitigations, 240 out-of-band technique, 233, 237–238 SQL statements, 228–232 stored procedures, 239–240 time-delay technique, 233, 239 UNION operator technique, 233, 235–236   \nSQLi. See SQL injection vulnerabilities   \nSQLmap, 404–410   \n-sS option (Nmap), 71–72   \nSSIDs (service set identifiers), 46, 186   \nSSLStrip, 174   \nSSMTP (Secure SMTP) port number, 159   \n-sT option (nmap command), 73–74   \nstack-smashing protection, 298   \nSTARTTLS, 159, 160   \nstarvation attacks (DHCP), 183–185   \nstatements (SQL), 228–232   \nstatements of work (SOWs), 42   \nstate-sponsored attackers, 10   \nstatic binary analysis, 316   \nstealth scans, 108–109   \nsticky bits, 288   \nstored DOM-based attacks, 263–264   \nstored procedures, 239–240   \nstored XSS (cross-site scripting) attacks, 255–256   \nstudy plans (exam prep), 509   \n-sU option (nmap command), 74–75   \nsudo command, 286–287, 294–298   \nSUID (set-user-ID) Linux, 289 Unix, 291–293   \nSun Tzu, 9   \nsupport resources, 40–41 CAPEC (Common Attack Pattern Enumeration and Classification), 114 CVE (Common Vulnerabilities and Exposures), 114–115 CWE (Common Weakness Enumeration), 115 intentionally vulnerable systems, 224–227 JPCERT (Japan Computer Emergency Response Team), 113 NIST (National Institute of Standards and Technology), 113 US-CERT (U.S. Computer Emergency Readiness Team), 113   \nSwagger, 40, 268   \nSYN flood attacks, 176   \nSYN scans, 71–72   \nsysinfo command, 449   \nSysinternals, 302, 355–356   \nsystem cleanup, 356   \nsystem diagrams, 41   \nSYSTEM privileges, 304 ",
        "page_idx": 113
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 113
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 114
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 114
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 115
    },
    {
        "type": "text",
        "text": "T ",
        "text_level": 1,
        "page_idx": 115
    },
    {
        "type": "text",
        "text": "tables, rainbow, 244, 429   \ntailgating, 327   \ntarget audience, identification of, 29–30   \ntarget selection, 46–47   \ntasks, scheduled creating, 346 privilege escalation, 307–308   \nTCP (Transmission Control Protocol) Nmap scans TCP connect, 73–74 TCP FIN, 76–77 port numbers, 159   \nTCPDUMP, 90, 215, 282–284   \nteams blue, 46 red, 46   \ntechnical constraints, 39   \nTelnet, 281   \ntemporal groups, 34–37   \ntests gray-box, 13 network infrastructure, 11 physical facility, 11 social engineering, 11–12 white-box, 12–13 wireless network, 11   \nTheharvester, 376–378   \ntheoretical vulnerabilities, 38   \nthreat actors, 9–10   \nthreats. See attacks   \ntime of check to time of use (TOCTOU) attacks, 266–267   \ntime-delay SQL injection, 233, 239   \ntimeline, remediation, 34–38   \nTimes, Tim, 90–91   \nTOCTOU (time of check to time of use), 266–267   \ntolerance, risk, 47–48   \ntools, 18–19, 313. See also commands; scripts ADIA (Appliance for Digital Investigation and Analysis), 457 AFL (American Fuzzy Lop), 459 Aircrack-ng suite, 186–189, 191–196 Aireplay-ng, 188, 191, 194–195 Airmon-ng, 186–187, 191, 194 Airodump-ng, 188, 191, 194–195 Anchore, 313 Androick, 323 Apktool, 322 Apple Remote Desktop, 433 Aqua Security, 313 Bane, 313 bash, 460–461   \nBeEF, 449–450   \nBurp, 214   \nCain and Abel, 424–425   \nCAINE (Computer Aided Investigativ Environment), 457   \nCensys, 389–390   \nCeWL, 431–432   \nClair, 313   \nCydia Substrate, 315   \nDagda, 313   \nDEFT (Digital Evidence & Forensics Toolkit), 457   \nDeNiSe, 441   \nDev-Sec.io, 313   \nDig, 371–372   \nDirbuster, 419   \ndns2tcp, 441   \nDNScapy, 441   \nDNScat, 441   \nDNScat2, 345, 441   \nDNSdumpster, 88   \nDNSRecon, 67–69   \ndocker-bench-security, 313   \ndocker-explorer, 314   \nDradis Framework Choose a Tool dropdown, 484–485 data import, 483 imported scans, viewing, 488–490 launching, 479 login screen, 480 node organization, 486–488 node/subnode creation, 481–483 output file processing, 485–486 password creation, 479–480 plugin.output node, 486 Project Summary screen, 481 Upload Manager screen, 484 Upload Output from Tool option, 483–484 versions, 478–479   \nDropboxC2 (DBC2), 345   \nedb debugger, 452–454   \nEmpire, 171, 353–354, 434   \nEncryption, 439–440   \nEnum4linux, 395–400   \nEttercap, 199   \nExifTool, 374–375   \nFeederbot and Moto, 442   \nFindbugs, 458   \nFindsecbugs, 458   \nFOCA (Fingerprinting Organizations with Collected Archives), 374   \nFrida, 315   \nGDB (GNU Project Debugger), 450–452   \nHashcat, 425–427   \nHeyoka, 441   \nHost, 371–372   \nHydra, 428–429   \nIDA, 454–455   \niGoat, 325   \niMAS, 325   \nImmunity, 454   \nIodine, 441   \nJohn the Ripper, 420–425   \nJohnny, 425   \nKerberoast, 301   \nkeyloggers, 306–307   \nLanman, 80–81   \nLinux distributions, 224, 365 BlackArch Linux, 224, 367–368 CAINE (Computer Aided Investigative Environment), 369 Kali Linux, 224, 366 Parrot, 224, 367 Security Onion, 369–370   \nMaltego, 381–382   \nMedusa, 430–431   \nMetasploit, 90–91, 115, 442–449 Metasploit Unleashed course, 344 Meterpreter, 299, 343–344, 446–449 RDP connections, creating, 348–349   \nMimikatz, 169–172, 432   \nMobiSec Live Environment Mobile Testing Framework, 325   \nMutiny Fuzzing Framework, 459   \nNcrack, 430–431   \nNessus, 106–108, 403–404   \nNetcat, 338–342   \nNikto, 84, 410–413, 488–489   \nNmap. See Nmap   \nNotary, 314   \nNslookup, 90, 156–157, 371–372   \nNTLM, 80–81   \nObjdump, 455–457   \nOllyDbg, 452–453   \nOpenVAS, 401–403   \noscap-docker, 314   \nOzymanDNS and sods, 441   \nPacketforge-ng, 197–198   \nPALADIN, 457   \nPatator, 432–433   \nPeach, 459   \nPearson Test Prep software, 505 exam customization, 507–508 exam updates, 508 offline access, 506–507 online access, 505 Premium Edition, 508–509   \nPowerShell, 349–350, 433, 462   \nPowerSploit, 351–353, 434   \nProcDump, 301   \nProxychains, 439   \nPSExec, 355–356   \npsudp, 441   \nQualys scanner, 404   \nRadamsa, 459   \nRainbowCrack, 429–430   \nRDP (Remote Desktop Protocol), 43   \nReaver, 197   \nRecon-ng, 90–102, 382–389 hackertarget module, 96 help menu, 92 key list command, 96–97 keys add command, 386 ",
        "page_idx": 115
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 115
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 116
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 116
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 117
    },
    {
        "type": "text",
        "text": "keys list command, 386–387 launching, 91 main menu and splash page, 91 searches, 95 Shodan API, 96–102 show info command, 387–388 show modules command, 92–95, 383–386 support resources, 389 use command, 387–389 Security Onion, 457 Shodan API, 96–102, 378–380 SIFT (SANS Investigative Forensic Toolkit) Workstation, 458 Skadi, 457 smtp-user-enum, 161–163 socat, 345 SonarQube, 458 SQLmap, 404–410 SSLStrip, 174 Sysinternals, 355–356 tcpdump, 90, 215, 282–284 Theharvester, 376–378 Tor, 438–439 TrevorC2, 345 Try-SQL Editor, 229 Tshark, 284 Twittor, 345 use cases for, 365 Veil, 434–437 vmss2core, 301 VNC, 433 W3AF scanner, 415–419 W3AFusage, 419 WebGoat, 225, 231, 254 Whois, 372–373 Windows Debugger, 452 Wireshark, 90, 216 WMI (Windows Management Instrumentation), 354–355 WMImplant, 345 wsc2, 345 ",
        "page_idx": 117
    },
    {
        "type": "text",
        "text": "X server forwarding, 433 XPosed, 315 ZAP (Zed Attack Proxy), 41, 214, 251, 413–414 Zenmap, 393–395 Tor, 438–439 TRACE method (HTTP), 217 transfer of risk, 49 TrevorC2, 345 Try2Hack, 225 Try-SQL Editor, 229 Tshark, 284 tunneling, DNS (Domain Name System), 440–442 Twittor, 345 ",
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "U ",
        "text_level": 1,
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "UDP (User Datagram Protocol), Nmap UDP scans, 74–75   \nUI (User Interaction) metrics, 37   \nunauthenticated scans, 104–105   \nuniform resource locators (URLs), 219–220   \nunilateral NDAs (nondisclosure agreements), 43   \nUNION operator, 233, 235–236   \nUnix, privilege escalation in, 291–293   \nunprotected APIs, 267–270   \nUnstructured Supplementary Service Data (USSD), 323   \nUpdate Products button (Pearson Test Prep software), 508   \nUPDATE statement, 228   \nupdating Pearson Test Prep software, 508   \nupload command, 343   \nUpload Manager screen (Dradis), 484   \nUpload Output from Tool option (Dradis), 483–484   \nurgency, in social engineering, 137   \nURLs (uniform resource locators), 219–220   \nUSB key drops, 138   \nUS-CERT (U.S. Computer Emergency Readiness Team), 113   \nuse cases, 365   \nuse command, 387–389   \nuse exploit/windows/smb/ms17_010_ eternalblue command, 155   \nuser enumeration, 80–81   \nUser Interaction (UI) metrics, 37   \nuseradd command, 295   \nusermod command, 294–295   \nusers, creating, 346   \nUSSD (Unstructured Supplementary Service Data), 323   \nutilities. See tools ",
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "V ",
        "text_level": 1,
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "Vanhoef, Mathy, 196   \nVeil, 434–437   \nverbose error handling, 266   \nVicnum, 225   \nvisudo command, 296   \nVLANs (virtual LANs), hopping, 181–183   \nVMs (virtual machines) containers compared to, 311–312 dumping memory from, 301 escaping, 310   \n.vmsn file extension, 301   \n.vmss file extension, 301   \nvmss2core, 301–302   \nVMware Snapshot, 302   \nVNC, 348, 433   \nvoice phishing, 135   \nVolatility Foundation, 302   \nVolatility Framework, 301   \nVRFY command (SMTP), 161   \nvulnerability management, 115–116 chaining analysis, 37–38 impact analysis, 34–37 theoretical vulnerabilities, 38   \nvulnerability scans, 103, 400 ",
        "page_idx": 118
    },
    {
        "type": "text",
        "text": "authenticated, 105   \nchallenges of, 109–112   \ncompliance, 109–110   \nDirbuster, 419   \ndiscovery, 106   \nfull, 106–108   \nhow it works, 103–104   \nNessus, 403–404   \nNikto, 84, 410–413, 488–489   \nOpenVAS, 401–403   \nQualys, 404   \nresults analysis, 112–113   \nSQLmap, 404–410   \nstealth, 108–109   \nsupport resources, 113–115   \ntools, 18–19   \nunauthenticated, 104–105   \nvulnerability management, 115–116   \nW3AF, 415–419   \nZAP (Zed Attack Proxy), 41, 214, 251,   \n413–414 ",
        "page_idx": 119
    },
    {
        "type": "text",
        "text": "W ",
        "text_level": 1,
        "page_idx": 119
    },
    {
        "type": "text",
        "text": "W3AF scanner, 415–419   \nW3AFusage, 419   \nW3Schools, 218, 229   \nWADL (Web Application Description Language), 40, 268   \nWAFs (web application firewalls), 46   \nWannaCry, 8   \nwar driving, 190   \nWassenaar Arrangement, 439   \nweak cryptographic algorithms, 243–244   \nWeb Application Description Language (WADL), 40, 268   \nweb applications authentication-based vulnerabilities credential brute forcing, 243–245 default credential exploits, 249–250 Kerberos exploits, 250 redirect attacks, 249 session hijacking, 245–249   \nauthorization-based vulnerabilities Insecure Direct Object Reference vulnerabilities, 251–252 parameter pollution, 250–251   \nclickjacking, 261   \ncommand injection vulnerabilities, 241–242   \nCSRF (cross-site request forgery), 260–261   \nenumeration, 83–84   \nfile inclusion vulnerabilities LFI (local file inclusion), 264 RFI (remote file inclusion), 264–265   \nHTML injection vulnerabilities, 241   \nHTTP (Hypertext Transfer Protocol), 213–221 clients, 213 proxies, 214 request/response model, 215–218 servers, 213 sessions, 213 URLs (uniform resource locators), 219–220   \ninsecure code practices code signing, lack of, 270 error-handling errors, 266 hard-coded credentials, 266 hidden elements, 270 race conditions, 266–267 source code comments, 265–266 unprotected APIs, 267–270   \nlabs for, 224–227   \nsecurity misconfigurations, 262 cookie manipulation attacks, 263–264 directory traversal vulnerabilities, 262–263   \nSQL injection vulnerabilities, 228 blind SQL injection, 237 Boolean technique, 233, 237 categories of, 232–234 database fingerprinting, 234–235 error-based technique, 233 examples of, 228–232 mitigations, 240 out-of-band technique, 233, 237–238 stored procedures, 239–240 time-delay technique, 233, 239 UNION operator technique, 233, 235–236 tests, 11 WAFs (web application firewalls), 46 web sessions, 221–224 XSS (cross-site scripting) vulnerabilities, 252–253 DOM-based XSS attacks, 256–257 evasion techniques, 257–258 mitigations, 258–259 reflected XSS attacks, 253–254 stored XSS attacks, 255–256   \nweb browsers, 309   \nweb form-grabbing keyloggers, 307   \nweb page enumeration, 83–84   \nWeb Security Dojo, 225, 227   \nWeb Services Description Language (WSDL), 40, 268   \nweb sessions, 221–224   \nwebcam_list command, 344   \nwebcam_snap command, 344   \nWebGoat, 225, 231, 254   \nWEP (Wired Equivalent Privacy) attacks, 190–192   \nwhaling, 135   \nwhite lists, 46   \nwhite-box tests, 12–13, 47   \nWhois, 372–373   \nWi-Fi Protected Access (WPA) attacks, 192–196   \nWi-Fi Protected Setup (WPS), 197   \nWiGLE, 190   \nWindows Debugger, 452 legitimate utilities for post-exploitation tasks, 349 Empire, 353–354 PowerShell, 349–350 PowerSploit, 351–353 PSExec, 355–356 Sysinternals, 355–356 WMI (Windows Management Instrumentation), 354–355 privilege escalation clear-test credentials in LDAP, 300–301 container security, 310–314 CPassword, 299 DLL (dynamic link library) hijacking, 303–304 exploitable services, 304–305 Group Policy, 305–306 insecure file/folder permissions, 305 Kerberoast, 301 keyloggers, 306–307 LSASS (Local Security Authority Subsystem Service) credentials, 301–302 SAM (Security Account Manager) database, 302–303 sandbox escape, 308–310 scheduled tasks, 307–308 VM (virtual machine) escape, 310 Sysinternals, 302 WinRM (Windows Remote Management), 354 WMI (Windows Management Instrumentation), 172, 354–355   \nWinRM (Windows Remote Management), 354   \nWired Equivalent Privacy (WEP), 190–192, 243   \nwireless adapters, 189   \nwireless network tests, 459   \nwireless network vulnerabilities credential harvesting, 199–200 deauthentication attacks, 186–189 evil twin attacks, 185–186 fragmentation attacks, 197–198 IV (initialization vector) attacks, 190 KARMA attacks, 197 KRACK (key reinstallation attack), 196–197 network tests, 11 PNL (preferred network list) attacks, 189 RFID (radio-frequency identification) attacks, 200 rogue access points, 185 signal jamming, 189 war driving, 190 WEP (Wired Equivalent Privacy) attacks, 190–192 WPA (Wi-Fi Protected Access) attacks, 192–196 WPS (Wi-Fi Protected Setup), 197   \nWireshark, 90, 216   \nWMI (Windows Management Instrumentation), 172, 354–355   \nWMImplant, 345   \nwordlists creating with CeWL, 431–432 defined, 423 rockyou, 424   \nworkgroups, 150   \nWPA (Wi-Fi Protected Access) attacks, 192–196   \nWPS (Wi-Fi Protected Setup), 197   \n“Writing a Penetration Testing Report” whitepaper, 493   \nwriting reports best practices, 475, 476–478 importance of, 475–476   \nwsc2, 345   \nWSDL (Web Services Description Language), 40, 268 ",
        "page_idx": 119
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 119
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 120
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 120
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "X ",
        "text_level": 1,
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "X server forwarding, 348, 433   \n$\\mathbf{\\Deltax}86$ file, 319   \nx86_64 file, 319   \nXN (eXecute Never), 324   \nXPosed, 315   \nXSS (cross-site scripting) vulnerabilities, 252–253 DOM-based XSS attacks, 256–257 evasion techniques, 257–259 reflected XSS attacks, 253–254 stored XSS attacks, 255–256 ",
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "Y ",
        "text_level": 1,
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "Yppasswdd, 284   \nYpserv, 284   \nYpxfrd, 284 ",
        "page_idx": 121
    },
    {
        "type": "text",
        "text": "Z   \nZAP (Zed Attack Proxy), 41, 214, 251, 413–414   \nZenmap, 393–395   \nzero-day attacks, 8   \nZygote, 319–320 ",
        "page_idx": 121
    }
]
{
    "Page_1": "Concurrent Robin Hood\nHashing\n\nSupervisor: Barak A. Pearlmutter",
    "Page_2": "Motivations\n\ne Make improvements on a 10 year old state of the art.\ne Provide the first concurrent Robin Hood Hashing in the\nliterature.\n\nContributions\n\ne First linearisable concurrent variant of Robin Hood Hashing.\n\ne Strong application of new K-CAS developments [Arbel-Raviv,,\nBrown; 2016]\n\n¢ Competitive performance compared to State of the art\nconcurrent hash tables.",
    "Page_3": "General talk structure\n\ne Hash table and Robin Hood background\ne Challenges with concurrent Robin Hood\ne What are the options?\n\ne Solution\n\ne Correctness/Progress\n\ne Evaluation",
    "Page_4": "Hash Tables\n\nConstant time O(1) set/map\nstructures\nSet operations:\n\n1. Contains(Key)\n2. Add(Key)\n3. Remove(Key)\n\nNo need for sorting of keys, unlike tree-based\nsets/maps\n\nRequire a hash function for keys\nApplications: Search, Object representation in\nVMs/interpretors, caches...",
    "Page_5": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\nDivided into two camps: Open vs Closed Addressing.\n\nOpen Addressing.\n\ne Items are stored in individual buckets only.\ne If bucket is already taken find a new one: Collision\nalgorithm.\n\nClosed Addressing.\n\ne Items are stored at original bucket only.\ne Typically in a linked list structure.",
    "Page_6": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\n \n\nRobin Hood Hashing\n(Open Addressing)",
    "Page_7": "IRISH RESEARCH COUNCIL\n\nAn Chomhairle um Thaighde in Eirinn\n\nRobin Hood [Celis ;86]",
    "Page_8": "Gp ESE\nRobin Hood [Celis ;86]\n\nMotto: Steal from the rich\nand give to the poor.",
    "Page_9": "Gp ESE\nRobin Hood [Celis ;86]\n\nMotto: Steal from the rich\nand give to the poor.\n\nSearch: Linear probing with\nculling.",
    "Page_10": "Robin Hood [Celis ;86]\n\nMotto: Steal from the rich\nand give to the poor.\n\nSearch: Linear probing with\nculling.\n\nInsertion: Linear probing with\nconditional recursive\ndisplacement.",
    "Page_11": "Robin Hood [Celis ;86]\n\nMotto: Steal from the rich\nand give to the poor.\n\nSearch: Linear probing with\nculling.\n\nInsertion: Linear probing with\nconditional recursive\ndisplacement.\n\nRemoval: Backward shifting.\nMore on that later.",
    "Page_12": "Robin Hood [Celis ;86]\n\nMotto: Steal from the rich Definition: The number of buckets\nand give to the poor. away an entry is from its ideal\nbucket - Distance From Bucket\n\nSearch: Linear probing with (DFB)\n\nculling.\n\nInsertion: Linear probing with\nconditional recursive\ndisplacement.\n\nRemoval: Backward shifting.\nMore on that later.",
    "Page_13": "Robin Hood [Celis ;86]\n\nMotto: Steal from the rich Definition: The number of buckets\n\nand give to the poor. away an entry is from its ideal\nbucket - Distance From Bucket\n(DFB)\n\nSearch: Linear probing with\nculling.\n\nInsertion: Linear probing with If relocated item has bigger DFB\n\nconditional recursive than than current, kick current out,\n\ndisplacement. take spot, and recursively insert\ncurrent further down the table.\n\nRemoval: Backward shifting.\nMore on that later.",
    "Page_14": "Gp ESE\nLinear Probing vs Robin Hood\n\nInitial Table, inserting V.\n\nFX. 1 Z7.Wi OD",
    "Page_15": "Gp ESE\nLinear Probing vs Robin Hood\n\nInitial Table, inserting V.\n\n \n\nKey: |\ne Moved item G Xo Yi 21 Wid\n\ne Inserted\nitem\n\n \n\nLinear Probing Table\n\nD Xo Yr 2, Wil",
    "Page_16": "Gp ESE\nLinear Probing vs Robin Hood\n\nInitial Table, inserting V.\nKey:\n\ne Moved item G X, Yy Zi.Wi@D\n\ne Inserted\nitem\n\n \n\n \n\nLinear Probing Table Robin Hood Table\n\nD Xo Yr 2 Wil",
    "Page_17": "Gp ESE\nLinear Probing vs Robin Hood\n\nInitial Table, inserting V.\nKey:\n\ne Moved item G Xo Yi ZiWiO\n\ne Inserted\nitem\n\n \n\n \n\nLinear Probing Table Robin Hood Table\n\nD Xo Yr 2 Wil\n\ne Less work e Less distance variance",
    "Page_18": ". Gp ESE\nRobin Hood Search",
    "Page_19": ". Gp ESE\nRobin Hood Search\n\nLinear probe as normal.",
    "Page_20": "Robin Hood Search\n\nLinear probe as normal.\n\nWhen you see someone not\nas far away as you: Stop.",
    "Page_21": ". Gp ESE\nRobin Hood Search\n\nLinear probe as normal. @ Xo, Yy | V> ZW\n\n \n\nWhen you see someone not\nas far away as you: Stop.",
    "Page_22": ". Gp ESE\nRobin Hood Search\n\n \n\nUo\n\nLinear probe as normal. @ Xo, Y; | V> ZW,\n_>U;\n\nWhen you see someone not om Xo. Y; V> Z,W>\n\n \n\nas far away as you: Stop.",
    "Page_23": "Robin Hood Search\n\n. Uo\nD Xo Yr V2 Z2 We\n\nLinear probe as normal.\n\n—+U\nWhen you see someone not om Xo. Y, V> Z,W>\n\nas far away as you: Stop.\n\n \n\nUs\nD Xo Yr V2 Z2 Wa",
    "Page_24": "Robin Hood Search\n\n \n\n \n\nUo\n\nLinear probe as normal. GF Xo Y1 V2 Z> Ww,\n—>U,\n\nWhen you see someone not om Xo. Yi V> Z,W>\n\nas far away as you: Stop.\n\n \n\n \n\n—> U,\nD Xo Y1 V2 Z2 W>\n—> U3\nD Xo Yi V2 Z2W>",
    "Page_25": "° . Gp ESE\nRobin Hood benefits",
    "Page_26": "° . Gp ESE\nRobin Hood benefits\n\n1. Fast, predictable performance:\n\ne Optimised for reads - 2.6 probes per successful\nsearch.\n\ne log(n) on failed search.\n\ne Doesn't degenerate over time (poisoning).",
    "Page_27": "Robin Hood benefits\n\n1. Fast, predictable performance:\n\ne Optimised for reads - 2.6 probes per successful\nsearch.\n\ne log(n) on failed search.\n\ne Doesn't degenerate over time (poisoning).\n\n2. Relatively simple:\n\ne No linked list or pointer manipulation.",
    "Page_28": "Robin Hood benefits\n\n1. Fast, predictable performance:\n\ne Optimised for reads - 2.6 probes per successful\nsearch.\n\ne log(n) on failed search.\n\ne Doesn't degenerate over time (poisoning).\n\n2. Relatively simple:\ne No linked list or pointer manipulation.\n\n3. Cache efficient.\n\ne Flat data, low probes.\n\ne No dynamic allocation.\n\ne Probes are generally on a single cache\nline.",
    "Page_29": "Standard Solution:\nSharded locks\n\nbo laste ly\n\nD Xo Yi V2 Z2Wo* ++ @ Ao Bi C.D",
    "Page_30": ". Gp ESE\nStandard Solution:\n\nSharded locks\nbola sts by\n\nGrA2nCDnD\n\n \n\n@D Xo Y1 Vz Z2Wa* *\n\n \n\n \n\n¢ Could grab multiple locks.\ne Could result in deadlock, if allowed to wrap around.",
    "Page_31": ". Gp ESE\nStandard Solution:\n\nSharded locks\nclo lisse by\n\nDB Ay Bi CD\n\n@D Xo Y1 Vz Z2Wa* *\n\n \n\n \n\n \n\nCould grab multiple locks.\n\nCould result in deadlock, if allowed to wrap around.\n\nNot very clean for our case: Need extra phantom segment to\nstop deadlock.\n\nHacky. Slow. Lots of contention.",
    "Page_32": ". Gp ESE\nContention: Remove",
    "Page_33": ". Gp ESE\nContention: Remove\n\nFirst part is normal search.",
    "Page_34": ". Gp ESE\nContention: Remove\n\nFirst part is normal search.\n\nWhen you find the entry\ndelete it, move everyone\nback by 1.",
    "Page_35": ". Gp ESE\nContention: Remove\n\nFirst part is normal search.\n\nWhen you find the entry\ndelete it, move everyone\nback by 1.\n\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\nNull.",
    "Page_36": ". Gp ESE\nContention: Remove\n\nFirst part is normal search.\n\nInitial table.\nWhen you find the entry\n\ndelete it, move everyone GF Xo. Y, | V>| Z2'W>\nback by 1. .\n\n \n\n \n\nWe want to delete Y.\n\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\nNull.",
    "Page_37": ". Gp ESE\nContention: Remove\n\nFirst part is normal search.\n\nInitial table.\n\n \n\nWhen you find the entry\ndelete it, move everyone GF Xo. Yi V> Z> W>\nback by 1.\n\n \n\nWe want to delete Y.\n\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\n\nY deleted.",
    "Page_38": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\nContention: Remove\n\nFirst part is normal search.\n\nWhen you find the entry\ndelete it, move everyone\nback by 1.\n\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\nNull.\n\nGreat source of contention.\n\nInitial table.\n\n@D Xo Yr V2 Z2W2\n\n \n\n \n\nWe want to delete Y.\n\nY deleted.\n\nD Xo",
    "Page_39": "Problems with creating ©\"\nConcurrent Robin Hood",
    "Page_40": "Problems with creating ©\"\nConcurrent Robin Hood\n\ne Lots of moving parts. Performance problem.",
    "Page_41": "Problems with creating ©\"\nConcurrent Robin Hood\n\ne Lots of moving parts. Performance problem.\ne An insert can trigger a global table reorganisation.",
    "Page_42": "IRISH RESEARCH COUNCIL\n\nProblems with creating ©\"\nConcurrent Robin Hood\n\ne Lots of moving parts. Performance problem.\n\ne An insert can trigger a global table reorganisation.\n\ne Cyclic lock grabbing. If locks are sharded, deadlock is\npossible.\n\ne Huge contention on Remove.",
    "Page_43": "IRISH RESEARCH COUNCIL\n\nProblems with creating ©\"\nConcurrent Robin Hood\n\ne Lots of moving parts. Performance problem.\n\ne An insert can trigger a global table reorganisation.\n\ne Cyclic lock grabbing. If locks are sharded, deadlock is\npossible.\n\ne Huge contention on Remove.\n\nPossible Solutions\n\ne Bespoke non-blocking solution\n\ne Transactional Memory\n\ne K-CAS (Multi-word compare and\nSwap)",
    "Page_44": "Issues with bespoke By nsusssesca cones",
    "Page_45": "Issues with bespoke By nsusssesca cones\n\n1. Use of dynamic memory, ruins cache locality. Slow.",
    "Page_46": "Issues with bespoke\n\n1. Use of dynamic memory, ruins cache locality. Slow.\n\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.",
    "Page_47": "Issues with bespoke\n\n1. Use of dynamic memory, ruins cache locality. Slow.\n\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.\n\n3. End up reimplementing K-CAS. Why not just use kK-\nCAS?",
    "Page_48": "Issues with bespoke By nsusssesca cones\n\n1. Use of dynamic memory, ruins cache locality. Slow.\n\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.\n\n3. End up reimplementing K-CAS. Why not just use kK-\nCAS?\n\nMethod Chosen: K-CAS\n\nK-CAS is a multi-word compare-and-swap\nprimitive. Each table operation is\ndescribed as one large K-CAS.",
    "Page_49": "Our Solution: Qyreseesesans\nSharded timestamps\n\nToT tet Ty\n\nGAR.\n\nSimilar to lock-base sharding. Groups of timestamps protect the\ntable.\n\n7) Xo Y: V2 Z,Wp* °°\n\n \n\n \n\n \n\nEach relocation operation increments the timestamp. Except\nrelocations can be done in bulk.",
    "Page_50": "K-CAS without > HSLAESEORCL CONE\ntimestamps\n\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.",
    "Page_51": "K-CAS without Pa\ntimestamps\n\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\n\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_52": "k- CAS without Try find V. & an Ghemha Meum Tha Se eietG\n\nVo\ntimestamps D Xp Y,\\V2\\Z,W,\n\n \n\n \n\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\n\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_53": "K-CAS without\ntimestamps\n\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\n\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.\n\nTry find V. & es\nVo\n\nD Xo Yr V2 Z2 Wa\n_V,\nD Xo Yr V2 Z2W2",
    "Page_54": "k- CAS without Try find V. & an Ghemha Meum Tha Se eietG\n\n \n\n \n\n \n\n \n\nVo\ntimestamps |\nP D Xo Ys V2 Z2 Wo\n—>V,\nSay our K-CAS solution just Xx Y Vv Z Ww |\nencapsulates every modifying O a\noperation {Add, Remove} into a\nK-CAS operation. Before check V get interrupted.\n__ > U,\nReaders of the table may GF X, Y; V2 Z,W;>\n\n \n\nmiss entries that are moved\nbackwards by remove.",
    "Page_55": "k- CAS without Try find V. & an Ghemha Meum Tha Se eietG\n\n \n\n \n\n \n\n \n\nVo\ntimestamps |\nP D Xo Ys V2 Z2 Wo\n—>V,\nSay our K-CAS solution just Xx Y Vv Z Ww |\nencapsulates every modifying O a\noperation {Add, Remove} into a\nK-CAS operation. Before check V get interrupted.\n__ > U,\nReaders of the table may GF X, Y; V2 Z,W;>\n\n \n\nmiss entries that are moved\n\nbackwards by remove. Delete Y. Move V back. Find Z, exit.\n\nV2\n\nPX VUAWD >",
    "Page_56": "An Chomhairle um Thaighde in Eirinn\n\nDB Xo V1 V2 27 D+ ++ GP Ao Bi C2 WD\n\n \n\n \n\nGoing to delete Y from table, with concurrent reader.",
    "Page_57": "O Ur S O | U ti on: Exam 0 | e Gp ESSE, Sa\n\n \n\nAS tesTy\n\nD%rHV.2B Bu aanw®\n\nDesc\n\n \n\n \n\n \n\n \n\n \n\n&YY V&VV Z &ZZ OE) 4 5 8&5 6\n\n \n\nUgly little array is a deletion descriptor.\n\nMoves items. Increments two timestamps.",
    "Page_58": "An Chomhairle um Thaighde in Eirinn\n\nOur Solution: Example @\n\n5 6 +++ Ty\n\n \n\n \n\nDO Xo Vi 41 AO -°° BG A Bi C, DD\n\n \n\n \n\nReader misses V, due to deletion of Y.\n\nReader sees timestamp change, restarts operation.",
    "Page_59": "An Chomhairle um Thaighde in Eirinn\n\nOur Solution: Benefits ?",
    "Page_60": "An Chomhairle um Thaighde in Eirinn\n\nOur Solution: Benefits ?\n\nRelatively simple design, close to the sequential\nalgorithm.",
    "Page_61": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\nOur Solution: Benefits\n\nRelatively simple design, close to the sequential\nalgorithm.\n\nNo dynamic memory, great cache\nperformance. Minimal memory overhead.\n\nSimilar amount of CAS operations as bespoke dynamic memory\nsolution.",
    "Page_62": "Our Solution: Benefits Gp ESSE, Sa\n\nRelatively simple design, close to the sequential\nalgorithm.\n\nNo dynamic memory, great cache\nperformance. Minimal memory overhead.\n\nSimilar amount of CAS operations as bespoke dynamic memory\nsolution.\n\nUse of K-CAS allows for thread collaboration. Well defined non-\nblocking progress guarantees.\n\nBulk relocation greatly reduces contention. Fast.",
    "Page_63": "An Chomhairle um Thaighde in Eirinn\n\nOur Solution: Correctness ”",
    "Page_64": "IRISH RESEARCH COUNCIL\n\nAn Chomha i\n\nirle um Thaighde in Eirinn\n\nOur Solution: Correctness ”\n\nSimple design means simple proof. Correctness is\ninformally argued.",
    "Page_65": "IRISH RESEARCH Pon\n\nOur Solution: Correctness\n\nSimple design means simple proof. Correctness is\ninformally argued.\n\nEvery modifying operation is a K-CAS operation. Cannot be\nseen midway.\n\nEvery reader must remember every timestamp seen.\n\nBefore any actions attempts to take effect they re-read\ntimestamps. If any discrepancies are seen, retry\noperation.",
    "Page_66": "An Chomhairle um Thaighde in Eirinn\n\nOur Solution: Progress “©",
    "Page_67": "haighde in Eirinn\n\nOur Solution: Progress “©\n\nSolution is obstruction-free/lock-free. Obstruction-free\nContains, lock-free Add and Remove.",
    "Page_68": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\nOur Solution: Progress\n\nSolution is obstruction-free/lock-free. Obstruction-free\nContains, lock-free Add and Remove.\n\nEvery operation checks timestamps before the operation\ncompletes. Timestamps are coarse So operations can impede\neach other.\n\nThe impeding of Contains means potentially no Contains\nwill pass, but at least one Add or Remove will get through.",
    "Page_69": "Gp ESE\nBenchmarking setup",
    "Page_70": "Benchmarking setup\n\nHardware\n4 x Intel® Xeon® CPU E7-8890 v3, 18 cores each, 2\nthreads per core, 144 threads in total\nHyperThreading avoided until the end\nPAPI used to measure various CPU artefacts\nnumactl to control memory allocation",
    "Page_71": "Benchmarking setup\n\nHardware\n\ne 4x Intel® Xeon® CPU E7-8890 v3, 18 cores each, 2\nthreads per core, 144 threads in total\n\ne HyperThreading avoided until the end\n\ne PAPI used to measure various CPU artefacts\n\n¢ numactl to control memory allocation\n\nSoftware\n\ne Microbenchmark measuring operations per\nmicrosecond\n\ne Anumber of strong performing concurrent hash tables\n\ne Four load factors of 20%, 40%, 60%, and 80%\n\ne Two read/write workloads of 10% and 20%",
    "Page_72": "& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\nTables - Explainer",
    "Page_73": "pie RESEARCH COUNCIL\n\nAn Chomhairle um Thaighde in Eirinn\ne@\n\nTables - Explaii ier\n\n¢ Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nSeparate chaining.",
    "Page_74": "Tables - Explainer\n\n¢ Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\n\nSeparate chaining.\ne Lock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.",
    "Page_75": "pie RESEARCH COUNCIL\n\nAn Chomhairle um Thaighde in Eirinn\ne@\n\nTables - Explaii ier\n\n¢ Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nSeparate chaining.\n\ne Lock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.\n\ne Separate Chaining [Maged Michael; 2003]: Per-bucket lock-free\nlinked lists.",
    "Page_76": "pie RESEARCH COUNCIL\n\nAn Chomhairle um Thaighde in Eirinn\ne@\n\nTables - Explaii ier\n\nHopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nSeparate chaining.\n\nLock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.\n\nSeparate Chaining [Maged Michael; 2003]: Per-bucket lock-free\nlinked lists.\n\nLock-Elision Robin Hood. Serial algorithm with hardware\ntransactional lock-elision wrapper\n\nK-CAS Robin Hood Hash. kK-CAS with sharded timestamps.",
    "Page_77": "Performance 20%/40%\n\n600\n\nTotal Ops / us\nWw\noO\nOo\n\nTotal Operations per microsecond.\n\n   \n\n20% LF w update rate: 10%\n\n \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n \n\n012340918 36 54 #72 #290 108 126 144\nThread Count\n\n20% LF w update rate: 20%\n\n \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n \n\n012 3 4 9 18 36 54 72 90 108 126 144\n\nThread Count\n\n600\n\nTotal Ops / us\nWw\noO\nOo\n\n \n\n& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\n40% LF w update rate: 10%\n\n \n\n \n\n \n\n  \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n123 4 9 18 36 54 72 90 108 126 144\n\nThread Count\n\n40% LF w update rate: 20%\n\n \n\n \n\n  \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n012340918 36 54 #72 #290 108 #126 144\nThread Count\n\nNumber of threads.",
    "Page_78": "Total Operations per microsecond.\n\nPerformance 60%/80%\n\nTotal Ops / us\n\nTotal Ops / us\n\n600\n\n500\n\n400;\n\n300}\n\n200\n\n100}\n\n450\n\n400;\n\n350\n\n300;\n\n250;\n\n200}\n\n150\n\n100}\n\n50;\n\n0\n\n60% LF w update rate: 10%\n\n \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n \n\n012340918 36 54 #72 #290 108 126 144\nThread Count\n\n60% LF w update rate: 20%\n\n \n\n \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n \n\n012340918 36 54 #72 #290 108 126 144\nThread Count\n\n \n\nTotal Ops / us\n\nTotal Ops / us\n\n600\n\n500\n\n400;\n\n300}\n\n200\n\n100}\n\n450\n\n400;\n\n350\n\n300;\n\n250;\n\n200}\n\n150\n\n100}\n\n50;\n\n0\n\n& IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\n\n80% LF w update rate: 10%\n\n \n\n   \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n12 3 4 9 18 36 54 72 90 108 126 144\n\nThread Count\n\n80% LF w update rate: 20%\n\n \n\n   \n\n \n\nK-CAS RH\nLocked HS\nLock-Free LP\nMaged Michael\nTransactional RH\n\n012 3 4 9 18 36 54 72 90 108 126 144\n\nThread Count\n\nNumber of threads.",
    "Page_79": "Performance Summary",
    "Page_80": "Performance Summary\n\nRobin Hood scales best in almost all workloads.\nOtherwise very competitive with Hopscotch Hashing.\n\nComfortably ahead (10%) with 10% update load.\nMore competitive (5%) with 20% updates.",
    "Page_81": "Performance Summary\n\nRobin Hood scales best in almost all workloads.\nOtherwise very competitive with Hopscotch Hashing.\n\nComfortably ahead (10%) with 10% update load.\nMore competitive (5%) with 20% updates.\n\nRobin Hood dominates other concurrent hash tables.\nGap narrows during Hyperthreading.\n\nTransactional Robin Hood scales very strongly until\nHyperthreading. Then it dies and never recovers.",
    "Page_82": "Conclusion\n\nFirst linearisable concurrent variant of Robin Hood Hashing.\n\nStrong application of new K-CAS developments.\nCompetitive performance compared to state of the art\nconcurrent hash tables.\n\nFuture Work\n\nExtended Robin Hood work (different timestamp\nencodings/placements, cache aware, vectorised, various\nlock-based solutions)\n\nYahoo benchmark (YCSB)",
    "Page_83": "Thank you!\n\nQuestions and\nComments?"
}
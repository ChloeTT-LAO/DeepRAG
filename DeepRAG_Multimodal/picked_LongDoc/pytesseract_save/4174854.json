{
    "Page_1": "= ECHELON\n\nIntroduction to the LOnWorks® Platform\nRevision 2\n\n \n\nay\nay\nww ®\n\n078-0183-01B",
    "Page_2": "Echelon, LON, LonWorks, LonMark, NodeBuilder, , LonTalk, Neuron, 3120, 3150,\nLNS, i.LON, , ShortS tack, LonMaker, the Echelon logo, and are trademarks of\nEchelon Corporation registered in the United States and other countries. LonSupport,\n,, OpenLDV, Pyxos, LonScanner, LonBridge, and Thinking Inside the Box are\ntrademarks of Echelon Corporation. Other trademarks belong to their respective\nholders.\n\nNeuron Chips, Smart Transceivers, and other OEM Products were not designed for\nuse in equipment or systems which involve danger to human health or safety or a risk\nof property damage and Echelon assumes no responsibility or liability for use of the\nNeuron Chips in such applications.\n\nParts manufactured by vendors other than Echelon and referenced in this document\nhave been described for illustrative purposes only, and may not have been tested by\nEchelon. It is the responsibility of the customer to determine the suitability of these\nparts for each application.\n\nECHELON MAKES AND YOU RECEIVE NO WARRANTIES OR CONDITIONS,\nEXPRESS, IMPLIED, STATUTORY OR IN ANY COMMUNICATION WITH YOU,\nAND ECHELON SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF\nMERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n\nNo part of this publication may be reproduced, stored in a retrieval system, or\ntransmitted, in any form or by any means, electronic, mechanical, photocopying,\nrecording, or otherwise, without the prior written permission of Echelon Corporation.\n\nPrinted in the United States of America.\nCopyright ©1999-2009 by Echelon Corporation.\n\nEchelon Corporation\nwww.echelon.com",
    "Page_3": "Contents\n\nContents .........cccccsessssscccceesssssnsceccessessneuececeesssnnaeeeceesessnanseeeccesensnaseeeeeeesssnnaeeeceeseessnaeeens 3\nChapter 1. Tntroduction.........ccccsccccssccsssscccesscccssscecsssesecseeecsesssscsesaeecsesseeesesaeeees 5\nOverview\n\n \n\nThe Market Value of Networked Control Systems\nLONWoRKS Networks...\nImplementing a Control Network..\n\nCost-Effective Network Wiring...\n\nCompatible Devices\n\nEffective System Design ...\n\nStandard Network Management...\n\nStandard Network Tools\n\nStandard Device Configuration..\n\nStandard IP Support\nGetting More Information ....\n\n \n  \n \n \n \n \n \n  \n \n \n \n\nChapter 2. Platform Component ............c:ccccsssccsesssccsesscccesesecessseeceeseseeseaeesseeaaees 14\nBuilding a Platform\nSmart Transceivers..\nDevelopment Tools...\nRouters\nNetwork Interfaces ..\nSmart Servers\nNetwork Management.\nNetwork Tools\n\nLonMaker Integration Tool\nLonScanner Protocol Analyzer ...\n\nChapter 3. The Control Network Protocol ............c:cccccsssccessscccsesseccesseecessseecesaees 25\nISO/IEC 14908-1 Control Network Protocol .\nCNP Layers......ceceseeeneeee\nCNP Data Transmission\nCNP Limits...\nLayer 1—Physical Layer ...\nChannel Types\nTP/FT-10 Free Topology Twisted Pair.\nPL-20 Power Line....\nLayer 2—Link Layer\nMedia Access\nPriority\nFrame Format...\nLayer-2 Performance\nLayer 3—Network Layer\nNaming and Addressing...\nAddressing Formats.\nAddress Table ....\nRouters.....\n\n \n\n \n\n \n \n\n \n\n \n\n \n \n \n  \n \n  \n \n \n \n \n \n  \n  \n  \n \n \n \n \n\nContents 3",
    "Page_4": "Physical Layer Repeaters\nDatagram Format\nLayer 4—Transport Layer...\nMessage Services\nCNP Timers ........\nTransport Packet Format .\nLayer 5—Session Layer.....\nRequest/Response\nAuthentication\nSession Packet Format...\n\n \n\n \n \n \n \n \n \n \n \n\nLayer 6—Presentation Layer..\nMessages\nNetwork Variables\nPresentation Packet\n\nLayer 7—Application Layer ....\nApplication Configuration....\nApplication Specification\n\n \n\nAppendix A. Layer 1 and 2 Advanced Topics....\nLayer 1 Neuron Communications Interface\nLayer 2 Advanced Topics...\n\nInterpacket Gap........\nCollision Detection ...\nCollision Resolution..\nOscillator Accuracy...\nPreamble Length\n\n \n \n \n \n \n \n \n \n\nContents 4",
    "Page_5": "Introduction\n\nChapter 1.\nIntroduction\n\nThis chapter presents an introduction to the LONWORKS\nplatform and LONWoRKS networks, and provides an\noverview of how to implement a control network.",
    "Page_6": "Overview\n\nAcross a broad range of products and systems—from factory automation systems to\nbuilding controls to embedded machine controls to consumer electronics—there is a\ntrend away from centralized control systems. Manufacturers are building products\nbased on open standard control network architectures that feature intelligent\ndistributed control using a standard communication protocol and readily available\noff-the-shelf low-cost firmware and transceivers for communication. These open\nsolutions ensure reliability, flexibility, lower cost, and faster development, and\nprovide enhanced energy monitoring and control. This trend is made possible with\nthe emergence of control networks—the low-cost alternative to centralized control\nand proprietary communication systems.\n\nIn a centralized control system, remote sensors provided feedback to a\nmicrocontroller, programmable logic controller, or other proprietary controller that in\nturn sends control impulses to relays and other actuators. Each centralized control\nsystem has its own unique input/output and processing requirements. Large,\ncomplex control systems may be partitioned into two or more centralized systems\nwhose controllers must communicate continuously. These controllers and their\nattached systems act as islands of automation, with artificially limited\ncommunication between the islands. Whether partitioned or not, these control\nsystem are expensive to develop, costly to install, and difficult to expand.\n\nIn a control network, intelligent control devices communicate using a common\nprotocol. Each device in the control network contains embedded intelligence that\nimplements the common protocol and performs control functions. In addition, each\ndevice includes a communication transceiver that couples the device with the\ncommunications medium.\n\nDevices in a control network may each perform a simple task, or may be more\ncomplex devices that perform a multitude of tasks. Devices may be simple sensors\nand actuators such as proximity sensors, switches, motion detectors, or relays.\nDevices may also be complex supervisory control and data acquisition systems that\nmonitor other devices on the network and provide supervisory control of the entire\nsystem. Although individual devices may execute simple tasks, the system may\nperform a complex control application, such as running a manufacturing line or\nautomating a building.\n\nControl networks require a different type of networking platform than data\nprocessing or office automation applications. Control networks are distinguished by\nsmall messages that are frequently transmitted and that require high reliability with\nlow overhead.\n\nFor example, a process control system may have a number of pressure and\ntemperature sensors that provide pressure and temperature data to heater\ncontrollers. Each heater controller uses the input to set the power output to the\nheating elements. This system does not move megabytes of data, but does require\nreliable delivery of the temperature and pressure updates to ensure correct\noperation.\n\nMany manufacturers understand the benefits of control networks and have\nattempted to solve these problems by creating their own control network platform.\nManufacturers who develop proprietary control networks have a similar problem to\n\nIntroduction 6",
    "Page_7": "manufacturers who develop communicating centralized controls systems—they find\nthat most of their engineering effort is spent implementing and testing\ncommunications systems, rather than developing control features and applications\nthemselves. Ultimately, the high cost of this design approach has limited the market\nfor control systems.\n\nWith thousands of application developers and millions of devices installed worldwide,\nthe LONWoRKS platform is the leading open solution for building and home\nautomation, industrial, transportation, and public utility control networks. The\nLONWORKS platform is accelerating the trend away from proprietary control schemes\nand centralized systems by providing interoperability, robust technology, faster\ndevelopment, and economies of scale. Distributing the processing throughout the\nnetwork using an open control networking protocol and providing easy access to\nevery device lowers the overall installation and life cycle costs, increases reliability\nby minimizing single points of failure, and providing the flexibility to adapt the\nsystem to a wide variety of applications. For example, in the building control\nindustry, LONWORKS networks are used to provide a common infrastructure for all\nbuilding systems. This allows the building automation system designer to eliminate\nexcessive vertical integration, which is the often the reason for vertical isolation.\n\nThe LONWORKS platform is based on the following concepts:\n1. Control systems have many common requirements regardless of application.\n\n2. A networked control system is significantly more powerful, flexible, and scalable\nthan a non-networked control system.\n\n8. Networked control systems can leverage the control system foundation to easily\nevolve to address new applications, markets, and opportunities.\n\n4, Businesses can save and make more money with control networks over the long\nterm than they can with non-networked control systems.\n\n \n\nThe Market Value of Networked Control S ystems\n\nMany controls applications are following the same evolutionary path followed by the\ncomputer industry. The path is from proprietary closed architectures to open\nstandard architectures, and from purpose built implementations with little room for\ngrowth to standard platforms with the flexibility to evolve to serve new applications\nnot envisioned by the original designers. This path has enabled the computer\nindustry to grow to exceed the expectations of the original computer designers, and\nthe same will happen for controls.\n\nAn example of the evolution from purpose built to general purpose in the computer\nindustry is the evolution of word processing. The first gold standard for word\nprocessing was Wang Computer. They offered a purpose-built word processor which\nquickly replaced the electric typewriters used before the advent of word processing.\nThe solution was superior to electric typewriters, but ultimately purpose-built word\nprocessors were replaced by general-purpose networked personal computers that\nprovided not only a superior solution for word processing, but also served as a\nplatform for many applications not envisioned by Wang. Users of the new general\npurpose solution benefited from word processing, spreadsheet analysis, and more—\ndecoupling the hardware from the application and setting the working model for all\nnetworks to come.\n\nIntroduction 7",
    "Page_8": "An example of the evolution from purpose built to general purpose in the controls\nindustry is the evolution of lighting controls. A typical lighting control system for\nlighting a city is typically optimized for longevity, reliability, and cost. A typical\npurpose-built lighting control system relies on dedicated communications, dedicated\nuser controls, and a dedicated monitoring system (if the system supports monitoring).\nNon-lighting functions such as energy management, 911 emergency response, or\ndark sky management have seldom, if ever, been incorporated into the function of a\nstreetlighting system due to the cost and complexity of integrating the new\ncapabilities.\n\nThe alternative to a purpose-built lighting control system is a networked control\nsystem for streetlighting. The network that provides access to the lights is the city’s\nexisting communications infrastructure—for example the city’s wide-area network or\nmetro Wi-Fi service. The segment controllers manage lights and act as an interface\nto the ctiy’s wide-area network; however, they are also general purpose connectivity\nproducts. Any networked product or sensor sharing the common technology of the\nstreetlighting system can be added to the segment controller. This means that the\nstreetlight is only the first end-point on the network, others can be added later—\npreserving a city’s investment in the streetlighting system. For example, after the\nsystem is installed, pedestrian sensors could be added to extend the functionality of\nthe system and provide actionable data to the system—lights could brighten when a\npedestrian is detected at a crosswalk. Finally, within the lights themselves,\nembedded communications distributes the intelligence to the end-point. Doing so\nallows the lights to act independently of, or in cooperation with external information\nand events. In the case of our lighting system, were the city’s WAN to fail, there\nwould be no impact on the streetlighting. Individual lights would still respond to\nlighting, time, or environmental conditions at the local level. Were pedestrian\nsensors in place, lights would still balance their output. Also, if the city enabled their\nparks and recreation reservation software to send time and location data to the\nstreetlighting system, lights could brighten at the beginning and end of night\ngames—providing additional safety and security.\n\nThe networked control system provides other benefits as well. City maintenance and\noperations personnel can view real-time and historical health data, enabling them to\nprovide improved customer service, reduce downtime, eliminate excess spare part\ninventory, and reduce maintenance costs.\n\nAll of these benefits are achieved because the intelligence is at the end-point of the\nnetworked control system, the system is responsive to applications and external\ninformation, and the networked control system is built on a platform that can easily\nevolve to support new applications and services.\n\nThis document is an introduction to the basics of the LONWORKS platform. It begins\nwith an overview of networks and protocols, provides an overview of the components\nof the LONWoRKS platform, and highlights the technical aspects of the ISO/IEC\nstandard Control Network Protocol (CNP). The remaining sections in this chapter\nprovide an overview of LONWORKS networks and provide an overview of how to\nimplement a control network. Many of the technical details discussed in this\ndocument are handled automatically by the protocol, the network operating system,\nor network tools. The automatic handling of the lower level details of device\ncommunication is, in fact, one of the great strengths of the LONWORKS platform.\n\nIntroduction 8",
    "Page_9": "LonWoRKS Networks\n\nThe underlying concept of the LONWORKS platform is that the information in a\nsensing, monitoring, or control application is fundamentally the same across markets\nand industries. For example, a garage door and a passenger ferry door send\nessentially the same information—closed or open. A second concept underlying the\nplatform is the knowledge that networks, regardless of their function, increase in\npower as nodes are added. Metcalf’s Law works in data networks and in control\nnetworks.\n\nIn many ways, a LONWORKS network resembles a traditional data network. Data\nnetworks consist of computers attached to various communications media, connected\nby routers, which communicate with one another using a common protocol such as\nTCP/IP. Data networks are optimized for moving large amounts of data, and the\ndesign of data network protocols assumes that occasional delays in data delivery and\nresponse are acceptable. Even though data networks are based on open protocols,\nmost manufacturers do not choose to develop their own data networking components\nsuch as transceivers, routers, and network operating systems—it is typically more\ncost effective to buy these components from a reliable supplier.\n\nAs shown in Figure , control networks contain similar components to data networks,\nbut the control network components are optimized for the cost, performance, size,\nand response requirements of control. Control networks allow networked systems to\nextend into a class of applications where data networking technology is not\nappropriate. Manufacturers of control systems and devices are able to shorten their\ndevelopment and engineering time by designing LONWORKS components into their\nproducts. The result is cost-effective development and consistency that allows\n\ndevices from multiple manufacturers to be able to communicate.\n\nOpsrater Operas\nInforface Inforfase\n\n \n\nSupervisory Level\nSeta\neC\ntra\nFleld Level\nCT a)\nered ere\nOTe CTs\ncr”\nSensor Sensor Mp Actuator i Actuator Sensor SO eee fe acs\n\nFigure 1 LonWorks Control Network\n\nLONWORKS networks range in sophistication from small networks embedded in\nmachines to large networks with thousands of devices controlling fusion lasers, paper\nmanufacturing machines, and building automation systems. LONWORKS networks\n\nIntroduction 9",
    "Page_10": "are used in buildings, trains, airplanes, factories, and hundreds of other processes.\nManufacturers are using open, off-the-shelf chips, operating systems, and parts to\nbuild products that feature improved reliability, flexibility, system cost, and\nperformance.\n\nEchelon manufactures a wide variety of LONWORKS products to help developers,\nsystem integrators, and end-users implement LONWORKS networks. These products\nprovide a complete LONWORKS solution including development tools, network\nmanagement software, power line and twisted pair transceivers and control modules,\nnetwork interfaces, routers, controllers, technical support, and training.\n\nImplementing a Control Network\n\nUnderstanding the power of the LONWoRKS platform and leveraging that power by\napplying it to all control functions is the key to providing the most cost-effective\nsystem control solution. Leveraging is achieved by eliminating the walls between\ncontrol systems and creating a general purpose networked control system that can\nevolve with changing market requirements. A networked control system leverages a\ncommon physical and logical infrastructure to provide holistic system control that\ncan evolve to meet new opportunities and customer needs.\n\nIn this case, the entire system is controlled by a single control infrastructure. A\nstandard wiring scheme allows devices to easily access and share communication\nmedia. Standard network management services make the network easy to set up,\nmonitor, and control while ensuring compatibility between devices and tools from\ndifferent manufacturers. Different network control systems may have different\nneeds, however, and different users may have training in different networking tools.\nThe network management standard enables multiple users to use different tools on\nthe same network at the same time. Finally, an application-level standard for the\nexchange of information between devices exists so devices can easily communicate.\n\nThe following sections provide a checklist for designing system-wide open control\nsystems. Following is a summary checklist:\n\nCost-effective network wiring\nCompatible devices\n\nEffective system design\nStandard network management\n\nStandard network tools\n\n \n\nCost-Effective Network Wiring\n\nThe base for a networked control system is cost-effective wiring. Many control\nsystems are created with costly point-to-point wiring or wiring that requires costly\nconnectors, difficult to install network topologies, or costly hubs and switches. The\nmost cost-effective wiring for commercial and industrial networks is a simple pair of\ntwisted-pair wires that can be wired in any topology, is polarity-insensitive, and only\nrequires a single terminator. The most cost-effective wiring for home, utility, outdoor\nlighting, and transportation networks is to use existing power lines—enabling a\nnetworked control system to be installed with no new wires.\n\nIntroduction 10",
    "Page_11": "Compatible Devices\n\nIt is crucial that the devices installed on the common infrastructure share\ninformation without effort. So the next checklist item is designing and selecting\nproducts adhering to a common communication guideline. This is best achieved\nwithin the LONWORKS platform by choosing products that have been certified by\nLONMARE® International. See the LONMARK Web site at www.lonmark.org for more\ninformation.\n\n \n\nEffective System Design\n\nJust as a control system implemented on a monolithic processor must be designed\ntaking into account the processing capability of the processor, a networked control\nsystem must be designed taking into account the processing capability of the\nnetwork. Network processing power is typically measured in bandwidth expressed in\npackets per second, and the intelligent network wiring selected for the first checklist\nitem determines the available bandwidth. Effective system design ensures that each\ndevice in a control network uses its appropriate share of bandwidth, and partitions\nlarge networks into multiple subnetworks to increase the total available bandwidth.\n\n \n\nStandard Network Management\n\nStandard network management provides the necessary network services and\npublished interfaces for the infrastructure. These services allow multiple tools and\napplications from multiple vendors to coexist on the network. More importantly, it\nallows the various tools to share the network data. Two solutions are available for\nLONWORKS networks—the LNS® Network Operating System for commercial,\nindustrial, and transportation systems, and Interoperable Self-Installation (ISI) with\noptional LonBridge™ Server for home systems.\n\nIn the new open marketplace many manufacturers do not want to create entire\ncontrol systems. These manufacturers simply wish to produce best in class devices.\nA standard network management solution like LNS or ISI allows the manufacturers\nof these devices to concentrate on their device and not be concerned about creating an\nentire control system. This reality, combined with the market presence of LNS and\nISI, has caused a proliferation of manufacturers to produce best in class LONWORKS\nproducts for use in open systems. These products are the network tools and open\ndevices described below.\n\n \n\nStandard Network Tools\n\nNetwork tools include network integration tools as well as HMI application\ndevelopment tools, data loggers, and other applications with a system-wide view.\nNetwork tools can be developed or purchased—in either case they must be\ncompatible with the network management solution selected in the previous checklist\nitem. It is possible to choose any tool for any given project, and it is also possible to\ncombine tools on the same project, as long as they are based on the same network\nmanagement solution. Tools can be chosen based on functionality and usability\nrather than who made the physical devices. For commercial and industrial network\nintegration tools, be sure to select tools that support the network operating system\n\nIntroduction 11",
    "Page_12": "plug-in standard, that fully support LONMARK functional profiles and configuration\nproperties, and that make it easy to reuse parts of your network design. These\nfeatures are provided by the LonMaker® Integration Tool, which is the most popular\nnetwork integration tool for open commercial and industrial LONWORKS networks.\n\n \n\nStandard Device Configuration\n\nTo reduce system cost, a device must not only support standard communication, it\nmust also support a standard interface for configuration. Again, the LONMARK logo\non the device is the first place to look. The LONMARK guidelines provide for the\nphysical layer requirements of devices as well as the common functional profiles,\ndata types, configuration capabilities, and installation methodologies.\n\nFor simple devices, it may be adequate for product manufacturers to simply\ndocument the configuration interface for their device. However, it’s often better, and\nrequired for complex devices, if they encapsulate the knowledge into a plug-in that\ncan be run inside one of the network integration tools. The plug-in must be based on\nthe selected network management solution. This allows tools from other\nmanufacturers to install and configure the device quickly and easily.\n\n \n\nStandard IP Support\n\nThe Internet Protocol (IP) suite is the standard on which the Internet is built. A\ncontrol network must often provide for encapsulation of the control system messages\nor packets into IP packets. Messages can then be passed around the world without\ntranslation into foreign protocols. The cost of transmission is minimal and the ability\nto leverage existing infrastructure is practically limitless. IP support for a\nLONWORKS network can be provided either by an LNS Server, zLON SmartServer, or\nLonBridge Server that is attached to both the LONWORKS network and the IP\nnetwork.\n\nGetting More Information\n\nThis book is organized into three chapters. Chapter 1 introduced the LONWORKS\nplatform and its benefits. Chapter 2 describes the components that make up the\nLONWORKS platform and describes how these components can accelerate\ndevelopment of LONWORKS devices and systems. Chapter 3 describes the ISO/IEC\n14908-1 Control Network Protocol (CNP) that is the foundation of the LONWORKS\nplatform . Chapter 3 also gives a detailed look at layers 1 through 7 of the protocol.\nDevelopers will mostly deal with layers 6 and 7, but will also be interested in the\ntransceiver information described in layer 1. System designers and integrators will\nbe interested in the same layers as developers, and will also be interested in\nunderstanding the options provided by layer 4.\n\nThe addendix provides details on layer 1 that will only be of interest to transceiver\ndesigners.\n\nFor more information on the LONWORKS platform, see the documentation available\nat www.echelon.com/docs.\n\nIntroduction 12",
    "Page_13": "Introduction\n\n13",
    "Page_14": "Platform Components\n\nChapter 2.\nPlatform Components\n\nThis chapter describes the components that make up the\nLONWORKS platform, and describes how these components\nwork together to reduce development, production,\ninstallation, and system costs.\n\n14",
    "Page_15": "Building a Platform\n\nEchelon Corporation invented the LONWoRKS platform and the ISO/IEC 14908-1\nControl Network Protocol. Thousands of control manufacturers currently\nmanufacture LONWORKS devices. A partial listing of these devices is available at\n\nwww.lonmark.org/products.\n\nEchelon began the development of the LONWoRKS platform and the Control Network\nProtocol in 1988. This initial vision continues to drive the company forward; first, by\ncreating a standard, cost effective method to allow inexpensive control devices to\ncommunicate with each other effortlessly. Then, by using the standard\ncommunication capabilities to allow devices from multiple vendors to easily\ninteroperate on the same network. Echelon understood that simply developing a\nprotocol specification would not achieve the goal of multi-vendor systems. It was\nnecessary to build a cost-effective, standard method through which the protocol could\nbe used and supply all the necessary development tools and networking products.\n\nThe overriding goal of the LONWoRKS platform is to make it easy and cost effective to\nbuild open control systems. Echelon developed the LONWoRKS platform believing\nthere were three fundamental issues that had to be addressed to create interoperable\nproducts in the control market. First, a protocol optimized for control networks, but\ngeneric in its ability to work with different types of controls had to be developed.\nSecond, the cost to incorporate and deploy this protocol in devices had to be\ncompetitive. Third, the protocol had to be introduced in such a way that\nimplementation would not vary by vendor as this would destroy interoperability.\n\nIn order to address all of these issues effectively, Echelon Corporation set out to\ncreate a complete platform for designing, creating, and installing intelligent control\ndevices. The first step was achieved through the creation of the ISO/IEC 14908-1\nControl Network Protocol, which is described in Chapter 3, The Control Network\nProtocol. Addressing the cost and deployment issues meant finding an economical\nway to provide implementations of the protocol to customers along with development\ntools. The goal of the LONWoRKS platform is to provide a well-integrated, optimally\ndesigned, and economical platform for creating smart devices and networks. This\nchapter describes the following components that make up the LONWORKS platform:\n\nSmart Transceivers\nDevelopment Tools\nRouters\n\nNetwork Interfaces\nInternet Servers\nNetwork Management\nNetwork Tools\n\nSmart Transceivers\n\nIn order to achieve economical and standardized deployment, Echelon designed the\nNeuron® core. The Neuron name was chosen to point out the similarities between\nproper network control implementation and the human brain. There is no central\npoint of control in the brain. Millions of neurons are networked together, each\n\nPlatform Components 15",
    "Page_16": "providing information to others through numerous paths. Each neuron is typically\ndedicated to a particular function, but loss of any one does not necessarily affect the\noverall performance of the network.\n\nThe Neuron core is available as a standalone component called the Neuron Chip. To\nfurther reduce device costs, Echelon also provides Neuron cores combined with\ncommunication transceivers, which are called Smart Transceivers.\n\nTo the developer and the integrator, the beauty of the Neuron core and Smart\nTransceivers lies in their completeness. The built-in communication protocol and\nprocessors removes the need for any development or programming in these areas.\nThe Smart Transceivers eliminate the need to develop or integrate a communications\ntransceiver. The Neuron core provides layers 2 through 6 of the ISO/OSI reference\nmodel of a communication protocol, and the Smart Transceiver adds layer 1. The\ndevice manufacturer only has to supply the application layer programming and the\nnetwork integrator provides the configuration for a given network installation. This\nstandardizes implementation and makes development and configuration simple and\nfast.\n\nMost LONWORKS devices take advantage of the functions of the Neuron core and use\nit as the control processor. The Neuron core is a semiconductor component\nspecifically designed for providing intelligence and networking capabilities to\nlow-cost control devices. The Neuron core includes up to four processors that provide\nboth communication and application processing capabilities. Two processors execute\nthe layer 2 through 6 implementation of the ISO/IEC 14908-1 protocol and the third\nexecutes layer 7 and the application code. LONWORKS 2.0 Neuron cores add a fourth\nprocessor for interrupt processing. The device manufacturer provides application\ncode to run on the Neuron core and I/O devices to be connected to the Neuron core.\nEchelon Corporation designed the original Neuron core and the LONWORKS 2.0\nNeuron core. Neuron cores are also designed and manufactured by Echelon’s\nmanufacturing partners.\n\nThe Neuron core is a system-on-a-chip with multiple processors, memory, and\ncommunication and I/O subsystems. At the time of manufacture, each Neuron core is\ngiven a permanent unique-in-all-the-world 48-bit code, called the Neuron ID. A large\nfamily of Neuron Chips is available with differing speeds, memory type and capacity,\nand interfaces. Approximately 30 million Neuron cores have been shipped as of early\n2009.\n\nA complete operating system including an implementation of the ISO/IEC 14908-1\nprotocol, called the Neuron firmware, is available for the Neuron core.\n\nDevelopment Tools\n\nEchelon provides a broad range of tools for developing LONWORKS devices and\napplications. Following is a summary of the development tools for LONWORKS\ndevices:\n\ne = Mini FX Evaluation Kit—tools and evaluation boards for evaluating the\nLONWORKS platform. The Mini kit can be used to develop simple LONWORKS\napplications for a Neuron Chip or Smart Transceiver, but it does not include a\ndebugger, project manager, or network integration tool required by many devices.\n\nPlatform Components 16",
    "Page_17": "e NodeBuilder® FX Development Too!tools and evaluation boards for developing\nsimple or complex LONWORKS applications for a Neuron Chip or Smart\nTransceiver. Includes a debugger, project manager, and network integration tool.\n\ne ShortStack® Developer's Kit—tools and firmware for developing LONWORKS\napplications that run on processors that do not include a Neuron core. The\nShortStack kit includes firmware that is loaded onto a Smart Transceiver that\nmakes the Smart Transceiver a communications co-processor for the host\nprocessor.\n\ne FTXL Developer's Kit—tools, firmware, and FPGA design files for developing\nLONWORKS applications that run on a Nios II embedded 32-bit RISC processor\nconfigured on an Altera Cyclone II/III family FPGA device.\n\nDevelopers using any of these tools typically also require network integration and\ndiagnostic tools. A network integration tool is included with the NodeBuilder FX\nDevelopment Tool, but the other LONWoRKS development tools do not include a\nnetwork integration tool. None of the development tools include a network diagnostic\ntool. Network integration and diagnostic tools are described in Network Tools later\nin this chapter.\n\nRouters\n\nTransparent support for multiple media is a unique capability of the LONWORKS\nplatform, allowing developers and network integrators to choose those media and\ncommunication methods best suited for their needs. Multiple media support is made\npossible by routers. Routers can also be used to control network traffic and partition\nsections of the network from traffic in another section, increasing the total\nthroughput and capacity of the network. Network tools automatically configure\nrouters based on network topology, making the installation of routers easy for\ninstallers and transparent to the devices.\n\nRouters allow a single peer-to-peer network to span many types of transport media\nand support tens of thousands of devices. A router has two sides, each with a\ntransceiver appropriate to the two channels to which the router is connected.\nRouters are completely transparent to the logical operation of the network, but they\ndo not necessarily transmit all packets; when configured by a network integration\ntool, intelligent routers know enough about the system configuration to block packets\nthat have no addressees on the far side. Using another type of router called an\nIP-852 router, LONWORKS routers can span great distances over wide-area networks\nsuch as the Internet.\n\nEchelon offers routers that connect different types of twisted pair channels, as well\nas IP-852 routers for routing between twisted pair channels and an IP network such\nas the Internet, an intranet, or a virtual private network (VPN). A complete list of\nthe routers available from Echelon is available at www.echelon.com/products,\nFollowing is a list of the most commonly used routers:\n\ne 1LON SmartServer—routes between an IP-852 channel and a twisted pair\nchannel, and also provides controller functionality. The SmartServer is available\nwith and without IP-852 routing.\n\ne 1LON 600—routes between an IP-852 channel and a twisted pair channel.\n\nPlatform Components 17",
    "Page_18": "e MPR-50 Multi-Port Router—routes among up to 5 channels: four TP/FT-10 free\ntopology twisted pair and one TP/XF-1250 twisted pair.\n\ne LonPoint Router—routes between two twisted pair channels. Six different\nmodels are available for different types of twisted pair channels.\n\nNetwork Interfaces\n\nA network interface is a card or module that is used to connect a host computer—\ntypically a computer running Microsoft Windows—to a LONWORKS network. The\nnetwork interface itself does not run an application—instead it provides either layer\n2 or layers 2 —5 of the ISO/IEC 14908-1 Control Network Protocol (CNP), plus a\ntransceiver implementing layer 1, and firmware to exchange layer 2 or layer 5 CNP\npackets with the attached computer. A complete list of the network interfaces\navailable from Echelon is available at www.echelon.com/products. Following is a list\nof the most commonly used network interfaces:\n\ne U10/U20 USB Network Interface—a small USB device that plugs into a USB\nport on a Windows computer and attaches to a free topology twisted pair (for the\nU10) or power line (for the U20) channel.\n\ne 1LON SmartServer—a controller that can also be used as a network interface\nwith an IP connection to a host Windows computer.\n\ne 1LON 600—an IP-852 router that can also be used as a network interface with\nan IP connection to a host Windows computer.\n\nSmart Servers\n\nA smart server is a programmable device that combines a controller with a Web\nserver for local or remote access, LONWORKS network interface, CNP network\nmanager, legacy-device interface, and optional IP-852 router. Echelon’s low-cost\nsmart server is called the LON SmartServer. The SmartServer connects\nLONWoRKS, Modbus, and M-Bus devices to corporate IP networks or the Internet. It\nfeatures a built-in Web server that allows Web access to all the data managed and\ncontrolled by the SmartServer, as well as built-in applications for alarming,\nscheduling, data logging, and data translation. It also includes a Web binder\napplication for bridging multiple LONWoRKS domains, as well as bridging from\nModbus and M-Bus devices to LONWORKS domains. The SmartServer provides a\nSOAP/XML Web services interface for use by custom Web pages and for integration\nwith enterprise applications.\n\nNetwork Management\n\nLonWorks networks can be categorized by the method used to perform network\ninstallation. The two categories of networks are managed networks and self-installed\nnetworks. A managed network is a network where a shared network management\nserver is used to perform network installation. The network management server\n\nmay be part of a network operating system as described later in this section, or may\nbe part of an Internet server such as the SmartServer. A user typically uses a tool to\ninteract with the server and define how the devices in the network should be\n\nPlatform Components 18",
    "Page_19": "configured and how they should communicate. Such a tool is called a network\nmanagement tool and is described in the next section. Although a network\nmanagement tool and a server are used to initially establish network communication,\nthey need not be present all the time for the network to function. The network\nmanagement tool and server are only required whenever changes are made to the\nnetwork’s configuration.\n\nIn a managed network, the network management tool and server allocate various\nnetwork resources, such as device and data point addresses. The network\nmanagement server is also aware of the network topology, and can configure devices\nfor optimum performance within the constraints of the topology.\n\nThe alternative to a managed network is a self-installed network. There is no central\ntool or server that manages the entire network configuration in a self-installed\nnetwork. Instead, each device contains code that replaces parts of the network\nmanagement server’s functionality, resulting in a network that no longer requires a\nspecial tool or server to establish network communication or to change the\nconfiguration of the network.\n\nNetwork installation includes the following steps:\ne Assigning logical addresses to all devices and groups of devices.\ne Binding the network variables to create logical connections between devices.\n\ne Configuring the various control network protocol parameters in each device for\nthe desired features and performance, including channel bit rate,\nacknowledgement, authentication, and priority service.\n\nNetwork installation may be quite complex, but the complexity is hidden by the\nnetwork management solutions that are part of the LONWORKS platform. For\nmanaged applications, functional network design can be as simple as dragging the\ndevices’ application functional blocks onto a drawing and connecting inputs and\noutputs to determine how functional blocks communicate with each other. The\nnetwork management tool automatically assigns logical addresses, binds network\nvariables based on the connections drawn by the integrator, and configures network\ncontrol parameters. For self-installed applications, functional network design is as\nsimple as plugging in a pair of devices and pressing a button on each device to\nestablish communication.\n\nThe network installation process for managed networks can be either an ad hoc\nprocess or a pre-engineered process. The network installation process for\nself-installed networks is typically an ad hoc process. In the ad hoc method, the\ndevices are first connected to the network and powered-up, and the configuration\ndata is either self-installed or downloaded over the network as each device is defined\nin a network integration tool. In the engineered method, the information is collected\ninto a database by the network integration tool and is downloaded to the devices at\ninstallation time. For a managed network using either method, the network\nintegration tool automatically maintains a database that accurately reflects the\nconfiguration of each device in the system.\n\nNetworks can start out as self-installed networks using ISI and, as size or complexity\ngrows beyond the ISI limits, can be upgraded into a managed network. A\nself-installed network may also be transitioned to a managed network to take\n\nPlatform Components 19",
    "Page_20": "advantage of the additional flexibility and capability provided by a network\nmanagement tool and server.\n\nNetwork Operating System\n\nFor managed networks, a network operating system (NOS) can be used to provide a\ncommon, network-wide set of services supporting monitoring, supervisory control,\ninstallation, and configuration. The NOS also provides programming extensions for\neasy use of network management and maintenance tools. A LONWoRKS NOS\nadditionally provides data access services for HMI and SCADA applications as well\nas remote access via LONWORKS or IP networks.\n\nA properly designed NOS allows for synchronization services between multiple tools\nand applications used by a single or multiple users. In order for a NOS to support\ncomplete interoperability, it must support standard plug-ins by multiple\nmanufacturers for easy device configuration.\n\nA properly designed NOS is not required for the normal operation of a system. The\nNOS provides installation and maintenance services when a network is initially\ncommissioned or later changed, but once a network is installed, the NOS is not\nrequired to support communication between devices. This is a significant benefit of\nthe peer-to-peer architecture of the LONWORKS platform. Managed networks that\nare not peer-to-peer utilize a system-to-system (gateway-to-gateway) approach to\nintegration and do not utilize a NOS. These system-to-system solutions are not\ncapable of separating their functionality from their hardware design. Instead, such\nsolutions rely on multiple, custom interfaces to achieve a partial separation of\napplication from design.\n\nTo provide interoperability between network tools and applications, the LONWORKS\nplatform includes a single NOS for managed networks called the LNS Network\nOperating System. LNS provides a standard platform for supporting interoperable\napplications on LONWORKS networks. LNS is an infrastructure that provides the\nfoundation for interoperable LONWORKS network tools and applications, which are\nproducts used in designing, configuring, installing, operating, and maintaining\nLONWORKS networks. LNS supports clients and servers based on Microsoft\nWindows.\n\nLNS uses a client/server architecture so that multiple applications can be active on a\nnetwork at the same time, allowing multiple users to install devices, operate a\nsystem, diagnose problems, and make repairs simultaneously. LNS is scalable,\nchangeable, and upgradeable.\n\nThe LNS plug-in standard encourages LONWORKS device manufacturers to provide\nmore value to users through software components linked to their unique products.\nRather than trying to develop custom programming for each project in the field,\nnetwork integrators use plug-ins that configure the devices used in the project.\nThese device plug-ins often contain built-in troubleshooting tools, user dialogs to aid\nor confirm configuration choice, as well as custom user interfaces to monitor or graph\ndata held in the device. In effect, manufacturers can write smart software once to\nsimplify the use of their products in thousands of LONWORKS networks.\n\nUsing LNS, a manufacturer's device plug-in software runs without modification in\nany Windows computer, and can be seamlessly integrated with the installation tools\non the computer. LNS plug-ins simplify the management of the network by masking\n\nPlatform Components 20",
    "Page_21": "the underlying communication mechanisms between the software component and the\ndevice. Thus, many existing devices can become fully interoperable by simply writing\na plug-in. A standard interface is set for manufacturers to customize the front end,\nwhile LNS makes it possible for multi-vendor software components to work together.\n\nInteroperable Self-Installation (ISI)\n\nEach device in a self-installed network is responsible for its own configuration and\ndoes not rely on a network management server to coordinate its configuration.\nBecause each device is responsible for its own configuration, a common standard is\nrequired to ensure that devices configure themselves in a compatible way. The\nstandard protocol for performing self-installation with the LONWORKS platform is\ncalled the LONWoRKsS Interoperable Self-Installation (IST) Protocol. The ISI protocol\ncan be used for networks of up to 200 devices and enables LONWORKS devices to\ndiscover and communicate with each other. Larger or more complex networks must\neither be installed as managed networks, or must be partitioned into multiple\nsmaller subsystems, where each subsystem has no more than 200 devices and meets\nthe ISI topology and connection constraints. Devices that conform to the LONWORKS\nISI protocol are called [ST devices.\n\nThe LonBridge Server can be used to create an interface between an IP network and\na network of ISI devices. The LonBridge Server is available for Windows and Linux,\nand can be freely ported to other platforms.\n\nNetwork Tools\n\nNetwork tools are software applications built on top of the network operating system\nfor network design, installation, configuration, monitoring, supervisory control,\ndiagnostics, and maintenance. Many tools combine these functions, but the most\ncommon combinations are the following:\n\ne Network Integration Tools. Provide the essential functions required to design,\nconfigure, commission, and maintain a network.\n\ne Network Diagnostic Tools. Special-purpose tools to observe, analyze, and\ndiagnose network traffic and monitor network loading.\n\ne HMI Development Tools. Tools for creating human-machine interface (HMI)\napplications. HMI applications are used for operator interfaces to operational\nsystems.\n\ne I/O Servers. General-purpose drivers that provide access to LONWORKS networks\nfor HMI applications not originally designed for LONWORKS networks.\n\nNetwork tools based on the LNS Network Operating System are interoperable,\nmeaning they can operate at the same time on the same network and maintain a\nconsistent view of the devices in the network and their configuration. Echelon’s\nofferings for network tools include the LonMaker Integration® Tool and the\nLonScanner™ Protocol Analyzer, which are described in the following sections.\n\nPlatform Components 21",
    "Page_22": "LonMaker Integration Tool\n\nThe LonMaker Integration Tool is a software package for designing, documenting,\ninstalling, and maintaining multi-vendor, open, interoperable LONWORKS networks.\nBased on the LNS Network Operating System, the LonMaker tool combines a\npowerful client-server architecture with an easy-to-use Visio user interface. The\nresult is a tool that is sophisticated enough to design, commission, and maintain a\ndistributed control network, yet provide the ease-of-use required by network design,\ninstallation, and maintenance staff.\n\nThe LonMaker tool conforms to the LNS plug-in standard. This standard allows\nLONWORKS device manufacturers to provide customized applications for their\nproducts, and have these customized applications automatically started when the\nLonMaker user selects the associated device. This makes it easy for system\nengineers and technicians to define, commission, maintain, and test the associated\ndevices.\n\nFor engineered systems, network design is usually done off-site, without the\nLonMaker tool attached to the network. Network design may, however, take place\non-site, with the tool connected to a commissioned network. This feature is especially\ndesirable for smaller networks or where adds, moves, and changes are a regular\noccurrence.\n\nUsers are provided with a familiar, CAD-like environment for designing a control\nsystem. Visio’s smart shape drawing feature provides an intuitive, simple means for\ncreating devices. The LonMaker tool includes a number of smart shapes for\nLONWORKS networks, and users can create new custom shapes. Custom shapes may\nbe as simple as a single device or functional block, or as complex as a complete\nsubsystem with predefined devices, functional blocks, and connections between them.\nUsing custom subsystem shapes, additional subsystems can be created by simply\ndragging the shape to a new page of the drawing, a time-saving feature when\ndesigning complex systems. Any subsystem can be changed to a supernode by adding\nnetwork variables to the subsystem shape. Supernodes reduce engineering time by\nexposing a simplified interface to a set of devices.\n\nNetwork installation time is minimized by the ability of the installer to commission\nmultiple devices at the same time. Devices can be identified by service pin, bar code\nscanning Neuron IDs, winking, or manually entering the IDs. Auto discovery can be\nused for systems containing embedded networks to automatically find and\ncommission the devices in the system. Testing and device configuration is simplified\nby an integrated application for browsing network variables and configuration\nproperties. A management window is provided to test, enable/disable, or override\nindividual functional blocks within a device or to test, wink, or set online and offline\nstates for devices.\n\nThe LonMaker tool can both import and export AutoCAD files and generate as-built\ndocumentation. An integrated report generator and bill-of-materials generator can\nalso be used to generate detailed reports of the network configuration.\n\nThe LonMaker tool is a single expandable tool covering the entire life cycle of the\nnetwork to simplify the tasks of installers.\n\nPlatform Components 22",
    "Page_23": "LonScanner Protocol Analyzer\n\nThe LonScanner Protocol Analyzer is a software package that provides network\ndiagnostic tools to observe, analyze, and diagnose the behavior of installed\nLONWORKS networks.\n\nThe protocol analyzer can be used to collect, timestamp, and save all CNP packets on\na LONWORKS channel. Packets are saved in log files that can be later viewed and\nanalyzed; packets may also be viewed in real-time as they are collected by the\nprotocol analyzer.\n\nA sophisticated transaction analysis system examines each packet as it arrives and\nassociates related packets to aid the user in understanding and interpreting traffic\npatterns in their network.\n\nLogs can be displayed in summary form with one packet per line for quick analysis,\nor in expanded form with one packet per window for more detailed analysis. Using\ndata imported from an LNS database, the protocol analyzer decodes and displays\npacket date using the device and network variable names assigned during\ninstallation. It also provides text descriptions of each message and a description of\nthe CNP message service used to transmit it. Eliminating the need for the user to\nmanually interpret the ones and zeros of CNP reduces the time and effort needed to\ndiagnose network problems.\n\nThe user can specify capture filters to limit the packets collected. Filters can be used\nto limit the captured packets to packets between selected devices or network\nvariables, or to packets using selected CNP services.\n\nA traffic statistics tool provides access to detailed statistics related to network\nbehavior. The statistics include total packet counts, error packet counts, and\nnetwork loading. The statistics display provides the user with an easy-to-read\nsummary of network activity.\n\nPlatform Components 23",
    "Page_24": "Platform Components\n\n24",
    "Page_25": "Chapter 3.\n\nThe Control Network Protocol\n\nThe ISO/IEC 14908-1 Control Network Protocol (CNP) is\nthe foundation of the LONWoRKS platform and provides a\nreliable, cost-effective, and robust communications\nstandard for control applications. This chapter describes\nthe protocol and the services implemented by each layer\nof the protocol. Developers will mostly deal with layers 6\nand 7, but will also be interested in the transceiver\ninformation described in layer 1. System designers and\nintegrators will be interested in the same layers as\ndevelopers, and will also be interested in understanding\nthe options provided by layer 4.\n\nThe appendix provides details on layer 1 of the protocol\nthat will only be of interest to transceiver designers.\n\nThe Control Network Protocol 25",
    "Page_26": "ISO/IEC 14908-1 Control Network Protocol\n\nThe foundation of the LONWoRKS platform is the ISO/IEC 14908-1 Control Network\nProtocol (CNP), just as the RFC-791/793 TCP/IP protocol is the foundation of most\ndata networks and the Internet. There are many compatible implementations of the\nISO/IEC 14908-1 protocol. Echelon’s implementation of CNP is called the LonTalk®\nprotocol. Throughout this document, the ISO/IEC 14908-1 Control Network Protocol\nis referred to simply as CNP. CNP also refers to the ISO/IEC physical layer\nstandards defined by ISO/IEC 14908-2 and 14908-3, and the IP tunneling standard\ndefined by ISO/IEC 14908-4.\n\nCNP is designed to support the needs of control applications spanning a range of\nindustries and requirements. To meet its broad objectives, the protocol is a complete\nseven-layer communications protocol, with each layer optimized to the needs of\ncontrol applications. The seven layers follow the reference model for open systems\ninterconnection (OSI) developed by the International Standard Organization (ISO).\nBy addressing all seven layers defined by the OSI reference model, CNP provides a\nrobust communications solution that meets the needs of a broad range of applications\ntoday, and will continue to meet the needs of evolving control applications in the\nfuture.\n\nThe following list summarizes the major features of CNP:\n\ne Efficient delivery of small messages. A typical control message may consist of 1\nto 8 bytes of data, though larger and smaller messages are supported. A CNP\ndevice can transmit a message with as few as 9 bytes of protocol overhead.\nMessages may be delivered to a single device or to any group of devices.\n\ne Reliable delivery of messages. Even though an individual message may consist of\na few bytes, the reliable delivery of every message may be critical to the\napplication. CNP includes reliable message delivery services that retry a\nmessage transmission when a communication failure occurs and informs the\nsending application if an unrecoverable failure occurs. Resynchronization is\nimmediate if a previously unreachable destination becomes reachable within the\nretry interval.\n\ne Duplicate message detection. Some types of control messages must not be\ndelivered multiple times. For example, if a monitoring application that is\ncounting events were to receive duplicate messages, the event count would\nbecome incorrect. CNP prevents duplicate messages from being passed to the\nreceiving application.\n\ne Multiple communications media. Many control systems require multiple\ncommunications media for lowest total system cost. Twisted-pair cable provides\nthe best performance and is a good solution where it is practical to install the\ncable. Link power communications lowers device costs by providing power over\nthe same media as communications. Communications over existing power lines\nprovides the lowest installation cost. CNP is media independent so that all these\nmedia, and more, are supported. In addition, CNP also supports routers so that\ndevices on different channels can interoperate. A hierarchical addressing scheme\nis used to support low-cost and easily maintained routers.\n\ne Low device cost. A control device may be as simple as a sensor for a single point\nsuch as a limit switch or a temperature sensor. With the capability to put control\nin every point, it is important that the protocol not be too demanding in terms of\nmemory and computing resources at each device. CNP is optimized to minimize\n\nThe Control Network Protocol 26",
    "Page_27": "the code size of protocol firmware and to minimize RAM requirements for buffer\nstorage. For example, the complete implementation of CNP running on a Neuron\ncore requires less than 10 Kbytes of code and less than 1 Kbyte of RAM.\n\nLow installation and maintenance cost. Low device cost does not lead to low\nsystem cost unless devices are easily installed in networks, networks are easily\nmodified, and repairing networks after a failure is simple. CNP includes\ncomplete support for installation and maintenance so that simple devices in\nsimple networks can manage their own network installation, low-cost installation\ntools can be used to install and maintain more complex networks, and low-cost\ndiagnostic tools can be used to diagnose failures in any type of network.\n\nEfficient use of channel bandwidth. To keep system costs down, many devices\nmust be able to efficiently share a single communications channel. CNP uses\ninnovative media access technologies to provide the most efficient use of the\ncommunications channels, even under conditions of high loading.\n\nInteroperable systems. Multiple systems may need to interoperate to provide\nadditional benefits to the end users. For example, a fire alarm system may\ninteroperate with an elevator control system to keep elevators away from burning\nfloors and may interoperate with an emergency exit lighting system to illuminate\nexit signs. In addition to supporting interoperability between devices, CNP also\nallows devices from different vendors to be installed using a common set of\ninstallation strategies and tools.\n\nSeparation of systems. Multiple systems that should not interoperate may share\na common communication medium, especially in the case of open media such as\npower line. CNP allows these systems to operate independently without mutual\ninterference by isolating devices that communicate with each other into domains.\nA domain is a logical collection of devices that communicate with each other.\nDevices in different domains cannot communicate directly with each other—they\nmust communicate through a common gateway.\n\nPrevent tampering. Because control systems do more than just move data, it\nshould not be possible for an unauthorized user to inject commands into the\nnetwork. CNP includes an authentication protocol that prevents tampering by\nunauthorized users.\n\n \n\nCNP Layers\n\nTo provide a low-cost, reliable, and robust communications standard, CNP is layered\nas recommended by the International Standards Organization Open Systems\nInterconnect (ISO OSI) reference model. The OSI layers ensure that the required\nservices are provided without unexpected interactions between the services.\n\nCNP provides the following services for each of the seven layers of the OSI reference\nmodel:\n\n1.\n\nThe physical layer defines the transmission of raw bits over a communication\nchannel. A channel is a physical transport medium for packets. The physical\nlayer ensures that a 1 bit transmitted by a source device is received as a 1 bit by\nall destination devices. CNP is media independent, so multiple physical layer\nprotocols are supported depending on the communication medium.\n\nThe Jink layer defines media access methods and data encoding to ensure\nefficient use of a single communications channel. The raw bits of the physical\nlayer are combined into data frames. The link layer defines when a source device\n\nThe Control Network Protocol 27",
    "Page_28": "can transmit a data frame, and defines how destination devices receive the data\nframes and detect transmission errors. A priority mechanism is also defined to\nensure priority delivery of urgent messages.\n\n8. The network layer defines how message packets are routed from a source device\nto one or more destination devices. This layer defines naming and addressing of\ndevices to ensure the correct delivery of packets. This layer also defines how\nmessages are routed between the source and destination devices when these\ndevices are on different communication channels.\n\n4, The transport layer ensures reliable delivery of message packets. Messages can\nbe exchanged using an acknowledged service, where the sending device waits for\nan acknowledgement from the receiver and resends the message if the\nacknowledgement is not received. The transport layer also defines how duplicate\nmessages are detected and rejected if a message is resent due to a lost\nacknowledgement.\n\n5. The session layer adds control to the data exchanged by the lower layers. It\nsupports remote actions so that a client may make a request to a remote server\nand receive a response to this request. It also defines an authentication protocol\nthat enables receivers of a message to determine if the sender is authorized to\nsend the message.\n\n6. The presentation layer adds structure to the data exchanged by the lower layers\nby defining the encoding of message data. Messages may be encoded as network\nvariables, application messages, or foreign frames. Interoperable encoding of\nnetwork variables is provided with standard network variable types (SNVTs).\nPresentation layer services are provided by the Neuron firmware for applications\nhosted on a Neuron Chip or Smart Transceiver; these services are provided by a\nhost processor and a LONWORKS network interface for applications running on\nother hosts.\n\n7. The application Jayer defines standard network services that use data exchanged\nby the lower layers. Standard network services are provided for network\nconfiguration, network diagnostics, file transfer, application configuration,\napplication specification, alarming, data logging, and scheduling. These services\nensure that devices created by different developers or manufacturers can\ninteroperate with each other, and can be installed and configured using standard\nnetwork tools.\n\nTable 1 summarizes the OSI reference model layers and the CNP services provided\nat each layer.\n\nTable 1 CNP Layers\n\n \n\n1 | Physical Electrical Interconnect Media-S pecific Interfaces and\nModulation Schemes (twisted pair,\npower line, radio frequency,\ncoaxial cable, infrared, fiber optic)\n\n \n\n2 |Link Media Access and Framing Framing; Data Encoding;\nCRC Error Checking;\nPredictive CSMA;\n\nCollision Avoidance;\n\nPriority & Collision Detection\n\n \n\n \n\n \n\n \n\nThe Control Network Protocol 28",
    "Page_29": "3 | Network\n\nMessage Delivery\n\nUnicast & Multicast Addressing;\nRouters\n\n \n\n4 | Transport\n\nEnd-to-End Reliability Acknowledged & Unacknowledged\n\nMessage Delivery;\nCommon Ordering;\nDuplicate Detection\n\n \n\n5 | Session\n\nControl\n\nRequest-R esponse;\nAuthentication\n\n \n\n6 | Presentation\n\nData Interpretation\n\nNetwork Variables;\nApplication Messages;\nForeign Frame Transmission\n\n \n\n7 | Application\n\n \n\n \n\nApplication Compatibility Network Configuration;\n\nNetwork Diagnostics;\n\nFile Transfer;\n\nApplication Configuration;\nApplication Specification;\nAlarming;\n\nData Logging;\nScheduling\n\n \n\n \n\n \n\nCNP Data Transmission\n\nCNP ensures that application data sent by a source device is correctly received by the\napplications on one or more destination devices. CNP layers described in the\nprevious section define transformations on the sending device’s application data that\noccur between the application and the raw bits that are transmitted on the\ncommunication channel; the CNP layers define a similar set of transformations on\nthe destination devices that change the raw bits back to the original data. The\ntransformations performed by layers 2 through 6 consist of headers that are added to\nthe application data. Table 2 summarizes the data carried by each layer.\n\nTable 2 Data at each CNP Layer\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n1 Physical Raw Bits\n\n2 Link Data Frame\n\n3 Network Datagram\n\n4 Transport Transport Packet\n\n5 Session Session Packet\n\n6 Presentation | Presentation Packet\n7 Application Message\n\n \n\nThe Control Network Protocol\n\n \n\n29",
    "Page_30": "Figure illustrates the contents of a typical CNP data frame as carried by the\nphysical layer.\n\nmsb Isb\nBitsync (configurable number of 1 bits)\nLink Header (1 byte)\nNetwork Header (4 to 16 bytes)\nTransport Header (0 to 1 bytes)\n\n \n\n \n\n \n\n \n\nSession Header (0 to 1 bytes)\nPresentation Header (1 to 2 bytes)\nApplication Data (0 to 246 bytes)\nLink CRC (2 bytes)\n\nFigure 2 CNP Data Frame\n\n \n\n \n\n \n\n \n\nThe format of the headers for each layer is described in the sections within this\nchapter. Each section includes diagrams similar to the preceding diagram that\ndescribes the bit and byte format of the fields within the data frame. Bytes are\ntransmitted from top to bottom, with multi-byte fields transmitted least significant\nbyte first. Bits are transmitted from right to left within a byte, which is least\nsignificant bit first.\n\n \n\nCNP Limits\n\nCNP supports up to 32,385 devices per domain, and a practically unlimited number\nof domains (the domain identifier may be 0, 1, 3, or 6 bytes long). Each CNP device\nhas a unique 6-byte identifier and can also be configured to recognize logical\naddresses using subnet, node, and group identifiers as described in the layer-3\ndocumentation in Chapter 3. Devices typically communicate with data values called\nnetwork variables that are described in the layer-6 documentation in Chapter 3. To\nsupport flexible connection topologies for network variables, CNP defines network\nvariable aliases as describe in the layer-6 documentation in Chapter 3. Any CNP\ndevice can monitor and update any number of network variables in a domain, but\nnetwork variable reads and writes are simplified by using network variable\nconnections as described in the layer-6 documentation in Chapter 3—these\nconnections require bindable network variables and network variable aliases. The\nfollowing limits apply per CNP domain. These concepts are described in more detail\nin Chapter 3. The network variable and network variable aliases may be further\nlimited by the CNP implementation on a device.\n\ne A maximum of 32,385 devices per domain.\n\ne A maximum of 255 subnets per domain.\n\ne A maximum of 256 groups per domain.\n\ne A maximum of 127 devices per subnet.\n\ne A maximum of 64 devices per group for acknowledged services\n\ne A maximum of 32,385 devices per group for unacknowledged and repeated\nservices.\n\ne A maximum of 4096 bindable network variables per device.\ne A maximum of 8192 network variables aliases per device.\n\nThe Control Network Protocol 30",
    "Page_31": "Layer 1— Physical Layer\n\nThe physical layer defines the transmission of raw bits over a communication\nchannel. A channel is a physical transport medium for packets. The physical layer\nensures that a 1 bit sent by a source device is received as a 1 bit by all destination\ndevices.\n\nCNP is media independent, so multiple physical layer protocols are supported\ndepending on the communication medium. A LONWORKS device can be connected to\na variety of communications transceivers that manage the electrical interconnection\nto the communications medium. CNP communications transceivers are available for\ncommunication over twisted pair, link power, power line, radio frequency (RF), fiber\noptic, and infrared media. The specifications for each LONWORKS transceiver provide\nthe distance, bit rates, and topologies supported.\n\nA LONWORKS network is composed of one or more channels. The physical form of a\nchannel depends on the medium. For example, a twisted pair channel is a twisted\npair cable; an RF channel is a specific radio frequency carrier; a power line channel is\na specific band carried on a contiguous section of power wiring.\n\nMultiple channels are connected by routers. Routers are communication devices that\nconnect two channels and route packets between them. Routers can be installed to\nuse one of four routing algorithms: configured router, learning router, bridge, or\nrepeater. Configured routers and learning routers are a class of router known as an\nintelligent router.\n\nA set of channels connected by bridges or repeaters is a segment. A device sees every\npacket from every other device on its segment. Intelligent routers can be used to\nisolate traffic within a segment to increase total system capacity and improve\nreliability.\n\nThe bit rate of a channel is dependent upon the medium and transceiver design.\nMultiple transceivers with different bit rates may be designed for a medium to allow\ntrade-offs of distance, throughput, and device power consumption and cost. Typical\nbit rates are 78.1 kbps for TP/FT-10 (ISO/IEC 14908-2) and Ethernet bit rates for\nIP-852 (ISO/IEC 14908-4).\n\n \n\nChannel Types\n\nTable 3 lists the common LONWORKS communication channel types. All of these\nmedia are bidirectional, supporting transmission and reception of data by every\ndevice. The ID column in the table lists unique identifiers for each channel type that\ncan be used by a network tool to verify compatibility between the device and its\nchannel. The Description column in the table lists the specification that defines the\ncharacteristics of the channel. The Standard column in the table identifies the\nchannel types that can be used to create devices that can be certified by LONMARK\nInternational. Additional standard channel types are listed at\nwww.lonmark.org/mid.\n\nThe Control Network Protocol 31",
    "Page_32": "Table 3. Common LonWorks Channel Types\n\nIP-852 154 IP-852 Tunneling N/A ISO/IEC 14908-4 Yes\n\nPL-20A 15 CENELEC A-band 2613bps ISO/IEC 14908-3 Yes\nPower Line\n\nPL-20C 16 CENELEC C-band 156.3k/3987bps ISO/IEC 14908-3 Yes\nPower Line w/access\nprotocol\n\nPL-20N 17 CENELEC C-band 156.3k/3987bps ISO/IEC 14908-3 Yes\nPower Line w/o access\nprotocol\n\nTP/FT-10 4 Free Topology Twisted 78.13kbps ISO/IEC 14908-2 Yes\nPair\n\nTP/XF-1250 3 Transformer-lsolated 1.25Mbps LONMar«K Interoperability Yes\nTwisted Pair Guidelines\n\n \n\n \n\n \n\n \n\nSee the documents listed in the Definition column in Table 3 for more information on\nany of the channel types.\n\n \n\nTP/FT-10 Free Topology Twisted P air\n\nA conventional control system using bus topology wiring (such as RS-485) consists of\na network of sensors and control outputs that are interconnected using a shielded\ntwisted wire pair. In accordance with RS-485 guidelines, all of the devices must be\nwired in a bus topology to limit electrical reflections and ensure reliable\ncommunications. There is a high cost associated with installing and maintaining the\ncable plant that links together the many elements of an RS-485-based control system.\nBus topology wiring is more time consuming and expensive to install because the\ninstaller is unable to branch or star the wiring where convenient: all devices must be\nconnected directly to the main bus.\n\nThe best solution for reducing installation and maintenance costs and simplifying\nsystem modifications is a free topology communication system. The TP/FT-10\nchannel type offers just such a solution, and provides an elegant and inexpensive\nmethod of interconnecting the different elements of a distributed control system.\n\nThe TP/FT-10 channel type uses transceivers that conform to the ISO/IEC 14908-2\nFree-Topology Twisted Pair Channel Specification on free-topology twisted pair\nmedia and supports a 78,125 bps bit rate. These transceivers encode data using\ndifferential Manchester encoding as described earlier in this chapter in Single-Einded\nMode, which is polarity insensitive. A TP/FT-10 channel consists of up to 64 devices\non a single network segment; or 128 devices along with a link power source, which\nsupplies DC power to the devices on the channel. The total network length and\nnumber of devices may be extended by use of CNP routers, and/or one TP/FT-10\nphysical-layer repeater.\n\nA free topology architecture allows the user to wire the control devices with virtually\nno topology restrictions. Figure 3 illustrates a typical network using a TP/FT-10\nchannel. In this example, power is supplied by a local +5VDC power supply located\n\nThe Control Network Protocol 32",
    "Page_33": "at each device. Power may optionally be carried over the same pair of wires as the\ndata.\n\nSensor P| Fr smart\n\n \n     \n\nFT Smart\nTransceiver\nDevice\n\n  \n     \n    \n\nFT Smart\nTransceiver\nDevice\n\nTe askiitiqnsll\nerkes\n\nFT Smart\nTransceiver\n\n \n\nFT Smart\nTransceiver\nDevice\n\n \n\nFT Smart\nTransceiver\nDevice\n\n \n\n \n\n \n\nFigure 3 Example TP/FT-10 Channel Wiring\n\nUnlike bus wiring designs, a TP/FT-10 channel uses a wiring scheme that supports\nany combination of star, loop, and bus wiring. Figure 4 illustrates the channel\ntopologies supported by the TP/FT-10 channel.\n\nGh fb fe “ee\n\nDoubly Terminated Bus Topology\n\nLoop Topology 1 = FT termination\n\nFigure 4 TP/FT-10 Supported Topologies\nThe wiring flexibility provided by the TP/FT-10 channel type has many advantages:\n\n1. The installer is free to select the method of wiring and termination location that\nbest suits the installation, reducing the need for advanced planning and allowing\nlast minute changes at the installation site.\n\nThe Control Network Protocol 338",
    "Page_34": "2. If installers have been trained to use one style of wiring for all installations, free\ntopology technology can be introduced without requiring retraining.\n\n8. Retrofit installations with existing wiring plants can be accommodated with\nminimal, if any, rewiring. This capability ensures that TP/FT-10 technology can\nbe adapted to both old and new projects.\n\n4, Free topology permits TP/FT-10 systems to be expanded in the future by simply\ntapping into the existing wiring where it is most convenient to do so. This\nreduces the time and expense of system expansion, and from the user’s\nperspective, keeps down the life cycle cost of the free topology network.\n\nLink Power System\n\nA TP/FT-10 channel without link power requires separate data and power wiring.\nInstalling separate data and power wiring implies that a technician's time will be\nspent troubleshooting the wiring harness to isolate and repair cable faults.\nMoreover, each time a sensor is added or an actuator is moved, both data and power\nwiring must be changed accordingly, often resulting in network down time until the\nnew connections can be established.\n\nThe TP/FT-10 ink power system provides the best solution for reducing installation\nand maintenance costs and simplifying system modifications by combining power and\ndata on a common twisted wire pair. The link power system sends power and data\non a common twisted wire pair, and allows the user to wire the control devices with\nvirtually no topology restrictions. Support for link power can be added to any\nTP/FT-10 channel and can be designed into any TP/FT-10 device. A TP/FT-10\nchannel with link power can support a combination of locally powered and link\npowered devices. Link powered devices can be created using a Neuron Chip and the\nEchelon LPT-11 Link Power Twisted-Pair Transceiver. The LPT-11 transceiver\nintegrates a link powered switching power supply that provides regulated +5VDC for\nthe device to power the Neuron Chip, application electronics, sensors, actuators, and\ndisplays. Each transceiver can provide +5VDC at up to 100mA.\n\nPower for a TP/FT-10 channel is supplied by a central 48VDC power supply, and\nflows through an LPI-10 Power Supply Interface onto the twisted pair wire (see\nFigure 5). The LPI-10 module isolates the power supply from wiring faults on the\ntwisted pair, couples power to the system wiring, and terminates the twisted pair\nnetwork.\n\nThere are two versions of the LPI-10 interface: a simple, low-cost, inductor-based\ndesign used with custom power supplies, and an electronic LPI-10 interface used\nwith off-the-shelf 48VDC power supplies.\n\nThe Control Network Protocol 34",
    "Page_35": "Senser——) or 14\nsnag Dove\n#\n\nFT Smart Transcelver |\nDevice\ny\n\nfi\n48VDC 42.4000 mine.\nPower LPI-10 ns 2 a= loadin\nSupply Interface tT ——\"= fas\nLPT-11 af\nDevice\nFT Smart\n\nTransceiver\nDevice\n\n \n\n \n\n \n \n\nLPT-11\nDevice\n\nFigure 5 Example TP/FT-10 with Link Power System Wiring\n\nEach link-powered device located along the twisted wire pair includes an integral\nswitching power supply. This supply regulates the voltage on the twisted pair down\nto +5VDC at currents up to 100mA for use by the device. Ifa high current or high\nvoltage device must be controlled, then the +5VDC power can be used to trigger an\nisolating high current triac, relay, or contactor.\n\nThe integral power supply does away with the need for a local AC-to-DC power\nsupply, charging circuit, battery, and the related installation and labor expenses.\nThe savings in money and time that results from eliminating the local power supply\ncan be up to 20% of the total system cost; the larger the system, the greater the\nsavings. Moreover, if standby batteries are used, then additional savings will be\nrealized throughout the life of the system, because only one set of batteries will\nrequire service.\n\nThe link power system uses a single point of ground, at the LPI-10 module, and all of\nthe link power transceivers electrically float relative to the local ground. Differential\ntransmission minimizes the effects of common mode noise on signal transmission. If\ngrounded sensors or actuators are used, then either the communication port or the\nI/O lines of the device must be electrically isolated.\n\nTP/FT-10 Transceivers\n\n \n\nFigure 6 FT 5000 Smart Transceiver\n\nSeveral TP/FT-10 transceivers are available that device manufacturers can use to\ncreate TP/FT-10 devices. For locally-powered devices, the Echelon FT 5000 Smart\nTransceiver provides the most cost-effective solution because it is the lowest cost\nsolution that combines a TP/FT-10 transceiver with a Neuron core that implements\nCNP and also executes the device application.\n\nThe Control Network Protocol 35",
    "Page_36": "The Echelon LPT-11 transceiver can be used with Neuron Chips from Echelon,\nCypress, or Toshiba to create link-powered TP/FT-10 devices. The LPT-11 includes\nan integral 100mA power supply for powering the link-powered device.\n\nTP/FT-10 Cables\n\nEchelon has qualified a variety of cables for use with TP/FT-10 channels. Based on\nthe cost, performance, and availability of these different cable types, system\ndesigners can choose the most appropriate cable for their application. Echelon has\nqualified the following generic cable types:\n\ne Ageneric 16AWG (1.3mm diameter) cable (similar to Belden 8471 or 85102)\ne NEMA Level 4 cable (this cable is not equivalent to TIA Category IV cable)\ne TIA Category 5 cable\n\ne JY(St)Y for specific applications in the European market\n\nThe electrical specifications for these cables can be found in the FT 5000 Smart\nTransceiver Data Book. A list of cable vendors can be found in the Junction Box and\nWiring Guidelines for Twisted Pair LONWORKS Networks engineering bulletin.\n\nThese cables have been qualified by Echelon in a generic form, and are available from\nvendors in a number of variations, including shielded, unshielded, plenum, and\nnon-plenum jacketing.\n\nTP/FT-10 Specifications\n\nTable 4 lists the transmission specifications for free topology TP/FT-10 channels.\nThe maximum total wire length is the total length of wire with a TP/FT-10 segment.\nThe specifications can be increased by using doubly-terminated bus topology as\nshown in Table 5.\n\ne Up to 64 locally-powered TP/FT-10 devices or 128 link-powered devices are\nallowed per network segment. If both locally-powered and link-power devices are\nused on a TP/FT-10 channel, a maximum of 128 network loads can be attached to\nthe channel, where a locally-powered device counts as two loads and a\nlink-powered device counts as one load.\n\ne For free topology TP/FT-10 channels, the distance from each transceiver to all\nother transceivers and to the termination (including the LPI-10 termination, if\nused) must not exceed the maximum device-to-device distance shown in Table 4.\nIf multiple paths exist, such as a loop topology, then the longest path should be\nused for calculations.\n\ne The average temperature of the wire must not exceed +55°C, although individual\nsegments of wire may be as hot as +85°C.\n\ne Asa general rule, the TP/FT-10 channel communication cables should be\nseparated from high voltage power cables. Local electrical codes must be followed\nwith regard to cable placement.\n\ne A doubly-terminated bus may have stubs of up to 3 meters from the bus to each\ndevice.\n\ne The sum of the application current of all the link-powered devices in a segment\nmust not exceed 3.2A at +5V.\n\nThe Control Network Protocol 36",
    "Page_37": "Table 4 TP/FT-10 Free Topology Transmission Specifications\n\n \n\n \n\n \n\n \n\n \n\nBelden 85102 500 500 500\nBelden 8471 400 500 400\nLevel IV, 400 500 400\n22AWG\n\nJY (St) Y 2x2x0.8 | 250 450 320\nTIA Category 5 250 450 400\n\n \n\n \n\n \n\nTable 5 TP/FT-10 Doubly-Terminated Bus Topology Transmission Specifications\n\n \n\nBelden 85102\n\n \n\nBelden 8471\nLevel lV, 22AWG\nJY (St) Y 2x2x0.8\nTIA Category 5\n\n \n\n \n\n \n\n \n\n \n\nTP/FT-10 Termination\n\nTP/FT-10 network segments require termination for proper data transmission\nperformance. The type of terminator varies depending on whether shielded or\nunshielded cable is used. Free topology and bus topology networks also differ in their\ntermination requirements.\n\nIn a free topology segment, only one termination is required and may be placed\nanywhere on the free topology segment. There are two choices for the termination:\nan RC network (Figure 7), with Ra = 52.83Q 41%, 1/8W, or an LPI-10 Link Power\nInterface, with the LPI-10 jumper at the “1 CPLR” setting.\n\nThe Control Network Protocol 37",
    "Page_38": "Ra\n\nCa | vv | Cb :\nUnshielded\ner + a Twisted Pair\n50Vmin 50Vmin (UTP)\neee\n\n   \n \n\nNotes:\n\ne Caand Cb are typically aluminum-electrolytic type for improved\nlongevity in the presense of ESD—observe polarity.\n\ne  Caand Cb are required for connection to link power networks.\n\nFigure 7 TP/FT-10 Termination RC Circuit\n\nIn a doubly terminated bus topology, two terminations are required, one at each end\nof the bus. There are two choices for each termination: an RC network (Figure 7),\nwith Ra = 105Q +1%, 1/8W, or an LPI-10 Link Power Interface, with the LPI-10\njumper at “2 CPLR” setting. Only one LPI-10 interface is supported per segment.\nThe LPI-10 contains one of the two required terminators. The other terminator must\nbe an RC-type as shown in Figure 7.\n\nWhen using shielded twisted pair, the twisted pair must be terminated according to\nthe guidelines listed in the previous paragraphs. In addition, the cable shield must\nbe grounded, as shown in Figure 8. The cable shield should be grounded using a\ncapacitor to tie the shield to earth ground, and a large-value resistor to bleed off any\nstatic charge on the shield.\n\n| Twisted Pair |\nTermination Circuit Ra |\nShielded\n| use | | an . ) Twisted Pair\n: Be | (STP)\n\n  \n\n50Vmin 50Vmin\n\n   \n \n \n \n\n  \n\nGrounding\nCe Circuit\n\nFigure 8 TP/FT-10 Termination and Grounding Circuit for Shielded Cable\n\nThe shield is tied to earth ground through a capacitor, instead of a direct connection,\nin order to avoid DC and 50/60 Hz ground paths from being formed through the\nshield. Typical values for Rb and Cc are as follows:\n\nCc = @.1uF, 10%, Metalized Polyester, = 100V\n\nThe Control Network Protocol 38",
    "Page_39": "Rb = 470kQ, 1/4W, +5%\n\nThe cable shield should be grounded at least once per segment, and preferably at\neach device.\n\n \n\nPL-20 Power Line\n\nThe easiest channel to install in a utility, home, or transportation system is one that\ncommunicates on the existing power line wiring in the power grid, home, or vehicle.\nPower line devices can simply be plugged into a power outlet with no further wiring\nrequired. The PL-20 channel type uses transceivers that conform to the ISO/IEC\n14908-3 Control Network Power Line (PL) Channel Specification. They also comply\nwith worldwide power line signaling regulations, including FCC, Industry Canada,\nJapan MPT, and European CENELEC EN50065-1 regulations. Worldwide\ncompliance means that PL-20 transceivers can be used in applications worldwide.\nThe European CENELEC communications protocol is automatically managed by\nPL-20 transceivers, eliminating the need for users to develop the complex timing and\naccess algorithms mandated under CENELEC EN50065-1 (the PL-20C channel\ntype). Additionally, PL-20 transceivers can operate in either the CENELEC utility\n(A-Band—the PL-20A channel type) or general signaling (C-Band—the PL-20C\nchannel type with CENELEC access control or PL-20N without) bands, eliminating\nthe need to stock multiple parts for different applications. These transceivers use\nnarrow-band signaling over a 115kHz—132kHz frequency band on power mains\nmedia and support a 5.4kbps raw bit rate in C-Band, and a 75kHz—86kHz frequency\nband on power mains media and support a 3.6kbps raw bit rate in A-Band.\n\nPL-20 transceivers offer the most robust, lowest cost means of communicating over\nAC or DC power lines using low, medium, or high voltage. Echelon offers a PL-20\ntransceiver that is a complete system-on-a-chip—featuring a highly reliable\nnarrow-band power line transceiver, a Neuron core for running applications and\nmanaging network communications, a choice of on-board or external memory, and an\nextremely small form factor—all at a price that is compelling for even the most\ncost-sensitive consumer product applications.\n\n \n\n   \n \n    \n    \n\nPL 3150-L10\nECHELON\npri)\n\n \n\n \n\nFigure 9 PL 3120 and 3150 Smart Transceivers\n\nPL-20 transceivers offer unmatched communication reliability. They use a\nsophisticated digital signal processing core employing patented noise cancellation\nand distortion correction algorithms. These features enable the transceivers to\ncorrect for a wide variety of impediments to power line signaling, including impulsive\n\nThe Control Network Protocol 39",
    "Page_40": "noise, continuous tone noise, and phase distortion. The result—Echelon’s PL-20\ntransceivers can successfully receive signals that other solutions cannot even detect.\nA unique dual carrier frequency feature automatically selects an alternate secondary\ncommunication frequency should the primary frequency be blocked by noise. The\ntransceivers use a highly efficient, low-overhead forward error correction (FEC)\nalgorithm in addition to a cyclical redundancy check (CRC) to overcome packet\nerrors. PL-20 transceivers have a dynamic range of > 80dB so that on a quiet line\nthe transceivers can receive signals that have been reduced by a factor of 100,000.\n\n&-Band G- Band\nFokHz) | SEkHz\n\n \n\nFigure 10 PL-20 Carrier Frequencies\n\nThe Echelon PL-20 transceivers are a field-tested, proven technology. The\nunderlying core technology used in the Echelon PL-20 transceivers was developed\nand optimized through years of field-testing in applications worldwide. Millions of\nEchelon narrow band transceivers have been deployed in a wide range of consumer,\nutility, building, industrial, and transportation applications.\n\nPL-20 Coupling Circuits\n\nThere are two methods of coupling a PL-20 transceiver to the power line:\nline-to-neutral coupling and Jine-to-earth coupling. These two methods, combined\nwith two sets of carrier frequencies, define three multiple power line channel types\nreferred to as PL-20C(L-N), PL-20N(L-N), PL-20C(L-E), PL-20N(L-E) and\nPL-20A(L-N). The PL-20C(L-N), PL-20N(L-N), and PL-20A(L-N) channel types use\nline-to-neutral coupling, and the PL-20C(L-E) and PL-20N(L-E) channel types use\nline-to-earth coupling. Most installations will consist of devices that use only one\nchannel type in order to achieve maximum communication reliability. However,\nPL-20C(L-N) and PL-20C(L-E) devices may be mixed within an installation with the\npossibility of significant loss (2 — 20dB) of communication margin between L-N and\nL-E devices depending on physical location and power line environment, as can PL-\n20N(L-N) and PL-20N(L-E). PL-20C and PL-20N devices cannot be mixed within an\ninstallation.\n\nThe PL-20C(L-N), PL-20N(L-N), and PL-20A(L-N) channel types specify coupling\ncircuits that transmit and receive the power-line communications signals between\nthe line and neutral mains conductors. Line-to-neutral coupling is typically used\nexcept when not permitted by local regulations.\n\nThe PL-20C(L-E) and PL-20N(L-E) channel types specify coupling circuits that\ntransmit and receive the power-line communications signals between the line and\nearth mains conductors.\n\nPL-20 Specifications\n\nTable 6 lists the transmission specifications for the PL-20 power line channels.\n\nThe Control Network Protocol 40",
    "Page_41": "Table 6 PL-20 Power Line Specifications\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nCoupling Technique | Line-to-neutral Line-to-earth Line-to-neutral\n\nBit Rate 5kbps 3600bps\n\nModulation BPSK\n\nFrequency Band 125kHz- 140kHz 70kHz-95kHz\n\nOutput Level <$ 116dBuV per EN50065-1 for Class 116 EN50065-1 compliance\n2115dBuV per EN50065-1 otherwise\n\nOutput Impedance |Z|s6Q |Z|s8Q, 120VAC |Z|s1.10\n129kHz- 134kHz |Z|s15Q, 240VAC 70kHz-95kHz\n\n129kHz-134kHz\nInput Impedance * 2100Q 125kHz-140kHz 25000 70kHz-95kHz\n\n \n\n \n\n \n\n\" Input impedance of transceiver and associated coupling circuit only. It does not include effect, if any, of system\npower supply.\n\nLayer 2— Link Layer\n\nThe link layer defines media access methods and data encoding to ensure efficient\nuse of a single communications channel. The raw bits of the physical layer are\nbroken up into data frames. The link layer defines when a source device can\ntransmit a data frame, and defines how destination devices receive the data frames\nand detect transmission errors. A priority mechanism is also defined to ensure\ndelivery of important messages.\n\nWhen a device has a message to send, the link layer protocol defines the timing of\nwhen the message is transmitted. Prior to transmitting a message, each device waits\nfor the communications channel to become idle. Because multiple devices may be\nwaiting simultaneously for the channel to become idle, each device waits for a\nrandom interval prior to transmitting. If another device starts transmitting during\nthe waiting interval, the process is repeated. A unique CNP feature is that the\nnumber of randomizing slots increases as network load increases. This feature\nensures reliable sustained network performance, even for networks that are heavily\nloaded.\n\n \n\nMedia Access\n\nCNP uses a unique media access control (MAC) algorithm that enables an overloaded\nchannel to operate close to its maximum capacity. Other MAC algorithms tend to\ndegrade near maximum capacity due to excess collisions consuming the available\nbandwidth.\n\nMany different MAC algorithms exist in networks today. The three most common\nare token ring, token bus, and carrier sense multiple access (CSMA). The MAC\nalgorithm used by CNP belongs to the CSMA family.\n\nThe Control Network Protocol 41",
    "Page_42": "Token Ring\n\nThe token ring MAC algorithm ensures orderly access to a communications channel\nby passing a token in an orderly fashion between each device on the channel. To\nensure that only one device has the token at a time, the devices are linked in a daisy\nchain ring. This algorithm is not well suited to control applications for the following\nreasons:\n\ne It is not suitable for open media such as power line, RF, or infrared because all\nstations receive the token simultaneously and cannot be linked in a ring.\n\ne It increases the cost of each device in a control network because every device\nrequires additional hardware to recover the token when it is lost and to ensure\nthe continuity of the ring.\n\ne In an existing network, it is disruptive to add new devices or replace existing\nones. The ring must be broken to add or change a device, temporarily bringing\ndown the entire network.\n\ne Message latency increases as devices are added to a channel.\n\nToken Bus\n\nA token bus architecture solves the problem of sequential passing of a MAC token by\nincluding addressing information in the token. However, at low data rates, the\nprocess of circulating the token can result in considerable token latency. Because a\ndevice cannot transmit without first possessing the token, this latency adversely\naffects response time, which is a key parameter for control networks.\n\nAdditionally, token bus systems must reconfigure themselves each time a new device\neither becomes active or drops out. This overhead to reconfigure is a problem for all\ntoken bus networks. Because reconfiguration brings the network down for its\nduration, battery-powered devices whose normal operation is to wake up, send some\nmessages, and power down, would cause the token bus system to suffer frequent\nreconfigurations. Battery-powered devices are required for applications needing RF\nor IR communication, for security applications, and for fire/life safety applications, to\nname a few.\n\nCarrier Sense Multiple Access (CSMA)\n\nThe CSMA family of MAC algorithms is better suited for control networks than token\nring or token bus. The CSMA algorithms require a device to establish that the\nmedium is idle before it begins to transmit. However, each algorithm behaves\ndifferently once the idle state is detected. This results in very different network\nperformance results under conditions of heavy data traffic.\n\nSome CSMA algorithms use discrete intervals of time called slots, or randomizing\nslots, to access the medium. By limiting access to the medium by a given device to\nspecific time slots, slotted media access greatly reduces the probability of two packets\ncolliding. The most common form of slotted media access is p-persistent COMA. In\np-persistent CSMA, when a device has a message to send, it does so in a given\nrandomizing slot with probability p. This algorithm is used by many popular CSMA\nprotocols.\n\nThe Control Network Protocol 42",
    "Page_43": "The link layer protocol for Ethernet as defined by IEEE 802.3 uses a degenerate form\nof p-persistent CSMA called J-persistent CSMA. This version of CSMA depends on\ncollision detection which is not practical on many communications media used by\ncontrol networks.\n\nControl networks may consist of thousands of devices and multiple media on a single\nnetwork. Because of the characteristics of different communications media and the\npotential need to cover large distances, LONWORKS networks must be able to support\nhigh-speed and low-speed channels, which may occasionally carry traffic approaching\nthe channel's capacity. CSMA/CD (for example IEEE 802.3) behaves poorly during\nperiods of overload, so it is generally not used for control applications. P-persistent\nCSMA works very well for small values of p (that is, many randomizing slots) at the\nexpense of additional delay during relatively idle periods.\n\nThe CSMA family of MAC algorithms does not require a ring topology,\nsynchronization or reconfiguration, and does permit new devices to be added or\nexisting devices to drop out and rejoin the network transparently. Additionally, it\nsupports many devices and is inexpensive to implement in hardware. The CNP MAC\nalgorithm has the advantages of p-persistent CSMA without the disadvantages of\nadditional delay during low traffic, significantly reduced throughput under conditions\nof high traffic, or the requirement for expensive collision detect hardware.\n\nPredictive P-Persistent CSMA\n\nCNP uses a variant of the p-persistent CSMA MAC algorithm called predictive\np-persistent CSMA. CNP retains the benefits of CSMA but overcomes its\nshortcomings for control applications. Existing media access control algorithms such\nas IEEE 802.2, 802.3, 802.4, and 802.5 do not meet all the CNP requirements for\nmultiple communication media, sustained performance during heavy loads, and\nsupport for large networks.\n\nAs in p-persistent CSMA, all LONWoRKS devices randomize their access to the\nmedium. This avoids the otherwise inevitable collision that results when two or\nmore devices are waiting for the network to go idle so that they can send a packet. If\nthey wait for the same duration after backoff and before retry, repeated collisions will\nresult. Randomizing the access delay reduces collisions. In CNP, devices randomize\ndifferent levels of delay called beta 2? slots, shown in Figure 11.\n\n| Packet Cycle\n\n“\nPacket Packet\n\n \n\nBeta 2 Slots\n\nFigure 11 Beta 2 Slots\n\nIn p-persistent CSMA when a device has a message to send, it does so in a given\nrandomizing slot with probability p. However, CNP carries the added improvement\nthat pis dynamically adjusted based upon network load. When the network is idle,\nall devices randomize over 16 beta 2 slots. Thus the average delay in an idle network\n\nThe Control Network Protocol 43",
    "Page_44": "is eight slot widths. When the estimated network load increases, devices may\nrandomize over a larger number of beta 2 slots. The number of slots increases by a\nfactor of n, where the range of n is from 1 to 63. Therefore, the maximum number of\nbeta 2 slots is 63 * 16, or 1008. In CNP, nis called the estimated channel backlog. It\nrepresents the number of devices with a packet to send during the next packet cycle.\n\nThis method of estimating the backlog and dynamically adjusting the media access\nallows CNP to have a small number of beta 2 slots during periods of light load, while\nhaving the benefit of many beta 2 slots during periods of heavy load. Thus, media\naccess delays are minimized during periods of light load, and collisions are minimized\nduring periods of heavy load.\n\nThe ability to adjust the number of beta 2 slots depends on the ability to estimate the\nchannel backlog. In CNP, a transmitting device includes information in the packet\non the number of acknowledgements expected as a result of sending that packet. All\nthe devices that receive the packet increment the estimated channel backlog by that\namount. Likewise, the estimated channel backlog is decremented by 1 at the end of\neach packet. The estimated channel backlog is never decremented below 1. Because\nCNP packets are frequently acknowledged, even when the destination is a group of\ndevices, 50% or more of the channel backlog is predictable at any time.\n\nIn summary, the CNP MAC algorithm specifically overcomes the shortcomings of\nexisting MAC algorithms using a unique collision avoidance mechanism. To avoid\ncollisions, all LONWORKS devices randomize their access to the communication\nmedium using time slots. CNP dynamically adjusts the number of time slots by\npredicting the channel backlog. By actively managing the collision rate, CNP\nprovides a superior MAC algorithm that is not dependent on collision detection\nhardware.\n\n \n\nPriority\n\nA key requirement of control networks is timely response to priority messages. CNP\nincludes an optional priority mechanism to improve the response time of critical\npackets. When a device tries to access the communication medium, priority\nmessages are given earlier access than non-priority messages. The protocol permits\nthe network management tool to allocate a fixed number of beta 2 slots per channel\nas priority time slots dedicated to priority devices. The number of priority slots can\nbe from 0 to 127. The network management tool that assigns priority slots to\nindividual devices can ensure that one and only one device is assigned to a particular\npriority slot on the channel. Each priority time slot on a channel adds a minimum of\ntwo bit times to the transmission of every message. The amount of overhead will\nvary based upon the bit rate, oscillator accuracy, and transceiver requirements. For\nexample, using a TP/XF-1250 1.25Mbps twisted pair transceiver with all devices on\nthe channel having an oscillator accuracy of 0.02% (200ppm) or better, each priority\nslot is 30 bit-times wide. Because there is no contention for the media during the\npriority portion of a packet cycle, devices configured with priority have better\nresponse time than non-priority devices.\n\nFigure 12 illustrates priority and non-priority beta slots. The value mis the number\nof priority slots. It is controlled by the network management tool used to install the\ndevices on a channel. Its value may be zero to 127. The value nis the number of\nnon-priority slots. It is calculated by each device on a channel and may be any value\nfrom 16 to 1008 - m.\n\nThe Control Network Protocol 44",
    "Page_45": "Packet Cycle\n\n77\n—__ Packet 1423)... mj1)2j 3)... 1 Packet\n\nPriority Slots Non-priority Slots\nFigure 12 Beta 2 Slots With Priority\n\n \n\nThe priority slot assigned to a device applies to all priority packets sent from that\ndevice. One, all, or some of the packets sent from a device may be marked as using\npriority service. The priority designation within a device is made on a per network\nvariable or per message tag basis, and may be set at compile time. In the case of\nnetwork variables, the priority designation can optionally be changed during or after\ninstallation.\n\nLower priority numbers indicate higher levels of priority: a priority packet from a\ndevice assigned priority slot 2 will be transmitted before a priority packet from a\ndevice assigned priority slot 4. Setting a device’s priority to 0 indicates that none of\nits packets will be transmitted in a priority slot, regardless of the message service\nassignment made at device compilation or installation time. Slot 1 is reserved for a\nnetwork management tool, to ensure that no application can render a channel\nincapable of interruption by a network management tool. Slots 2 through 127\n(depending on the medium, and the number of slots allocated on the channel) are\nthen available for prioritized packets from designated devices.\n\nWhen a priority packet is generated within a device, it travels out of the device on a\npriority queue, ahead of any pending non-priority packets buffered for transmission.\nSimilarly, when a priority packet reaches a router, it goes to the head of the router\nqueue (behind any other queued priority packets) and is forwarded to the far channel\nusing the router’s priority slot if one has been configured.\n\nThe effectiveness of priority depends on all devices preparing to send a message\nbeing synchronized on the end of the previous packet. When the sending devices are\nsynchronized, then the priority time slots remain uncontested. Priority assignment\nhas two limitations: (i) a maximum of 126 devices per channel may be assigned\npriority; and (ii) reserving time slots pre-allocates bandwidth. The first limitation is\nnot a factor for channels that support fewer than 126 devices. For a TP/XF-78\ntwisted-pair transceiver using interoperable communications parameters, each\npriority slot is 5.6 bit times wide. Using a TP/XF-1250 twisted-pair transceiver with\ninteroperable communications parameters the priority slots are 30 bit times wide. In\neffect, the length of each non-priority packet is increased by the time required for\npriority slots, thus using up channel bandwidth.\n\n \n\n \n\nFrame Format\n\nWhen a device has a message to send, it uses the MAC algorithm to decide when to\nsend it. When the device sends the message, the bits within the message are encoded\nas a frame. The frame has the following components: the preamble, link layer\nheader, network layer datagram, CRC, and end-of-packet indicator. A CNP frame\nhas the following format (bit-sync is a variable number of bits, but must be at least 6\nbits long):\n\nThe Control Network Protocol 45",
    "Page_46": "msb Isb\nBit-sync (configurable number of 1 bits)\nPath Delta Backlog\nNetwork Layer Datagram (6 to 246 bytes)\nCCITT CRC-16 (2 bytes)\n\n \n\n \n\n \n\n \n\n \n\n \n\nFigure 13 illustrates the physical encoding of a CNP frame on the communications\nchannel.\n\nt\ni\n4 4\ndata OM LS LI LIS COON\nTransmit ff\nEnable\nHH 1: ti tt rt tt\n\nBit Sync Byte Data +16 bit CRC Line-Code Betal Beta2\n\nPreamble Sync Violation\n\nFigure 13 Packet Timing\n\nFor differential and single-ended modes, the transmitter transmits a preamble at the\nbeginning of a packet to allow the other devices to synchronize their receiver clocks to\nthe transmitter’s clock. The use of a preamble allows every device on a channel to\nhave an asynchronous clock. The preamble allows devices with independent clocks to\nsynchronize their bit and byte sampling times.\n\nThe preamble consists of a bit-sync field and a byte-sync field. The bit-sync field is a\nseries of Differential Manchester 1’s; its duration is set to the same value for every\ndevice on a channel and is at least six bits long. The byte-sync field is a single bit\nDifferential Manchester 0 that marks the end of the preamble, and immediately\nprecedes the beginning of the first byte of the packet.\n\nThe frame is terminated with an idle period on the channel. An idle period is\nindicated by a lack of transitions on the channel for longer than 2 bit times. For\ndifferential and single-ended modes, the transmitter indicates the end-of-packet by\nforcing a Differential Manchester line-code violation; that is, it holds the data output\ntransitionless long enough for the receiver to recognize an invalid code that signals\nthe end of transmission. The data output can be either high or low for the duration\nof the line-code violation, depending on the state of the data output after\ntransmitting the last bit. The line-code violation begins after the end of the last CRC\nbit and lasts for at least 2 bit times. The last bit does not have a trailing clock edge,\nso the data output actually remains transitionless for at least 2.3 bit times.\n\nFor special purpose mode, the preamble and end-of-packet indicator are managed by\nthe transceiver. The preamble and end-of-packet indicator may be similar to those\nused by differential and single-ended modes, but is not required to be the same.\n\nThe Pri field specifies the priority of the frame. A value of 0 is used for non-priority\nframes, and a value of 1 is used for priority frames.\n\nThe Path field specifies the channel to use for special purpose mode transceivers. A\nspecial purpose mode transceiver can be interfaced to two physical channels or to two\nphysical bit encodings on the same channel. This allows error recovery by switching\n\nThe Control Network Protocol 46",
    "Page_47": "to an alternate channel if message transmission on the primary channel fails. A\nvalue of 0 is used for the primary channel and a value of 1 is used for the alternate\nchannel. The transport layer specifies the alternate channel for the last two retries\nof an acknowledged message.\n\nThe Delta Backlog field specifies a channel backlog increment. Receiving devices add\nthis value to their backlog estimate to account for transmission of this frame.\n\nThe CRC field is a 16-bit CRC computed using the CCITT CRC-16 standard\n\npolynomial, which is X16 4 .x124X%541. The polynomial is computed over the entire\npacket and link layer header.\n\nLayer-2 Performance\n\nCNP Predictive p-Persistent CSMA Performance\n\nThe CNP predictive algorithm works best when a majority of the CNP packets on a\nchannel are acknowledged. The number of acknowledgements that a given packet\ngenerates is encoded into each acknowledged packet. Each device on the channel\nreceives all the acknowledged packets on the channel and adds the number of\nacknowledgements to the channel backlog. If none of the packets is acknowledged,\nthe predictive part of the algorithm does not dynamically expand the number of\nrandomizing slots with an increase in load. Using exclusively unacknowledged\nservices causes CNP to behave like a non-predictive p-persistent CSMA where p =\n0.0625. However, even this degenerate case is still significantly better than IEEE\n802.3 (which is a p-persistent CSMA protocol where p = 1) under conditions of heavy\nnetwork traffic.\n\n \n\n \n\n \n\n \n\n1200 T 20\n1100 Throughput vs _—\n. Collision Rate A : 16 %\nrt ao al\n700 a I\npackets/ 9 —_— i\n500 . a s Ss\n400 —_ i\n300 a\n200 — —2 “os\n100 —_ a\n\nOe =\n\n7 0\n0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200\n\nOffered Traffic\n\n \n\n \n\n \n\n \n\n \n\n1 — 13 Throughput . L4 Throughput Collision Rate\n\n \n\nFigure 14 Effective Network Throughput vs. Offered Traffic Using Unacknowledged Services\n\nThe results of two benchmarks used to illustrate this point are shown in Figure 14\nand Figure 15. The graphs shown in these figures illustrate results achieved from a\ntest bed of 34 devices. Thirty-two of the devices acted as traffic generators. The\nother two acted as test devices, repeatedly sending messages to each other at\n\n \n\n \n\nThe Control Network Protocol 47",
    "Page_48": "different traffic levels. Both graphs show the amount of actual traffic that got\nthrough on the network versus the offered traffic, or the number of packets\nattempted for transmission.\n\nFigure 14 shows this data using exclusively unacknowledged packets. In this mode,\nthe network behavior is similar to a 0.0625-persistent CSMA algorithm. The graph\n\nshows how the network throughput is nearly proportional with offered traffic and up\nto 1200 packets/sec.\n\n    \n  \n \n\n20\n\n \n\n1100\n1000 Throughput vs\n900 Collision Rate\n600\nTO\n\n \n\n \n\nis %\nc\n\n \n\n600 ”\npackets’s 500\n400\n300\n\n200\n\n  \n\nSaturation Point\n\n—\ni | ®\n\n° w 150 25 300 35 450 525 600 635 80 625 900\noffered traffic (packets 9\n\n100\n0\n\n \n\nOO 15 Throughput\n\n \n\nId Th mughput en Collision Rate\n\n \n\n \n\n \n\nFigure 15 Effective Network Throughput vs. Offered Traffic Using Acknowledged Services\n\nTo demonstrate the effectiveness of the predictive algorithm, the experiment was\nre-run with only one change. In this case, messages used acknowledged services.\nFigure 15 shows the data derived from this experiment. The graph shows that\nnetwork throughput degrades slightly with an increase in offered traffic past the\nsaturation point.\n\nFigure 14 and Figure 15 illustrate how the collision rate grows slowly, even past the\nchannel saturation point. This active management of the collision rate is what\nmakes the CNP predictive p-persistent CSMA algorithm superior to other CSMA\nalgorithms.\n\nMedia Access Delay and Offered Traffic\n\nWhen a device on a network tries to send a message, it must first wait for the\nmedium to be idle. The time delay between when a device queues the packet to send\nand the time that it is actually sent on the network plays a role in the response time\nof that message. This delay is known as the media access delay. As the offered\ntraffic (the total number of packets per second offered for transmission by all the\ndevices on a channel) on a given channel of a network increases, the media access\ndelay increases. In networks loaded to near-capacity, when many devices are trying\nto send messages, this delay can be significant. In designing a network to meet\nspecified response times, the worst-case offered traffic must be considered and\ndesigned for.\n\nFollowing is an example of assessing the impact of media access delay: For an\nexample 78kbps channel type, the preamble is 23.5 bit times, the average packet size\nis 112 bits (14 bytes), and the average number of bit times between each packet is 48.\nThe amount of time a typical message spends on the media is 183.5 (= 23.5 + 112 +\n48) bit times on the channel. The maximum rate at which packets can be sent on\n\nThe Control Network Protocol 48",
    "Page_49": "this channel is therefore 425 packets (=78125/183.5) per second, and each packet\ncycle requires 2.3ms.\n\nFor this example, if a device on this network requires a maximum response time\nrequirement of 50 ms, we must set a bound on the offered traffic to limit the media\naccess delays. At 78 kbps with 183.5 bit packet cycles it takes this network 50 ms to\nsend 25 packets. If the packets on the channel may be sent at any time, including all\nat once, then, in order to always meet the requirement of 50 ms without using any\nspecial priority features, the channel should never have an offered traffic greater\nthan 21 packets per second. As this example illustrates, the response time\nrequirements of devices on a network must be used to design the network and ensure\nthat the offered traffic does not cause unacceptable media access delays\n\nLayer 2 Channel Throughput\n\nLayer 2 channel throughput depends on the bit rate, oscillator frequencies and\naccuracy, transceiver characteristics, average packet size, and the use of\nacknowledgments, priority, and authentication on the channel. An average packet is\nin the range of 10 to 16 bytes long, depending on the length of the domain identifier,\nthe addressing mode, and size of the data field. The maximum packet size is 249\nbytes including data, addressing, and protocol overhead.\n\nAt low bit rates or with long packets, channel throughput is bounded by the packet\ntransmission time and average media access delay. At higher bit rates with short\npackets, the packet processing power of the Neuron core limits channel performance.\n\nTable 7 and Table 8 estimate the approximate network throughput as a function of\nbit rate and packet size. The “peak” traffic numbers can be supported for short\nbursts.\n\nTable 7 CNP Channel Throughput With 12-byte Packets\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nThe Control Network Protocol 49",
    "Page_50": "Table 8 CNP Channel Throughput With 64-byte Packets\n\n \n\n \n\n \n\n \n\n \n\n \n\n4.883 7 5\n\n9.766 13 10\n19.531 25 20\n39.063 50 40\n78.125 100 80\n\n \n\n \n\nLayer 3— Network Layer\n\nThe network layer defines how message packets are routed from a source device to\none or more destination devices. This layer defines naming and addressing of devices\nto ensure the correct delivery of packets. Messages can be addressed to a single\ndevice, to any group of devices, or to all devices. Group addressing reduces network\ntraffic by supporting the delivery of a single message packet to multiple devices.\n\nThis layer also defines how messages are routed between the source and destination\ndevices when these devices are on different communication channels. Addresses are\nformed using a hierarchical structure which supports the use of routers that filter\nmessages based on their destination address. By supporting routers at the network\nlayer, CNP supports the installation of very large systems with thousands of devices.\nRouters use the network layer to confine traffic to segments within a large network,\nthereby increasing total capacity of the network.\n\n \n\nNaming and Addressing\n\nA name is an identifier that uniquely identifies a single object within an object class.\nA name is assigned when an object is created and does not change over its lifetime.\nTo ensure that every LONWORKS device can be uniquely distinguished from every\nother LONWORKS device, every Neuron core includes a unique 48-bit ID called the\nNeuron ID. This ID will always be unique for every Neuron core and does not change\nover the lifetime of the Neuron core.\n\nAn address is an identifier that uniquely identifies an object or group of objects\nwithin an object class. Unlike a name, an address may be assigned and changed any\ntime after an object is created.\n\nCNP addresses uniquely identify the source device and destination device (or devices)\nof a CNP packet. These addresses are also used by intelligent routers to selectively\npass packets between two channels.\n\nA Neuron ID may be used as an address. However, the Neuron ID is not used as the\nsole form of addressing in CNP because such addressing only supports one-to-one\ntransactions (that is, no groups), complicates device replacement, and would require\nexcessively large routing tables and time-consuming processing to optimize network\ntraffic. This addressing mode is used primarily during installation and\n\nThe Control Network Protocol 50",
    "Page_51": "configuration, because it allows communications with a device before the device has\nbeen assigned an address.\n\nTo simplify routing, CNP defines a hierarchical form of addressing using three\naddress components: the domain, subnet, and node addresses. This form of\naddressing can be used to address an individual device or collections of devices\nsharing common subnet or domain address components. To further facilitate the\naddressing of multiple dispersed devices, CNP defines another class of addresses\nusing domain and group addresses.\n\nThe use of a dynamically assigned address instead of a fixed name simplifies\nreplacement of devices in a functioning network. The replacement device is assigned\nthe same address as the device it replaces. Thus all references to this device from\nelsewhere on the network do not need to be modified, as would be the case if Neuron\nID addressing were to be used.\n\nThe various address forms are described in the following sections, along with\ndiscussions on routers and address generation.\n\nThe Domain Address Component\n\nA domain is a logical collection of devices on one or more channels. Communications\ncan only take place among devices configured in a common domain; therefore, a\ndomain forms a virtual network. Multiple domains can occupy the same channels, so\ndomains may be used to prevent interference between devices in different networks.\n\nFor example, two adjacent buildings using devices with power line transceivers on\nthe same frequency may be on the same channel. To prevent interference between\nthe applications carried out by the devices, the devices in each building would be\nconfigured to belong to different domains.\n\nThe Neuron core may be configured so that it belongs to one or two domains. A\ndevice that is a member of two domains may be used as a gateway between the two\ndomains. CNP does not support communications between domains, but an\napplication program may be implemented to forward packets between two domains.\n\nA domain is identified by a domain ID. The domain ID may be configured as 0, 1, 3,\nor 6 bytes. Six byte domain IDs can be used to ensure that the domain ID is unique:\nfor example, using the 48-bit Neuron ID of one of the Neuron cores in the domain as\nthe domain ID ensures that no other network can have the same domain ID, because\nall Neuron IDs are unique. However, six byte domain IDs add six bytes of overhead\nto every packet. The overhead may be reduced by using a shorter domain ID. Ina\nsystem where there is no possibility of interference between multiple networks, the\ndomain ID may be configured as 1 byte (zero byte domain IDs are supported by CNP,\nbut reserved for administrative purposes). Domain IDs may be configured as 1 or 3\nbytes in systems where a single administrator controls assignment of domain IDs to\nprevent duplicate IDs.\n\nThe domain ID can also be used for application-level purposes. For example, a\ndomain ID could be used by service personnel as a system identifier.\n\nThe Control Network Protocol 51",
    "Page_52": "The Subnet Address Component\n\nA subnet is a logical collection of up to 127 devices within a domain. Up to 255\nsubnets can be defined within a single domain. All devices in a subnet must be on\nthe same segment (subnets cannot cross intelligent routers). Figure 16 illustrates six\ndevices installed in two subnets. The six devices are physically attached to the same\ncommunications channel.\n\nChannel\n\n \n\nSubnet 1 Subnet 2\nFigure 16 Multiple Subnets on a Single Channel\n\nFigure 17 illustrates seven devices installed in two subnets. The seven devices are\nphysically attached to two communications channels. The two channels are on a\ncommon segment because they are connected by a repeater.\n\nChannel 1\n\n   \n \n\nSubnet 1\n\nSubnet 2\n\nFigure 17 Two Subnets on a Common Segment\n\nFigure 18 illustrates a network with a router. An additional subnet is required\nbecause subnets cannot cross intelligent routers.\n\nThe Control Network Protocol 52",
    "Page_53": "Channel 1\n\nRouter\n\n    \n \n\nSubnet 1 Subnet 2 Channel 2\n\nSubnet 3\n\nFigure 18 Three Subnets on Two Segments\n\nIf a device is configured to belong to two domains, it must be assigned to a subnet\nwithin each of the domains. Device 4 in Figure 19 is a member of two domains, and\nis assigned to subnet 1 in both domains. The subnet numbers do not have to match\nin the two domains.\n\n \n\nDomain 1 Domain 2\nSubnet 1 Subnet 1\n\nFigure 19 Device Configured in Two Domains\n\nAll devices within a domain are typically configured in the same subnet except in the\nfollowing cases:\n\n+ They are located on different segments with intervening intelligent routers.\nBecause subnets cannot cross intelligent routers, the devices must be on different\nsubnets.\n\n* Configuring the devices in the same subnet would exceed the maximum number\nof devices allowed in a subnet. Subnets are limited to 127 devices. Multiple\nsubnets may be configured on a segment to increase the capacity of the segment\nabove 127 devices (up to the limit of the channel used by the subnet). For\nexample, a segment with two subnets may have up to 254 devices; three subnets\nmay have up to 381 devices; and so on.\n\nThe Node Address Component\n\nEvery device within a subnet is assigned a unique node ID within that subnet. The\nnode ID is 7 bits, so there may be up to 127 devices per subnet. A maximum of\n32,385 devices (255 subnets x 127 devices per subnet) may be in a single domain.\n\nThe Control Network Protocol 53",
    "Page_54": "Each configured device can be uniquely identified using its combination of domain\nID, subnet ID, and node ID.\n\nGroups\n\nA group is a logical collection of devices within a domain. Unlike a subnet, however,\ndevices are grouped together without regard for their physical location in the domain.\nThe Neuron firmware implementation of CNP allows a device to be configured to be a\nmember of up to 15 groups, other implementations have different limits.\n\nGroups are an efficient way to use network bandwidth for messages addressed to\nmultiple devices (that is, one-to-many connections). Figure 20 illustrates a network\nwith two groups. Group 1 consists of devices 1, 2, 3, 10, 11, and 12. Group 2 consists\nof devices 3, 4, 5, and 7. Device 3 is in both groups.\n\nGroup 1 [ae\n\n \n\nChannel 4\n\n \n\nFigure 20 Groups Spanning Channels and Routers\n\nGroups are identified by a one-byte group number, so a single domain may contain\nup to 256 groups. Layer 6 adds another addressing layer on top of the layer-3\naddresses for data points. As a result, it is possible to reuse group IDs when group\nIDs are used in combination with layer-6 addresses.\n\nNeuron ID\n\nIn addition to the subnet/node ID address, a device may always be addressed by a\nunique ID call the Neuron ID. The Neuron ID is 48-bits long, and is assigned when\n\nThe Control Network Protocol 54",
    "Page_55": "each CNP device is manufactured. This ID is unique worldwide for every CNP\ndevice.\n\nThe Neuron ID is used by a network tool in the initial configuration of devices at\ninstallation time to assign each device in a network to one or two domains, and to\nassign subnets and node ID numbers. Neuron ID addressing is not used for\napplication messages except in self-installed systems by a user-interface controller.\n\n \n\nAddressing Formats\n\nCNP devices are addressed using one of five addressing formats. The particular\naddressing format used determines the number of bytes required for the source and\ndestination address. Table 9 defines the formats and number of bytes required for\neach. The total address size is computed by adding the appropriate number of bytes\nindicated in the table to the size of the domain ID, which can range from 0 to 6 bytes\ndepending on the configured size of the domain ID.\n\nTable 9 CNP Address Formats\n\n \n\nDomain-wide Broadcast Domain (Subnet = 0) All devices in the\ndomain\n\n \n\nSubnet-wide Broadcast Domain, Subnet All devices in the\nsubnet\n\n \n\nMulticast Domain, Group All devices in the\ngroup\n\nUnicast Domain, Subnet, Node Specific device within\na subnet\n\n \n\n \n\n \n\n \n\n \n\nNeuron ID Domain, Neuron ID Specific device\n\n \n\n \n\nAddress Table\n\nEach CNP device contains an address table that contains addressing information\nthat can be managed by a network management tool in a managed network, or by the\nCNP implementation on the device in a self-installed network. A CNP application\ncan specify an address for an outgoing message by referencing an entry in the\naddress table. This type of address is called an implicit address. Alternatively, a\nCNP application can specify the full layer-3 address for an outgoing message. This\ntype of address is called an explicit address.\n\nThe advantage of implicit addressing is that it eliminates the requirement for a CNP\napplication to manage destination addresses. Layer-3 addresses are typically\nallocated and managed by the network management tool in a managed network or\nthe ISI engine in a self-installed network. The CNP application can send a message\nusing a fixed index into the address table rather than attempting to determine the\nfull layer-3 address for each message.\n\nThe Control Network Protocol 55",
    "Page_56": "The advantage of explicit addressing is that it allows a CNP application to send\nmessages to more destination addresses than can be stored in the address table. An\naddress table may contain up to 65,535 entries, but different CNP implementations\nmay have lower limits. The Neuron firmware is limited to a maximum of 15 entries\nin the address table.\n\nThe address table also specifies the groups that the CNP device belongs to. When an\nincoming group-addressed message is received, the CNP implementation searches\nthe address table for a matching group ID. As a result, the number of entries in the\naddress table for a CNP device is the upper limit on the number of groups that the\ndevice may be a member of. The limit is reduced by the number of non-group implicit\naddresses stored in the address table.\n\n \n\nR outers\n\nRouters are infrastructure devices that connect two channels and route packets\nbetween them. Routers can be installed to use one of four routing algorithms:\n\n* Repeater. A repeater is the simplest form of router, simply forwarding all valid\npackets between the two channels. Using a repeater, a subnet can exist across\nmultiple channel segments.\n\n+ Bridge. A bridge forwards all packets which match its domains between the two\nchannels. Using a bridge, a subnet can exist across multiple channel segments.\n\n* Learning Router. A learning router monitors the network traffic and learns the\nnetwork topology at the domain/subnet level. The learning router then uses its\nknowledge to selectively route packets between channels. Learning routers\ncannot learn group topology, so all packets using group addressing are forwarded.\n\n* Configured Router. Like a learning router, a configured router selectively routes\npackets between channels by consulting internal routing tables. Unlike a\nlearning router, the contents of the internal routing tables are defined by a\nnetwork management tool. A network management tool can optimize network\ntraffic by defining routing tables for both subnet and group address routing.\nConfigured routers do not execute the learning algorithm as a learning router\ndoes. Instead, the network management tool pre-configures the router’s\nforwarding tables at the time of installation, based on the tool’s knowledge of the\nnetwork topology.\n\nConfigured routers and learning routers are a class of routers known as intelligent\nrouters.\n\nChoosing Between Learning and Configured Routers\n\nInitially, each learning router sets its internal routing tables to indicate that all\nsubnets could lie on either side of the router. Figure 21 illustrates a network with\ntwo learning routers. If device 5 generates a message addressed to device 2, channel\n2 will carry the message to learning routers 1 and 2. Examining the source subnet\nfield of the message, learning router 1 notes in its internal routing tables that subnet\n2 lies below it. The router then compares the source and destination subnet IDs.\nBecause they are different, the message is passed on.\n\nThe Control Network Protocol 56",
    "Page_57": "Channel 1\n\n \n\nSubnet 1 Channel 2\n\n \n\n   \n \n\nChannel 3 Subnet 2\n\nSubnet 3\n\nFigure 21 Learning Routers\n\nMeanwhile, learning router 2 has also passed on the message, making an appropriate\nnotation in its internal routing tables regarding the location of subnet 2.\n\nIf device 2 generates an acknowledgement, the acknowledgement is picked up by\nlearning router 1, which now notes the location of subnet 1. Learning router 1\nexamines its internal routing tables, and, upon discovering that subnet 2 lies below,\npasses the message on. When the message appears on subnet 2, it is noted by both\ndevice 5 (the destination device), and learning router 2, who does not pass it on but\nmerely notes that subnet 1, like subnet 2, lies somewhere above. Learning router 2\nwill not learn of the existence or location of subnet 3 until a message is originated\nfrom there.\n\nConfigured routers should always be used when possible for the following reasons:\n\n+ The initial flood of traffic that occurs while a learning router is learning the\nnetwork topology may cause congestion problems.\n\n+ The network topology may have inadvertent “loops,” which are common in power\nline and RF networks, that can cause a learning router to develop an inaccurate\nnetwork image.\n\n+ Learning routers do not learn about groups but configured routers can be\nconfigured to selectively forward group addressed packets.\n\nSubnets cannot cross intelligent routers. While bridges and repeaters allow subnets\nto span multiple channels, the two sides of an intelligent router must belong to\nseparate subnets. The fact that intelligent routers are selective about the packets\nthey forward to each channel can be used to increase the total capacity of a system in\nterms of devices and connections. In general, it is always a good idea to segment\ntraffic among “communities of interest” if possible.\n\nThe Control Network Protocol 57",
    "Page_58": "Physical Layer Repeaters\n\nSome channel types support physical layer repeaters (PLRs). A physical layer\nrepeater receives and forwards packets between two or more ports and can be used to\novercome a channel’s device count or cable length limitations in some cases.\n\nWhile a physical layer repeater does not forward pure noise (it is not just a\nbi-directional amplifier), PLRs contain no intelligence, and will therefore forward any\npacket, even one that might have been corrupted as result of a collision.\n\nA router should be preferred to a physical layer repeater, but PLRs offer a low-cost\nalternative to routers in some cases.\n\n \n\nDatagram Format\n\nThe network layer builds a datagram by adding a network header to a transport\nlayer packet. A CNP datagram has the following format:\n\nmsb Isb\nVersion Packet Addr Format\nFormat\nAddress (3 to 9 bytes)\n\nDomain (0, 1, 3, or 6 bytes)\nPacket\n\n \n\nThe Version field defines the CNP version number, and is always 0.\n\nThe Packet Format field defines the format of the packet enclosed within the\ndatagram, and contains one of the following values:\n\n \n\nTransport Packet\nSession Packet\nAuthenticated Packet\nPresentation Packet\n\n \n\n \n\n \n\n \n\n \n\nThe packet formats are defined in chapters 5, 6, and 7.\n\nThe Addr Format field defines the format of the address contained within the\ndatagram and contains one of the following values:\n\n \n\nSubnet Broadcast\nGroup\nSubnet/Node or Group\nAcknowledgement\nNeuron ID\n\n \n\n \n\n \n\n \n\n \n\nThe Address field contains the network address for the message. The format of the\naddress is defined by the Addr Format field. A Subnet Broadcast address has the\nfollowing format:\n\nThe Control Network Protocol 58",
    "Page_59": "msb Isb\nSource Subnet\nSource Node\n\n \n\n \n\n \n\nDestination Subnet\nA Group address has the following format:\nSource Subnet\n\nSource Node\nDestination Group\n\n \n\n \n\nSource Subnet\nSource Node\nDestination Subnet\nDestination Node\n\n \n\n \n\n \n\n \n\nA Group Acknowledgement address has the following format:\n\nSource Subnet\nAcknowledged Member\nDestination Subnet\nDestination Node\nAcknowledged Group\n\n \n\n \n\n \n\n \n\nSource Subnet\nSource Node\nDestination Subnet\nNeuron ID (6 bytes)\n\n \n\n \n\n \n\n \n\n \n\nThe Length field defines the length of the domain field, and contains one of the\nfollowing values:\n\n \n\n \n\n \n\n \n\n \n\nWIN|R| oO\nDW] r| oO\n\nLayer 4— Transport Layer\n\nThe transport layer ensures reliable delivery of message packets. Messages can be\nexchanged using an acknowledged service, where the sending device waits for an\nacknowledgement from the receiver or receivers and resends the message if the\nacknowledgement is not received. The application is informed if an\nacknowledgement is not received after a configurable number of retries. The\n\nThe Control Network Protocol 59",
    "Page_60": "transport layer also defines how duplicate messages are detected and rejected if a\nmessage is resent due to a lost acknowledgement. Messages that do not require the\nreliability of acknowledged service can use unacknowledged or repeated services to\nsend the message once, or a configurable number of times, without waiting for an\nacknowledgement.\n\n \n\nMessage Services\n\nCNP offers four basic types of message service: acknowledged, request/response,\nrepeated, and unacknowledged. The acknowledged, repeated, and unacknowledged\nservices are managed by the transport layer. The request/response service is\nmanaged by the session layer. These services provide a tradeoff between reliability\nand efficiency.\n\n+ The most reliable service is acknowledged, or end-to-end acknowledged service,\nwhere a message is sent to a device or group of devices and individual\nacknowledgements are expected from each receiver. If an acknowledgement is\nnot received from all destinations, the sender times out and retries the\ntransaction. The number of retries and the time-out are both selectable (see CNP\nTimers, later in this document). Transaction IDs are used to keep track of\nmessages and acknowledgements so that the application does not receive\nduplicate messages.\n\n+ An equally reliable service is repeated, also called the unacknowledged repeated\nservice, where a message is sent to a device or group of devices multiple times,\nand no response is expected. This service is typically used when broadcasting to\nmore than a few devices, because the number of packets required to repeat the\ntransmission will be less than the number of packets required for all the\nacknowledgements. For example, if a device sends an acknowledged message\nwith four retries to five devices, there will be a minimum of six packets—the\noriginal message plus five acknowledgements. If the same message was sent\nwith the repeated service with a repeat count of four, only four packets would be\ngenerated, yet the probability of delivery would be identical. A good\nrule-of-thumb is to use repeated service instead of acknowledged service\nwhenever the size of the group is larger than the retry count. The exception to\nthis rule is if the sending application needs notification of delivery failure, in\nwhich case acknowledged service should be used. This is typically only required\nif the sending application can take alternative action in case of delivery failure.\n\n+ The least reliable is unacknowledged, where a message is sent once to a device or\ngroup of devices and no response is expected. This is typically used when the\nreceiving application is not sensitive to the loss of a message. This is typically\nthe case with data that is sent using a periodic heartbeat. For example, if a\ntemperature sensor used for space comfort control in a room reports the\ntemperature once a minute, missing an update is not serious, because the\ntemperature will be updated on the next heartbeat.\n\nWith one exception, the three transport layer message services—unacknowledged,\nacknowledged, and repeated—can be used with any layer-3 address mode: broadcast,\nunicast, multicast, or Neuron ID. The exception is that broadcast acknowledged\ntransactions complete once a single acknowledgment is received—any remaining\nacknowledgements are ignored.\n\nThe Control Network Protocol 60",
    "Page_61": "CNP Timers\n\nCNP implementations use the following timers to manage the various layer 4\nservices:\n\n* Transaction timer\n\n* Repeat timer\n\n* Group receive timer\n\n+ Non-group receive timer\n+  Free-butter wait timer\n\nThese timers are collectively known as the /ayer-4 timers, and are typically\nautomatically configured by a network management tool. For example, the\nLonMaker tool automatically calculate and configure these timers.\n\nThe following sections detail, for each of the four message services, how packets flow\nthrough a CNP implementation and where the timers come into play.\n\nUnacknowledged Service\n\nWhen this service is used, the only timer that is involved is the free buffer wait\ntimer. This timer determines the maximum length of time the device will wait for a\nfree buffer when sending a message. This timer can be deactivated (the device will\nwait forever) by setting the timer value to zero. If it is set to another number, n, then\nthe device will wait between 2i and 2i+ 1 seconds. For example, if the configured\nnumber zis set to 2, then the device will wait for a free buffer for between 4 and 5\nseconds. Ifa buffer is not obtained before the timer expires, the device assumes a\nfatal error and resets.\n\nAcknowledged Service\n\nAcknowledged service also uses the free buffer wait timer, but additional timers are\nnecessary. The sending device uses a transaction timer to determine when a retry\nshould be attempted. The receiving devices use a receive transaction timer to detect\nduplicate messages.\n\nSending Acknowledged Messages\n\nThe transaction timer is used by a sending device to determine how long the device\nwaits for an acknowledgement before retrying. The value of the transaction timer\nused by the device is taken from the transmitting device’s address table entry for the\ndestination address of the packet being sent. The transaction timer is individually\nconfigurable by destination address in the address table. If the device does not\nreceive an acknowledgement before the transaction timer expires, it will retry,\nsending the same packet again (along with an indication of which devices did\nacknowledge, in the case of group addressing). This retry process will continue until\nthe retry count has been exhausted or until all acknowledgements have been\nreceived. The retry count is configurable from 0 to 15 by address table entry.\n\nThe appropriate length for the transaction timer is dependent on the number of\nrouters and types of channels that a message must pass through between its source\n\nThe Control Network Protocol 61",
    "Page_62": "and furthest destination (in terms of transit time including channel and router\ndelays). The transaction timer should be just long enough so that a packet can reach\nthe furthest destination and the acknowledgement from this destination can be\nreceived before the transaction timer expires. If the transaction timer is too short,\nexcess retries will be generated; if too long, the time for a transaction to complete will\nincrease on average.\n\nBy adjusting the transaction timer, the time delay before messages are retried (due\nto lack of acknowledgement) can be optimized, therefore improving response time.\nTo keep the number of retries to a minimum, this timer must be set high enough to\naccommodate the round trip delay of sending a message and getting an\nacknowledgement back. On a network running at 78 kbps or 1.25 Mbps, where the\nsource and destination(s) are all on the same channel, the transaction timer can be\nset to a low value such as 64ms or 96ms. In the case where the packet has multiple\ndestinations, the path to the furthest destination must be used to calculate the timer\nvalue. A device will not try to initiate retransmission until its transaction timer\nexpires.\n\nThe LonMaker tool automatically calculates the transaction time defaults based upon\ntopology, bit rate, and the Neuron system clock frequency for Neuron hosted devices.\n\nReceiving Acknowledged Messages\n\nThe receive transaction timer is used by destination devices to detect duplicate\nmessages. Each device maintains a receive transaction table that stores the source\naddress and a transaction ID of all messages received within the interval defined by\nthe receive transaction timer. When a packet arrives at its final destinations, the\nreceiving devices look at the packet’s source address and transaction ID. If there are\nno matching entries in the receive transaction table, a new receive transaction entry\nis created. If the receive transaction table is full and can accept no more entries, the\nincoming message is lost. If the lost message was an acknowledged message, no\nacknowledgement is returned. A receive timer is started for each entry in the table.\nThe duration of the receive timer is based upon the layer-3 address mode that the\ntransmitter used. If the transmitter used group addressing and an address table\nentry for that group exists, the group receive timer value is taken from that entry in\nthe address table. If any other addressing mode is used, the device uses its\nnon-group receive timer value instead.\n\nWhen the receive timer expires, the entry in the receive transaction table is deleted,\nand any new transmission having the same transaction ID from the same source\naddress will be treated as a new transaction. Therefore, this timer must be greater\nthan the greatest product of retry count and transaction timer that can be received\nfrom the transmitter. A good rule of thumb for setting this timer is:\n\nreceiveTimer = (retryCount + 2) * transactionTimer\n\nIf the receive transaction timer is too long, then it is likely that the device will run\nout of memory for receive transaction entries. If it is too short, then the device may\nmistake legitimate retries for new transactions, causing duplicate messages to\nmistakenly be passed on to the application for processing. A good rule of thumb is to\nkeep the retry count low (typically 4) and design networks with as few router hops\nfrom end-to-end as possible; this will keep the transaction timer short. As an\nexample, for a received message that originates from a device with a retry count of 4\nand a transaction timer of 200ms, use the rule-of-thumb above to arrive at ((4 + 2) *\n\nThe Control Network Protocol 62",
    "Page_63": "200), or 1200ms. A shorter value could result in retries being interpreted as new\ntransactions; a longer value could result in a device’s running out of receive\ntransaction buffers and losing incoming messages.\n\nRepeated Service\n\nThis service follows essentially the same message flow as acknowledged service, with\na few exceptions. In the address table of the transmitter there is a separate timer\nknown as the repeat timer. This timer specifies how frequently the message is\nrepeated when using repeated service. This time can be shorter than the transaction\ntimer, because no acknowledgement is expected (no time for the acknowledgement\nneed be allotted) when these messages are sent. Transaction IDs and duplicate\ndetection are in effect for these transactions. The initial packet is repeated as many\ntimes as is specified by the repeat count, from 1 to 15 times. This timer should be\nlong enough for the receiving device or devices to overcome any short term buffer\nshortages.\n\n \n\nTransport Packet Format\n\nThe transport layer builds a transport packet by adding a transport header to an\nenclosed packet. The enclosed packet may be null, in which case the transport\npacket consists solely of the transport header. A transport packet has the following\nformat:\n\nmsb Isb\n\nTransport Packet Transaction Number\nFormat\n\n \n\nEnclosed Packet\n\n \n\nThe Auth field is set to 1 for an authenticated message, and is set to 0 for messages\nthat are not authenticated.\n\nThe Transport Packet Format field defines the format of the packet enclosed within\nthe transport packet, and contains one of the following values:\n\n \n\nAcknowledged Message\n\n \n\nRepeated Message\n\n \n\nAcknowledgement\n\n \n\nReminder Preamble\n\n \n\nReminder Message\n\n \n\n \n\nThe Control Network Protocol 63",
    "Page_64": "Acknowledged (transport packet format 0) and repeated (transport packet format 1)\nenclosed packets consist of presentation packets as described in Layer 6—\nPresentation Layer. The acknowledged transport packet is used for the first\ntransmission of an acknowledged message (the reminder preamble and reminder\nmessage are used for subsequent transmissions). The repeated transaction packet is\nused for all the transmissions of a repeated message.\n\nAn acknowledgement (transport packet format 2) has no enclosed packet and consists\nsolely of the transaction header.\n\nA reminder preamble (transport packet format 4) enclosed packet flags the first\nmessage of a message pair that is used for selective soliciting of acknowledgments for\nmulticast transactions. This message pair is used by a device that has transmitted a\nmulticast message, and the highest numbered group member that has not responded\nis member number 16 or higher. The second message of the pair is a retransmission\nof the original acknowledged message. The reminder preamble has the following\nformat:\n\nmsb Isb\n\n \n\nMember List (3 to 8 bytes)\n\nThe Length field specifies the number of bytes in the member list, and will be a value\nbetween 3 and 8. The Member List field is a bit map of the members in the group.\nEach bit represents a member of the group where the LSB of the first byte represents\nmember 0, the next bit is member 1, etc. A value of 0 indicates that the member's\nacknowledgment has not been received by the sender, a value of 1 indicates that the\nacknowledgment has been received.\n\nA reminder message (transport packet format 5) enclosed packet combines a\nreminder preamble with the original presentation packet and has the following\nformat:\n\nmsb Isb\nLength\nMember List (0 to 2 bytes)\n\n \n\n \n\nPresentation Packet\n\n \n\nThe Length and Member List fields have the same format as for the reminder\npreamble. A Length value of 0 means all members should acknowledge.\n\nLayer 5— Session Layer\n\nThe session layer adds control to the data exchanged by the lower layers. It supports\nremote actions so that a client may make a request to a remote server and receive a\n\nThe Control Network Protocol 64",
    "Page_65": "response to this request. For application messages, the request is passed to the\nreceiving application which generates the response.\n\nThe session layer also defines an authentication protocol that enables receivers of a\nmessage to determine if the sender is authorized to send the message. This can be\nused to prevent unauthorized access to devices and their applications.\n\n \n\nRequest/Response\n\nThe request/response service is used when a message is sent to a device or group of\ndevices and individual responses are required from each receiver. The incoming\nmessage is processed by the application on the receiving device before a response is\ngenerated. The same retry and time-out options are available as with acknowledged\nservice. Responses may include data, making this service particularly suitable for\nimplementing remote procedure calls or client/server applications.\n\nWith one exception, the request/response service can be used with any layer-3\naddress mode: broadcast, unicast, multicast, or Neuron ID. The one exception is that\nwhen performing a broadcast request/response the application will receive only the\nfirst response; all others will be discarded by the network layer.\n\nThe message flow for request/response service is identical to acknowledged service,\nexcept that the application sends a response in lieu of an acknowledgement.\nNetwork management tools must take into account the extra processing time\nrequired by the application to generate the acknowledgement when calculating the\ntransaction and receive transaction timers.\n\n \n\nAuthentication\n\nWhen using authenticated messages, the receivers of an authenticated message\ndetermine if the sender is authorized to send that message. This can prevent\nunauthorized access to devices and their applications. This can be used to prevent\nunauthorized access to devices and their applications. For example, by using\nauthentication, an electronic lock device can verify that an “open” request comes from\nthe owner, not from someone attempting to break into the system\n\nAuthentication is implemented by distributing 48-bit keys, one per domain, to the\ndevices at or prior to installation time. For an authenticated message to be accepted\nby the receiver, both sender and receiver must possess the same key. This key is\ndistinct from the device’s Neuron ID.\n\nAs shown in Figure 22, when an authenticated message is sent, the receiver\nchallenges the sender to authenticate itself, using a different random number as a\nchallenge every time. The sender then authenticates by transforming the challenge,\nusing the authentication key along with the data in the original message. The\nreceiver compares the reply to the challenge with its own transformation on the\nchallenge. If the transformations match, the transaction goes forward. This is called\nan authenticated transaction. The transformation used is designed so that it is\nextremely difficult to deduce the key, even if the challenge, reply, and authentication\nalgorithm are all known. The use of authentication is configurable individually for\neach network variable connection. In addition, network management transactions\nmay be optionally authenticated.\n\nThe Control Network Protocol 65",
    "Page_66": "Sender © Authentoated Message Recelver\n\nOF tame OF\n\nOT on\nusing private key and\n\nAcknowledgment () compare to reply\n\nFigure 22 Authentication Sequence\n\n \n\nThe authentication protocol is always enabled on every CNP device, and every\ndomain on every device always has an authentication key. The default\nauthentication key is typically FF FF FF FF FF FF. For example, the LNS Network\nOperating System uses this value for devices that do not use authentication, but does\nnot allow this value to be used as the authentication key for a device that uses\nauthentication.\n\nAuthentication Control\n\nFor a given message, it is up to the sender of the message to initiate an authenticated\ntransaction when required. The sender does this by setting the authentication bit in\nthe message. When a receiver receives a message with the authentication bit set, it\nmust respond with an authentication challenge, even if it does not require the\nmessage to be authenticated. It is up to the receiver to determine whether or not the\nmessage must be authenticated. This means that a sender may initiate an\nauthenticated transaction on any message, whether required or not. However, a\nsender should not initiate an authenticated transaction unless it is required by the\nreceiver, since authenticated transactions consume double the bandwidth of non-\nauthenticated transactions. In a group connection, there may be a mixture of\nreceivers that require authentication and receivers that do not require\nauthentication. In this case, any update sent to the group must be sent as an\nauthenticated transaction, even though all receivers do not require it.\n\nA receiver may choose to honor a request initiated by a failed authentication\ntransaction, and will typically do so for any messages that do not require\nauthentication. For example, if a receiver does not require network management\nmessages to be authenticated but receives a Read Memory request with the\nauthentication bit set in the message, the receiver sends an authentication challenge,\nbut ignores the authentication response and sends the results of the Read Memory\nrequest as if the authentication bit was not set.\n\n \n\nSession Packet Format\n\nThe session layer builds a session packet by adding a session header to an enclosed\npacket. The enclosed packet may be null, in which case the session packet consists\nsolely of the session header. A session packet has the following format:\n\nThe Control Network Protocol 66",
    "Page_67": "msb Isb\nSession Packet Transaction Number\n\nFormat\nEnclosed Packet\n\n \n\n \n\nThe Auth field is set to 1 for an authenticated message, and is set to 0 for messages\nthat are not authenticated.\n\nThe Session Packet Format field defines the format of the packet enclosed within the\nsession packet, and contains one of the following values:\n\n \n\nRequest\nResponse\nReminder Preamble\n\nReminder Messa\n\n \n\n \n\n \n\n \n\n \n\nRequest (session packet format 0) and response (session packet format 2) enclosed\npackets consist of presentation packets as described in Layer 4—Transport Layer.\nThe request session packet is used for the first transmission of a request message\n(the reminder preamble and reminder message are used for subsequent\ntransmissions). The response session packet is used for response messages.\n\nA reminder preamble (session packet format 4) session packet flags the first message\nof a message pair that is used for selective soliciting of responses for multicast\nrequests. This message pair is used by a device that has transmitted a multicast\nrequest, and the highest numbered group member that has not responded is member\nnumber 16 or higher. The second message of the pair is a retransmission of the\noriginal request. The reminder preamble has the following format:\n\nmsb Isb\nLength\n\n \n\nMember List (3 to 8 bytes)\n\n \n\nThe Length field specifies the number of bytes in the member list, and will be a value\nbetween 3 and 8. The Member List field is a bit map of the members in the group.\nEach bit represents a member of the group where the LSB of the first byte represents\nmember 0, the next bit is member 1, etc. A value of 0 indicates that the member's\nresponse has not been received by the sender—a value of 1 indicates that the\nresponse has been received.\n\nA reminder message (session packet format 5) session packet combines a reminder\npreamble with the original presentation packet and has the following format:\n\nThe Control Network Protocol 67",
    "Page_68": "msb Isb\nLength\nMember List (0 to 2 bytes)\n\n \n\n \n\n \n\nPresentation Packet\n\nThe Length and Member List fields have the same format as for the reminder\npreamble. A Length value of 0 means all members should respond.\n\nAuthenticated Packet Format\n\nTwo special packets are generated for authenticated transport packets and session\npackets. The first is the Challenge Packet which is sent by a receiver whenever a\ntransport packet or session packet is received with the authentication bit set. A\nChallenge Packet has the following format:\n\nAddrFormat | 0 [| 0 | Transaction Number\n\nRandom Bytes (8 bytes)\nDestination Group (0 or 1 byte)\n\n \n\n \n\nThe Addr Format field is the same as the Addr Format field in the network header,\ndescribed in Addressing Formats.\n\nThe Transaction Number field contains the same transaction number as the\nchallenged Transport Packet or Session Packet.\n\nThe Random Bytes field contains a challenge consisting of 8 random bytes.\n\nThe Destination Group field is present only if the Addr Format field specifies a group\naddress (address format 1). This field contains the same value as the Destination\nGroup field in the network header.\n\nWhen the transmitting node receives the challenge, it responds with a Reply Packet.\nThe Reply Packet has the following format:\n\nAddr Format 1 0 Transaction Number\n\n \n\nChallenge Reply (8 bytes)\nDestination Group (0 or 1 byte)\n\n \n\n \n\nThe Addr Format, Transaction Number, and Destination Group fields are the same\nas for the Challenge Packet.\n\nThe Challenge Reply field contains an 8-byte value that is computed using the\noriginal presentation packet, the transmitter's authentication key, and the 8 random\nbytes in the challenge.\n\nThe Control Network Protocol 68",
    "Page_69": "Layer 6— Presentation Layer\n\nThe presentation layer adds structure to the data exchanged by the lower layers by\ndefining the encoding of message data. Presentation layer services are provided by\nthe Neuron firmware for applications hosted on a Neuron core; these services are\nprovided by the host or split between a host and a LONWORKS network interface for\napplications running on other host processors.\n\n \n\nMessages\n\nData is exchanged between applications at layer 6 encoded as messages. Each\nmessage consists of a 1-byte message code followed by 0 to 227 bytes of data, with the\nexception of network variables that consist of 1 to 31 bytes of data. The message code\nidentifies the type of data contained within the message. Table 10 lists the message\ntypes supported by CNP, and the message codes used for each type.\n\nTable 10 Message Codes\n\n \n\nUser Application Message 0-47\n\n \n\nStandard Application Message 48 - 62\n\n \n\nForeign Frame Message 64 - 78\n\n \n\nNetwork Diagnostic Message 80 - 95\n\n \n\nNetwork Management Message 96-127\n\n \n\n \n\n \n\nNetwork Variable Message 128 - 255\n\nA message may be encoded as a network variable, application message, or foreign\nframe. Applications typically exchange data using network variables. Network\nvariables are a class of message packets with an identifier that identifies the data as\na data value that may be shared by multiple devices on a network. Interoperable\nencoding of network variables is provided with standard network variable types\n(SNVTs). A SNVT specifies a standard data encoding that determines how\napplications will interpret the data contained in a network variable. SNVTs promote\ninteroperability by ensuring that applications use a common interpretation of data\nexchanged through network variables. For example, two devices exchanging a\ntemperature network variable can use a SNVT to ensure that both devices interpret\nthe temperature data using the same units, instead of one device using Celsius and\nanother using Fahrenheit.\n\n \n\nApplication messages are used by application programs requiring a different data\ninterpretation model than network variables. Application messages are message\npackets with a 6-bit message code that identifies the packet to the receiving\napplication. The applications exchanging application messages must agree on the\ninterpretation of the message codes. Standard message codes are used for standard\nservices as listed in Table 11.\n\nThe Control Network Protocol 69",
    "Page_70": "Table 11 Standard Application Message Codes\n\n \n\nData Log Access Request Message\n\n \n\nInteroperable Self-Installation Message\n\n \n\nFile Transfer Message\n\n \n\n \n\n \n\nForeign frames are exchanged as a simple array of bytes that can be interpreted by\nthe application in any way (for example, as a frame of a foreign protocol).\n\nThe message types are described in more detail in the following sections.\n\nMessage codes are also used for responses to request/response messages, and are\nencoded as shown in Table 12.\n\nTable 12 Message Codes for Responses\n\n \n\nApplication Response\n\n \n\nResponder Offline Response\n\nForeign Frame Message\n\n \n\nForeign Responder Offline\nResponse\n\n \n\nNetwork Diagnostic Success\n\n \n\nNetwork Diagnostic Failure\n\n \n\nNetwork Management Success\n\n \n\nNetwork Management F ailure\n\n \n\nNetwork Variable Poll Response 128 - 255\n\n \n\n \n\n \n\n \n\nNetwork Variables\n\nNetwork variables are CNP data values that may be shared among multiple devices.\nNetwork variables may represent a single value or a structure or union of multiple\nvalues containing 1 to 31 bytes. A device may have multiple network variables, and\neach network variable may be shared with one or more network variables on any\ndevice or group of devices within a network.\n\nUp to 31 bytes may be embedded in a network variable structure and propagated as\na single network variable. If more than 31 bytes of data are needed in a single\nmessage, application messages can be used as described in the next section. Network\n\nThe Control Network Protocol 70",
    "Page_71": "variables may also be organized as arrays of network variables, where each element\nof the array may be individually connected to network variables on other devices.\n\nEvery network variable has a direction, type, and length. The network variable\ndirection can be either input or output, depending on whether the network variable is\nused to receive or send data. The network variable type determines the encoding and\nunits of the data.\n\nNetwork variables of identical type and length but opposite directions can be\nconnected to allow the devices to share information. Connections can be established\nbetween output and input network variables on different devices, or between output\nand input network variables on the same device. The latter type of connection is\ncalled a turnaround connection. Connections may be thought of as “virtual wires,”\nreplacing the physical wires of traditional hard-wired systems.\n\nAn example of two devices with a connection between them is an application on a\nlighting device that has a switch-type input network variable, and a second\napplication on a dimmer-switch device that has a switch-type output network\nvariable. A network tool such as the LonMaker tool can be used to connect these two\ndevices, allowing the switch to control the lighting device, as shown in Figure 23.\nThis type of connection from a single output to a single input is called a unicast\nconnection.\n\nSwitch\n\n \n\nLight\n\nFigure 23 Unicast Network Variable Connection\n\nThe direction indicated by the triangle in Figure 23 indicates the direction of the\nnetwork variable. A single network variable may be connected to multiple network\nvariables of the same type but opposite direction. The example in Figure 24 shows\nthe same switch being used to control three lights:\n\nThe Control Network Protocol 71",
    "Page_72": "Switch\n\nLight 3\nFigure 24 Multicast Network Variable Connection\n\nThe application program in a device does not need to know anything about where its\ninput network variable values come from or where its output network variable values\ngo. When the application program has a changed value for an output network\nvariable, it simply passes the new value to the CNP implementation. Rather than\nexpose the internal operation and configuration of every device to every other device\non a network, network variables allow devices to only expose data that is required to\ninteroperate with other devices. For example, the dimmer-switch device in Figure 24\ncould be replaced with an occupancy sensor, without making any changes to the\nlighting devices.\n\nA connection is created through a process called binding. Binding typically takes\nplace during network design and installation. Binding may be done by a network\nmanagement tool such as the LonMaker too, or may be done by the device application\nitself through a process called se/f-installation. When binding network variables, the\nCNP implementation is configured to know the logical address of the other device or\ngroup of devices in the network expecting that network variable’s values. It\nassembles and sends the appropriate packets to these devices. Similarly, when the\nCNP implementation receives an updated value for an input network variable\nrequired by its application program, it passes the data to the application program.\nThe binding process thus creates the logical connections between an output network\nvariable in one device and an input network variable in another device or group of\ndevices.\n\n \n\nNetwork variables provide a data oriented application protocol. Application data\nitems such as temperatures, pressures, states, text strings, and other data items are\nexchanged between devices in standard engineering and other predefined units.\nCommands are encapsulated within the application programs of the receiver devices\nrather than being sent over the network. In this way, the same engineering value\ncan be sent to multiple devices which each have a different application program, and\npotentially different commands, for that data item.\n\nThe network variable concept greatly simplifies the programming of complex\ndistributed applications. Network variables provide a very flexible view of\ndistributed data to be operated on by the devices in a system. The programmer need\n\nThe Control Network Protocol 72",
    "Page_73": "not deal with message buffers, network addressing, request/response/retry\nprocessing, and other low-level details that must typically be managed for other\nprotocols.\n\nNetwork Variable Selection\n\nConnections consist of addressing information at CNP layers 3 and 6. The layer-3\naddress delivers a network variable update to the correct set of devices; the layer-6\naddress selects the correct network variable on those devices.\n\nTo support network variable selection at layer 6, each network variable on a device\nhas a unique network variable index for that device. Network variable indexes are\nassigned sequentially for each network variable on the device, starting with index 0.\nFor example, a device with a switch output and a switch feedback input may use\nindex 0 for the output and index 1 for the input.\n\nThe layer-6 address for a network variable is called the network variable selector. A\nnetwork variable selector is an identifier that is used to associate a network variable\nupdate message with a network variable within the receiving application. Every\nnetwork variable update message includes a network variable selector, and every\nCNP device maintains one or two tables that are used to associate a network variable\nselector with a network variable index. The first table implemented by all CNP\ndevices is the network variable configuration table. The second table that may\noptionally be implemented by a CNP device is the network variable alias table.\n\nWhen sending a network variable update, the layer-6 implementation uses these\ntables to translate the network variable index on the sending device to a network\nvariable selector. When receiving a network variable update, the layer-6\nimplementation uses these tables to translate the network variable selector to a\nnetwork variable index on the receiving device.\n\nBecause network variable updates are first filtered by the network-layer address,\nnetwork variable selectors may be reused within a domain. Network variable\nselectors must be unique for all network variable update and poll request messages\nreceived by a device, but may be reused within two connections that have no common\ndevices.\n\nThe network variable selector is a 14-bit identifier with a value between 0 and 3FFF\nhex. Selector values 3000 to 3FFF hex are reserved for unbound network variables,\nwith the selector value equal to 3FFF hex minus the network variable index. This\nconvention allows unbound network variables to be polled, as long as the polling\ndevice has the network variable index of the network variables to be polled. Selector\nvalues 0 to 2FFF hex are available for bound network variables. This provides a\ntotal of 12,288 different network variable selectors for bound network variables, some\nof which may be reused as described in the previous paragraph.\n\nNetwork Variable Aliases\n\nEach network variable on a device may have multiple layer-6 addresses, that is, each\nnetwork variable may have multiple selectors. Each selector for a network variable\ncreates a virtual network variable. The primary selector defines the primary\nnetwork variable. The additional selectors, if any, create alias network variables,\nsimply called aliases. A primary network variable and all of its aliases share a\n\nThe Control Network Protocol 73",
    "Page_74": "common network variable value. When the CNP implementation sends a network\nvariable update, it sends the updated value to the primary network variable and all\nof its aliases. When the CNP implementation receives a network variable update, it\ncompares the selector contained in the update to the selectors defined for all primary\nnetwork variables and all aliases, until a match is found or until all primary network\nvariables and aliases are searched, whichever comes first.\n\nNetwork Variable Configuration and Alias Tables\n\nThe network variable configuration and alias tables map network variable selectors\nto network variable indexes and vice versa. Each entry in the two tables contains a\nnetwork variable selector, an address table index, layer-4 message service\ninformation, a priority flag, and an authentication flag for the network variable. The\nnetwork variable configuration table has an entry for each network variable\nimplemented by the device. The network variable configuration table entries are\nindexed by the network variable index. The network variable alias table has an\nentry for each alias, and associates each alias with a primary network variable if the\nalias is active. The alias for a network variable shares the network variable value\nwith the associated primary network variable.\n\nNetwork Variable Limits\n\nCNP supports up to 4096 primary network variables and 8192 network variable\naliases per device, but the maximum number may be further limited by specific CNP\nimplementations. The typical limit for a Neuron hosted device is 254 primary\nnetwork variables and 127 aliases. The maximum number of network variables and\naliases per device may also be limited by the network management tool used to bind\nthe device; different tools will have different capacities depending on their memory\nand database size.\n\nThe number of network variables that can be implemented on a device does not limit\nthe number of network variables that can be accessed by the device. A single input\nnetwork variable can receive data of the same type from an unlimited number of\ndevices—potentially from every device within the domain. The receiving application\ncan differentiate network variables from different device by examining the source\naddress of the network variable. For example, an alarm monitoring system may\nhave 1000 alarm output network variables bound to a single alarm input network\nvariable on a monitoring device. This configuration only requires a single input on\nthe monitoring device, yet the application on the monitoring device can still\ndetermine the source of any alarm by reading the source address field of the message.\n\nA single output network variable can be used to send data of the same type to an\nunlimited number of devices—potentially to every device within the domain.\n\nNetwork Variable Types\n\nNetwork variables provide a mechanism for exchanging data values between devices,\nbut the network variable packets do not specify the encoding of the data. For\nexample, two devices exchanging network variable updates representing current\ntemperature could have different encoding for the data. If the sending device uses\nCelsius values with a fixed point representation providing 0.1 degree resolution, and\nthe receiving device expects Fahrenheit integer values, the two devices would be\nincompatible. One solution to this problem is to add a third device in between the\n\nThe Control Network Protocol 74",
    "Page_75": "two incompatible devices to perform the temperature conversion. This approach\nworks, but unnecessarily complicates system integration.\n\nNetwork variable types are used to ensure compatible interpretation of data. A\nstandard set of network variable types defines standard units, ranges, and resolution\nfor most common units of measure, and also defines many standard structures for\ncommon aggregate data. These standard types are called standard network variable\ntypes, or SNVTs (pronounced snivets). The list of SNVTs includes over 100 types and\ncovers a wide range of applications. The complete list is available at\ntypes.lonmark.org. New SNVT definitions are added when new types are required\nfor applications created by multiple vendors. If an application requires a network\nvariable type that is not a SNVT, device-manufacturers can define custom network\n\nvariable types. These are called user network variable types (UNVTs pronounced\n\nyou-nivits).\n\nA network variable type can either be a scalar type or an aggregate type. Table 13\ndescribes the scalar data types, and Table 14 describes the aggregate data types.\n\nTable 13 Scalar Data Types\n\n \n\n \n\nBitfield\n\nA signed or unsigned bitfield, 1-8 bits wide. Only\navailable for fields within a structure or union.\n\n \n\nDouble Float\n\nAn ANSI/IEEE 754 standard 64-bit\ndouble-precision floating point value with 1 sign bit,\n11 exponent bits, and 52 mantissa bits, for a total\nof 64 bits. The maximum range is approximately\n-1E 308 to +1E 308 units.\n\n \n\n \n\n \n\nEnumerated A signed 8-bit enumerated value.\n\nFloat An ANSI/IEEE 754 standard 32-bit floating point\nvalue with 1 sign bit, 8 exponent bits, and 23\nmantissa bits, for a total of 32 bits. The maximum\nrange is approximately -1E 38 to +1E38 units.\n\nReference A reference to a network variable type. Uses the\n\ntype definition of the referenced network variable\ntype. If you are creating a structure or union, an\nindividual field can reference a network variable\ntype. If the referenced network variable type\nchanges in some way, the referencing type or field\nwill automatically change as well.\n\n \n\nSigned Character\n\nAn 8-bit signed character value.\n\n \n\n \n\n \n\nSigned Long A 16-bit signed integer value. Maximum unscaled\nrange of -32,768 - 32,767.\n\nSigned Quad A 32-bit signed integer value.\n\nSigned Short An 8-bit signed integer value. Maximum unscaled\n\nrange of -128 - 127.\n\n \n\nUnsigned Character\n\nAn 8-bit unsigned character.\n\n \n\nUnsigned Long\n\n \n\nA 16-bit unsigned integer value. Maximum\nunscaled range of 0 - 65,535.\n\n \n\nThe Control Network Protocol\n\n75",
    "Page_76": "Unsigned Quad A 32-bit unsigned value.\n\n \n\nUnsigned Short An 8-bit unsigned integer value. Maximum\nunscaled range of 0 - 255.\n\n \n\n \n\nTable 14 Aggregate Data Types\n\n \n\nStructure A structure containing multiple fields. Each field\nmay be any of the scalar types described in Table\n13.\n\nA union containing multiple fields. Each field may\nbe a structure or any of the scalar types described\nin Table 13.\n\n \n\nScalar data types and fields specify scaling factors that can be used to modify the\nrange of the type. The scaling factors are defined by three values called A, B, and C.\nThese values are used to calculate a scaled value as follows:\n\nScaledValue = A* 102* (UnscaledValue + C)\n\nFor example, the SNVT_lev_percent type is defined to represent a one-byte\npercentage value. The scaling factors are defined as A=5, B=-2, and C=0, resulting in\nthe following scaling formula:\n\nScaledValue = 5 * 10-3 * (UnscaledValue + 0)\n\nUsing this formula, an unscaled value of 200 results in a scaled value of 100. A value\nof 1 results in 0.5, providing an 0.5 percent resolution.\n\nScalar data types and fields define a units string that describes the data contained\nwithin the network variable or field. This string may be specified in multiple\nlanguages to allow localization of displayed values. For example, the\nEnglish-language unit string for the SNVT_lev_percent network variable type is “%\nof full scale.”\n\nUnits of measures are typically specified in Systeme Internationale (SI) units. For\nexample, temperature is always represented in Celcius. A standard mechanism is\nprovided to scale measurement values. This allows measurement values to be\ndisplayed in alternative systems. For example, temperature can be displayed in\nFahrenheit using an appropriate format.\n\nScalar data types and fields define minimum and maximum values for the network\nvariable type. These values restrict the values that may be assigned to the network\nvariable or field. Scalar data types may also define an invalid value. An invalid\nvalue indicates that the value of the network variable is unknown. For example, a\ntemperature sensor network variable output that reports an invalid value indicates\nthat the current temperature is not available.\n\nNetwork Variable Self-identification and Self-documentation\n\nSNVTs are self identifying, meaning that a network tool can extract the type\ninformation for all network variables on a device that are declared as SNVTs.\n\nThe Control Network Protocol 76",
    "Page_77": "Network variables may also have a self documentation string that can be used to\nprovide more information to a network tool. For example, a device that contains two\ntemperature sensors, one for input temperature and one for output temperature, has\ntwo network variable outputs. These outputs are both declared using SNVT_temp,\nautomatically identifying the values as encoded Celsius values with a resolution of\n0.1°C. Each of the network variables has a self documentation string defined by the\ndevice application. The string for the first device is: “Input Temperature Sensor’,\nand the string for the second is “Output Temperature Sensor.”\n\n \n\nPresentation Packet\n\nThe presentation packet defines the physical encoding of the presentation layer data.\nThe first byte of the presentation packet is the message code as described in Table 10\nand Table 12. For network variables, the message code specifies the upper 6 bits of\nthe network variable selector.\n\nNetwork variable updates and polls are encoded as CNP messages containing the\nnetwork variable selector and the new network variable value. The following figure\nillustrates the format of network variable messages. The Selector Hi field contains\nthe top 6 bits of the selector, and the Selector Lo field contains the lower 8 bits of the\nselector. The Dir field is 0 for input network variable updates and 1 for output\nnetwork variables. While only input network variables can receive a new value\nthrough layer-6 addressing, both input and output network variables can be read\nremotely using layer-6 addressing through a network variable poll request message.\n\nSelector Hi\n\n \n\nSelector Lo\nNetwork Variable Data (1 to 31 bytes)\n\n \n\n \n\nMulti-byte network variables are sent with the most significant byte first. Arrays\nare sent with the lowest numbered element first. Structures are sent with the first\nfield at the beginning.\n\nThe presentation packet for an application message has the following format:\n\nmsb | | | | | Isb\n0 0 Application Message Code\nApplication Message Data (0 to 249 bytes)\n\n \n\n \n\n \n\n \n\nThe presentation packet for a foreign frame message has the following format:\n\nmsb | | | Isb\n0 1 0 0 Foreign Message Code\nForeign Frame Data (0 to 249 bytes)\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nThe Control Network Protocol 77",
    "Page_78": "Explicit Network Variable Polls\n\nIn certain applications, it is desirable for an application to explicitly create a message\nthat has the same structure as a network variable request message. By doing this,\nthe polling application can bypass the network variable configuration and address\ntables and explicitly control the destination address of the network variable request.\nFor example, a device application can poll network variables on more than 15\ndifferent destination devices (single device or groups) by using explicit addressing to\novercome the limit of 15 address table entries on a Neuron hosted device. It can use\na single input network variable to receive an unlimited number of responses to polls\nof any given data type.\n\nFigure 25 illustrates the message structure of a network variable request message\nused to poll a network variable. The first byte is the message code that includes the\nSelector Hi field containing the most significant six bits of the network variable\nselector. The most significant bit of the message code is set, indicating a network\nvariable message, and the second most significant bit is set, indicating that the poll is\naddressed to an output network variable. The first data byte of the request message\ncontains the Selector Lo field with the least significant eight bits of the network\nvariable selector; there is no additional data in the request. After the polling device\nsends the explicit network variable request message, the destination devices will\nsend their network variable values as network variable response messages. A\nresponse message contains the same code as the request message, except that the\nsecond most significant bit is clear, indicating that the response is addressed to an\ninput network variable. The first data byte of the response contains the least\nsignificant eight bits of the network variable selector, and this is followed by the\nrequested data value of the network variable. If the poll is received by a destination\ndevice that has no matching network variable, or the destination device is offline,\nthen the response contains the selector, but no data is present.\n\nSelector Hi\n\n \n\nSelector Lo\n\n \n\nFigure 25 Network Variable Request Message Structure\n\nA response message is processed by the network processor on the polling device,\nbefore the response is passed to the application processor. A Neuron C application\nprogram cannot receive the response using explicit messaging syntax. If the polling\ndevice has an input network variable with the same selector and the same size as the\npolled network variable, then this network variable will be updated by the response\nto the poll.\n\nInstead of using an explicit network variable request message, an alternative method\nof reading the value of a network variable with an explicitly addressed message is\nwith the Network Variable Fetch network management message. The Network\nVariable Fetch message addresses the network variable by its network variable\nindex, while the network variable poll message addresses a network variable (or one\nof its aliases) by its selector.\n\nWhen a network variable poll is addressed using group (multicast) addressing with\nacknowledged service, all members of the group acknowledge the poll request\n\nThe Control Network Protocol 78",
    "Page_79": "message. Those members of the group that have output network variables with a\nmatching selector will respond with a message containing the value of the variable.\nThese responses will generate NV update events on the polling device. Those\nmembers of the group that have an input network variable with a matching selector,\nor no network variable with a matching selector, or are offline, will generate a\nresponse containing no data. The generation of these responses requires the\nparticipation of the application processor in the polled device, and occurs at the end\nof the currently executing critical section for a Neuron C application. This should be\ntaken into account when designing the application code for a device whose network\nvariables may be polled, and when configuring the transaction timer for the poll\nmessage. If all the responses are successfully received by the polling node, an NV\nupdate succeeds event is generated. If one or more responses are not received after\nthe configured number of retries, an NV update fails event is generated.\n\nLayer 7— Application Layer\n\nThe application layer defines a rich set of standard network services that use data\nexchanged by the lower layers. These include network configuration and diagnostic\nservices as well as standard application-layer services. The application layer services\nensure that devices created by different developers or manufacturers can\ninteroperate with each other, and can be installed and configured using standard\nnetwork tools. The network configuration and network diagnostic services are\ndefined by the CNP standard. The following list summarizes the standard\napplication-layer services. The remaining standard application-layer services are\ndefined by guidelines and functional profiles published by LONMARK International, a\nglobal membership organization created to promote and advance the business of\nefficient and effective integration of open, multi-vendor control systems utilizing\nISO/IEC 14908-1 and related standards. A complete set of guidelines and functional\nprofiles is available at www.lonmark.org.\n\ne Network configuration—provides a standard set of commands for configuring the\nnetwork attributes of a device. Network attributes include the network address\nand binding information for the device’s network variables.\n\ne Network diagnostics—provides a standard set of commands that can be used by\nnetwork tools to diagnose network problems.\n\ne ©File transfer—supports transfer of blocks of data among devices and network\ntools. LONWORKS FTP transfers large amounts of data (with a theoretical\nmaximum of 2 GB) in smaller packets, taking care of resending individual\npackets where necessary, and handling out-of-order arrivals as needed. The\nlargest practical amount of data that can be transferred in a single CNP packet is\n228 bytes, but LONWORKS FTP transfers data using a stream of 32-byte packets.\nThe size of each packet in the stream is fixed at 32 bytes for interoperability, low\ndevice cost, and optimal channel utilization.\n\ne Application configuration—provides a standard interface to configure the\nbehavior of a device. The interface is based on configurable data values called\nconfiguration properties.\n\nThe Control Network Protocol 79",
    "Page_80": "e Application specification—provides a standard set of interfaces for a device to\ndocument the tasks that it performs. Each task is exposed as a functional block\nthat is defined as a set of network variables and configuration properties\ncontained within a functional block.\n\ne Application diagnostics—provides a standard interface to test functional blocks\nand devices.\n\ne Application management—provides a standard interface to enable, disable, and\noverride functional blocks on a device.\n\ne Alarming—provides a standard interface for a device to report alarm conditions.\n\ne Data Logging—provides a standard interface for a device to collect data into data\nlogs that can be transferred to a remote server using a standard interface.\n\ne Scheduling—provides a standard interface for scheduling events based on time of\nday, day of week, and date.\n\ne Time and date management—provides a interface for synchronizing the\ntime-of-day and date for devices within a network.\n\n \n\nApplication Configuration\n\nA configuration property (CP) is a data item that, like a network variable, is part of\nthe device interface for a device. Configuration properties characterize the behavior\nof a device in the system. Network tools manage this attribute and keep a copy of its\nvalue in a database to support maintenance operations. Ifa device fails and needs to\nbe replaced, the configuration property data stored in the database is downloaded\ninto the replacement device to restore the behavior of the replaced device in the\nsystem.\n\nConfiguration properties facilitate interoperable installation and configuration tools\nby providing a well-defined and standardized interface for configuration data. Each\nconfiguration property type is defined in a resource file that specifies the data\nencoding, scaling, units, default value, range, and behavior for configuration\nproperties based on the type. A rich variety of standard configuration property types\n(SCPTs pronounced skip-its) are defined. SCPTs provide standard type definitions\nfor commonly used configuration properties such as dead-bands, hysteresis\nthresholds, and message heartbeat rates. You can also create your own user\nconfiguration property types (UCPTs pronounced you-keep-its) that are defined in\nresource files that you create with the NodeBuilder Resource Editor.\n\n \n\nApplication Specification\n\nCNP application provides a standard set of interfaces for a device to document the\ntasks that it performs. Each task is exposed as a functional block that is defined as a\nset of network variables and configuration properties contained within a functional\nblock. The device interface, also called the X/F, may be documented by the device\nitself, or by a separate file called the device interface file, or XIF file. The device\ninterface is uniquely identified by an identifier called the program ID.\n\nThe Control Network Protocol 80",
    "Page_81": "Functional Blocks and Functional Profiles\n\nA CNP device application is divided into one or more functional blocks. A functional\nblock is a portion of a device’s application that performs a task by receiving\nconfiguration and operational data inputs, processing the data, and sending\noperational data outputs. A functional block may receive inputs from the network,\nhardware attached to the device, or from other functional blocks on a device. A\nfunctional block may send outputs to the network, to hardware attached to the\ndevice, or to other functional blocks on the device.\n\nThe device application implements a functional block for each function on the device\nto which other devices should communicate, or that requires configuration for\nparticular application behavior. Each functional block is defined by a functional\nprofile. A functional profile is a template for functional block, and a functional block\nis an implementation of a functional profile.\n\nThe network inputs and outputs of a functional block, if any, are provided by network\nvariables and configuration properties. The network variables provide the\noperational data inputs and outputs for the functional block. The configuration\nproperties configure the behavior of the functional block.\n\nFor example, a keypad could implement a functional block based on the\nSFPTisiKeypad ISI Keypad profile, combining a SNVT_switch_2 typed network\nvariable that represents the current keypad state with configuration properties that\nspecify the state change for each key on the keypad, and hold the name for the\nkeypad. This logical unit—the functional block—can be disabled, enabled, tested,\nand managed by a network integrator.\n\nEach functional profile defines mandatory and optional network variables and\nmandatory and optional configuration properties. A functional block must\nimplement all the mandatory network variables and configuration properties defined\nby the functional profile, and may implement any of the optional network variables\nand configuration properties defined by the functional profile.\n\nFunctional profiles are defined in resource files. You can use standard functional\nprofiles or you can define your own functional profiles in your own resource files\nusing the NodeBuilder Resource Editor. A functional profile defined in a resource file\nis also called a functional profile template (FPT).\n\nEach CNP device may include se/f-identification (SI) data and self-documentation\n(SD) data that identifies its device interface to network tools that are used to install\nthe device. Including self-identification and self-documentation data with a device\nmakes it easier to install, as it allows easy, plug-and-play style, integration in\nmulti-vendor networks. While self-identification and self-documentation simplify\ninstallation, these methods do not expose any of the algorithms used within the\napplication.\n\nProgram ID\n\nThe program ID is a 64-bit (16-hex-digit) identifier that uniquely identifies the\napplication contained within a device. A program ID is typically presented as eight\npairs of hexadecimal encoded digits, separated by colons. When formatted as a\nstandard program ID, the 16 hex digits are organized as 6 fields that identify the\n\nThe Control Network Protocol 81",
    "Page_82": "manufacturer, classification, usage, channel type, and model number of the device.\nEvery standard program ID uses the following format:\n\nFM:MM:MM: CC: CC: UU: TT-NN\nThe fields are described in the following table.\n\nTable 15 Program ID Fields\n\n \n\nFormat\n\nA 4-bit program ID format identifier. Set to 8 for LONMARK certified\ninteroperable devices, or to 9 for non-certified application devices. Values\nless than 8 are used by network interfaces that do not include an application.\n\n \n\nM:MM:MM\n\nManufacturer\n\nA 20-bit identifier for the device manufacturer. A manufacturer ID listing is\navailable at www.lonmark.org/spid. Manufacturers that do not have an ID can\neither join LonMark International to get a permanent manufacturer ID, or can\nget a temporary manufacturer ID at no charge from www.lonmark.org/mid.\nManufacturers can get more information on joining LonMark International at\nwww.lonmark.org.\n\n \n\nCC:CC\n\nDevice Class\n\nA 16-bit identifier for the primary function of the device. The primary function\nof the device is determined by the primary functional profile implemented by\nthe device. The device class is equal to the functional profile number for the\nfunctional profile of the primary functional block of the device if the profile is a\nstandard profile and the standard profile is not one of the standard profiles\nbetween 0 and 6. For all other devices, the identifier is selected from one of\nthe standard device classes at www.lonmark.org/spid.\n\n \n\nUU\n\nUsage\n\nAn 8-bit identifier for the intended usage of the device. The most significant\nbit is set if the device interface is changeable (due to network variables with\nchangeable types being implemented by the interface. The second most\nsignificant bit is set if the remainder of the usage bits are specified by the\nfunctional profile of the primary functional block of the device. If the second\nmost significant bit is not set, the usage field is set to one of the standard\nusage values at www.lonmark.org/spid.\n\n \n\nTT\n\nChannel Type\n\nAn 8-bit identifier for the channel type supported by the device’s LonWorks\ntransceiver. The channel type values are listed at www.lonmark.org/spid.\n\n \n\nMM\n\nModel Number\n\n \n\n \n\nAn 8-bit identifier that is used to make the program ID unique for device\ninterfaces that share the same manufacturer, device class, usage, and\nchannel type. This model number does not have to be same as the actual\ndevice model number-— it just has to be unique from the model number of\nother device applications that share the same manufacturer, device class,\nusage, and channel type.\n\n \n\nThe Control Network Protocol 82",
    "Page_83": "The Control Network Protocol\n\n83",
    "Page_84": "Appendix A.\nLayer 1 and 2 Advanced Topics\n\nThis appendix describes details of layers 1 and 2 of the\nISO/IEC 14908-1 Control Network Protocol (CNP) which\nare generally of interest to transceiver designers. If you\nare developing with or integrating one of the standard\ntransceivers described in Chapter 3, the options described\nin this appendix have already been addressed by the\nstandard transceiver design.\n\nLayer 1 and 2 Advanced Topics 84",
    "Page_85": "Layer 1 Neuron Communications Interface\n\nThe Neuron core supports CNP media independence by using a flexible 5-pin\ncommunications port. This port can be configured in one of three modes to support a\nvariety of physical layer transceivers. They are single-ended, differential, and\nspecial-purpose modes. For special purpose mode, the Neuron core passes complete\ndata frames to the transceiver which is responsible for data encoding. For\nsingle-ended and differential modes, the Neuron core manages all data encoding and\nuses the transceiver only for the physical layer interface. Table 16 summarizes the\npin assignments for each mode.\n\nTable 16 Network Communication Port Pins\n\nData input + Data input Rx input\n\n \n\nData output - Data input Tx output\n\n \n\nTransmit Enable output | + Data output Bit clock output\n\n \n\n~Sleep (~Power-down) |- Data output ~Sleep output or Wake-up\noutput\n\ninput\n\n \n\n~Collision Detect input | ~Collision Detect Frame clock output\ninput\n\n \n\n \n\n \n\n \n\nSingle-ended and differential modes use Differential Manchester encoding which is a\nwidely used and reliable format for transmitting data over various media. In this\nencoding method, there is a minimum of one transition per bit time at the beginning\nof the bit time. If there is a second transition within the bit time, it occurs in the\nmiddle of the bit. By convention, a single transition per bit time is a “1” and two\nevenly spaced transitions per bit time is a “0.” Figure 26 shows the encoding of a\nsample bit stream.\n\n<—__.\n800ns @ 1.25Mbps\nFigure 26 Differential Manchester Encoding\n\nDifferential Manchester encoding has the benefits of zero DC offset, polarity\ninsensitivity, and simple bit synchronization between the transmitter and one or\n\nLayer 1 and 2 Advanced Topics 85",
    "Page_86": "more receivers. Polarity insensitivity simplifies installation of the communications\nchannel because reversal of polarity in the communication link will not affect data\nreception.\n\nSingle-Ended Mode\n\nThe single-ended mode is most commonly used with external active transceivers\ninterfacing to media such as free topology twisted pair, radio frequency (RF) carrier,\ninfrared, fiber optic, and coaxial cable.\n\nFigure 27 shows the communications port configuration for the single-ended mode of\noperation. Data communication occurs via the single-ended (with respect to Vgs)\ninput and output buffers on pins CPO and CP1. Single-ended mode contains an\nactive low sleep output (CP3) which can be used by the transceiver to power down\nactive circuitry when the Neuron core goes to sleep.\n\nDifferential\nManchester Data Input\nDecoder\n\nDifferential\nManchester\nEncoder\n\n \n\nData Output\n\n \n\nTransmit Enable\nTransmit Enable Output\n\n~Sleep (~Power-down)\nOutput\n\n~Sleep\n\n \n\n~Collison Detect\nInput\n\n \n\nCollision Detect Enable\nFigure 27 Network Communication Port Configuration in Single-ended Mode\n\nIn single-ended mode, the communications port encodes transmitted data and\ndecodes received data using differential Manchester coding (also known as bi-phase\nspace coding). This scheme provides a transition at the beginning of every bit period\nfor the purpose of synchronizing the receiver clock, referred to as the clock transition.\nThe value of a bit is indicated by the presence or absence of a second transition (the\ndata transition) halfway between clock transitions. A mid-cell transition indicates a\nzero. Lack of a mid-cell transition indicates a one.\n\nFigure 28 shows a typical packet where T is the bit period, equal to 1/(bit rate).\nClock transitions occur at the beginning of a bit period, and, therefore, the last valid\nbit in the packet does not have a trailing clock edge.\n\nr\nPy ttt ot tot\nOy 4 NVVVVVVVVVVVVVVVY\ncate OO LS LIV LIS COON\nTransmit\nEnable __/ \\____\n\nFigure 28 Single-ended Mode Data Format\n\n \n\nBefore beginning to transmit a data frame, the transmitting Neuron core initializes\nthe output data pin(s) to start low. In single-ended mode, it then asserts Transmit\nEnable (CP2); this ensures that the first transition in the packet is from low to high.\nThis first transition occurs within 1 bit time of asserting Transmit Enable, and\n\nLayer 1 and 2 Advanced Topics 86",
    "Page_87": "marks the beginning of the packet. Transmit Enable (CP2) and Data Output (CP1)\nare actively driven at all times in single-ended mode.\n\nReceiving Neuron cores use two windows for each bit period, T. The first window is\nset at T/2. Ifa transition is detected in the first window, a zero is being received.\n\nThe second window is at T. If no transition occurred in the first window, but a\ntransition occurs in the second window, a one is being received. The second\ntransition also sets up the next two windows (T/2 and T). If no transition occurs in\nthe first two windows, a Manchester code violation is detected and the packet is\nassumed to have ended. Table 17 shows the width of this window as a function of the\nratio of the Neuron input clock (MHz) and the channel bit rate (Mbps) selected. Ifa\ntransition falls outside of either window, it is not detected and the packet will contain\nerrors. The receiving Neuron core detects these errors and reports a bad packet.\nTiming instability of the transitions, known as jitter, may be caused by changes in\nthe communications medium, or instability in the transmitting or receiving devices’\ninput clocks. The jitter tolerance windows are expressed as fractions of the bit\nperiod, T, in Table 17. The MAC clock is 10MHz for a 5000 Series chip running at a\n10MHz or greater system clock, is 5Mhz for a 5000 Series chip running at a 5MHz\nsystem clock, and is one half the input clock for a 3100 Series chip.\n\nTable 17 Receiver itter Tolerance and Line-code Violation Windows\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nFor the receiver to reliably terminate reception of a packet, the received line-code\nviolation period must have no transitions until the Neuron core detects the end of the\npacket. The receiving Neuron core terminates a packet if no clock transitions are\ndetected after the last bit. Table 17 shows the minimum duration from the last clock\nedge to where the Neuron core is guaranteed to recognize the line-code violation.\nData transitions are allowed in this period (and must fall within the data window).\n\n \n\nDifferential Mode\n\nIn differential mode, the Neuron core’s built-in transceiver is able to differentially\ndrive and sense a twisted-pair transmission line with external passive components.\n\nLayer 1 and 2 Advanced Topics 87",
    "Page_88": "Differential mode is similar in most respects to single-ended mode; the key difference\nis that the driver/receiver circuitry is configured for differential line transmission.\nData output pins CP2 and CP3 are driven to opposite states during transmission and\nput in a high-impedance (undriven) state when not transmitting. The differential\nreceiver circuitry on pins CPO and CP1 has selectable hysteresis with eight selectable\nvoltage levels followed by a selectable low-pass filter with four selectable values of\ntransient pulse (noise) suppression. The selectable hysteresis and filter permit\noptimizing receiver performance to line conditions. See Table 18 and Table 19 for\nspecific values.\n\n \n\nDifferential\n+ Data Input\nNRZ Data Manchester P\nDecoder F - Data Input\nDifferential + Data Output\nNRZ Data) Manchester\n- Data Output\nEncoder tp\n\n \n\nTransmit Enable\n(Tri-state control)\n\n~Collison Detect\nInput\n\nCollision Detect Enable\n\n \n\nFigure 29 Network Communication P ort Configuration in Differential Mode\n\nFigure 29 shows a typical packet waveform in differential mode. The packet format\nis identical to that in single-ended mode described earlier. The starting level for the\ndata output is the inverse of the last received level to ensure that the first transition\noccurs on the network as quickly as possible. The coding, jitter tolerance, and\nminimum line-code violation length to receive apply identically to single-ended mode.\n\nae — VIVA VW SO\n\nFigure 30 Differential Mode Data Format\n\nLayer 1 and 2 Advanced Topics 88",
    "Page_89": "Table 18 Hysteresis Values Expressed as Differential P eak-to-peak Voltages in Terms of Vpp\n0 0.019Vpp 0.027Vpp 0.035VppD Vv\n1 0.040Vpp 0.054Vpp 0.068Vpp Vv\n2 0.061Vpp 0.081Vpp 0.101Vpp Vv\n3 0.081Vpp 0.108Vpp 0.135Vpp Vv\n4 0.101Vpp 0.135Vpp 0.169Vpp Vv\n5 0.121Vpp 0.162Vpp 0.203VppD Vv\n6 0.142Vpp 0.189Vpp 0.236Vpp Vv\n7 0.162Vpp 0.216Vpp 0.270Vpp Vv\n\n \n\n \n\n \n\n \n\n \n\nTable 19 Post-hysteresis Filter Values Expressed as Transient Pulse Suppression Times\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n0 2 6 9 ns\n1 90 270 580 ns\n2 200 535 960 ns\n3 410 1070 1920 ns\n\nSpecial-Purpose Mode\n\nIn special situations such as power line transceivers, it is desirable for the Neuron\ncore to provide the packet data in an unencoded format and without a preamble. In\nthis case, an intelligent transmitter accepts the unencoded data and does its own\nformatting and preamble insertion. The intelligent receiver detects and strips off the\npreamble and formatting and returns the decoded data to the Neuron core.\n\n \n\nSuch an intelligent transceiver contains its own input and output data buffers,\nintelligent control functions, and provides handshaking signals to properly pass the\ndata back and forth between the Neuron core and the transceiver.\n\nIn addition, there are many features that can be defined by and incorporated into a\nspecial purpose transceiver, for example:\n\ne Ability to configure various parameters of the transceiver from the Neuron core;\ne Ability to report on various parameters of the transceiver to the Neuron core;\n\ne Multiple channel operation;\n\ne Multiple bit rate operation;\n\ne Use of forward error correction; and\n\nLayer 1 and 2 Advanced Topics 89",
    "Page_90": "e Media specific modulation techniques requiring special message headers and\nframing.\n\nWhile the special purpose mode offers custom features, most transceivers use the\nsingle-ended mode for most types of media, from coaxial cable to RF to fiber optic,\nbecause it simplifies transceiver implementation and offers Differential Manchester\nencoding, which takes care of clock recovery.\n\nLayer 2 Advanced Topics\n\nThis section describes the following layer-2 topics that are typically only of interest to\ntransceiver designers:\n\ne ©Interpacket gap\n\ne Collision detection\n\ne Collision resolution\ne Oscillator accuracy\n\ne Preample length\n\n \n\nInterpacket Gap\n\nChannel bandwidth is consumed by a series of packet cycles interspersed with idle\ntime. A packet cycle consists of the packet itself followed by the interpacket gap.\nPacket cycles vary in length due to the randomizing nature of the media access\nalgorithm as well as varying protocol overhead and application data size. This\naverage packet cycle duration determines the rate at which the media access\nalgorithm decreases its assumed backlog of offered traffic during network idle\nconditions.\n\nThe interpacket gap is a variable amount of time following each packet. The\ninterpacket gap ends, and idle time begins, when the MAC sublayers in all devices\nand routers on the channel reach the idle state (have no packet to send or receive).\n\nThe interpacket gap includes the beta 1 time and beta 2? slots. The beta 1 time is the\nfixed component in the idle period after a packet has been sent. The beta 2 slots are\nused for media access control. Figure 31 shows the contents of the interpacket gap.\n\n      \n   \n\n|g SCédntterpacett Gat\n\n|<—_—_—_—_——_—_————- Beta 1 Time\n\nPost: _ lg Interpacket\npacket Padding )\n\nBeta 2 Slots\n\n  \n\nhandling\nNetwork Idle Wait\n\nPre-packet handling\nFigure 31 Interpacket Gap\n\nThe beta 1 time is a function of the following:\n\n* Oscillators: Oscillator frequencies and accuracies on the various network\ndevices.\n\nLayer 1 and 2 Advanced Topics 90",
    "Page_91": "* Post-packet handling. Following the successful transmission or reception of a\npacket, if the protocol processor is a Neuron core, the Neuron MAC processor\nperforms error checks and handshakes with the Neuron network processor. The\nnumber of CPU minor cycles (200ns with a 10MHz input clock) varies as a\nfunction of the mode and direction as follows (these times are for Neuron\nfirmware versions 3 and 4 running on Neuron 3120 and 3150 Chips):\n\nTable 20 Neuron Core Post-Packet Processing Time\n\n \n\nTransmitter 313 cycles 307 cycles\n\n \n\n \n\n \n\nReceiver 295 cycles 285 cycles\n\n \n\n+  Interpacket gap padding. This padding allows the MAC sublayer in each device\nto meet a variety of objectives:\n\n+ Synchronize to slower devices on the channel\n\n* Compensate for receive end delay. This is the difference between the\ntransmitting device’s view of a packet and a receiving device’s view of a\npacket. This could be due, for example, to buffering in the transceiver. This\nvalue does not include variable delays such as propagation delay between the\ntransmitter and receiver or special purpose mode framing delays (these are\naccounted for in the beta 2 computation). For example, if a special purpose\nmode transceiver uses loss of carrier for one byte time as the end of packet\nindicator, the receiver will be one byte time out of sync with the transmitter.\n\n* Meet the media indeterminate time. This is the amount of time following\ncompletion of packet transmission where the channel continues to appear to\nbe busy. During this time there could be false transitions on the channel\nsuch as transitions caused by ringing, or the transmitter may be unable to\ndetect transitions (due to a transmit-to-receive turnaround time). In either\ncase, reliable network idle detection could not be performed. Therefore, the\nnetwork idle detection stage is held off until the indeterminate time has\npassed.\n\nIn differential and single-ended mode, the indeterminate time is measured\nfrom the time the code violation is completely output until the transceiver is\nreliably able to detect valid transitions. An additional 3 bit times is then\nadded to this time. The added 3 bit times is required because the Neuron\ncore receive logic has a 3 bit time memory of network activity.\n\nThe indeterminate time can be determined analytically or empirically. For\nexample, for differential mode, the signal can be examined after a packet and\nthe last point at which it crosses the hysteresis threshold observed. This\nshould be done under worst case conditions. Alternatively, an analytical\napproach may be used.\n\n+ Meet the minimum interpacket gap. This gap provides a means for imposing\na minimum on the interpacket gap independent of the other timing factors.\nThis minimum applies to the case where a packet is transmitted in the first\nbeta 2 slot. This can be used to reduce the instantaneous packet arrival rate\n\nLayer 1 and 2 Advanced Topics 91",
    "Page_92": "or satisfy regulatory requirements such as the CENELEC mains power line\ncarrier access protocol.\n\nIn differential mode, the gap is measured from the end of the code violation to\nthe first transmitted transition.\n\nIn single-ended mode, the gap is measured from the end of the code violation\nto the rising TX ENABLE.\n\n* Network idle wait. This period constitutes a check to ensure that the network is\nindeed idle. The MAC processor ensures there is no network activity for the\nduration of one beta 2 slot. If there is activity, the MAC processor waits for the\nchannel to go idle.\n\n*  Pre-packet handling. Prior to transmitting a new packet, the MAC sublayer\nselects a beta 2 slot into which to transmit. It must also perform the various I/O\noperations to begin the transmission. This consumes 270 MAC-processor cycles\nfor differential and single-ended mode and 317 cycles for special purpose mode for\nNeuron firmware versions 3 and 4 running on Neuron 3120 and 3150 Chips.\n\n* Beta 2 slot countdown. Prior to transmitting, the MAC processor counts down N\nbeta 2 slots, where N is the count selected in the previous step. The size of the\nbeta 2 slot does not vary among devices on the same channel except as a function\nof oscillator accuracy.\n\nBeta 2 is the interval that is used by both the network idle wait and for media access.\nThe network idle wait constrains beta 2 only in that it must be at least one bit time\nin width. The beta 2 time is used for both priority and non-priority slots.\n\nFor priority beta 2 slots to work, a device choosing to transmit in priority slot N must\nbe recognized as transmitting before any other device attempts to transmit in\npriority slot N+1. Thus the slots must be wide enough to account for the following:\n\n+ Discrepancies among the devices in terms of their views of the end of the\nprevious packet.\n\n+ Variances in slot width due to oscillator accuracy.\n+ Propagation of the transmitted signal to all the devices.\nThe beta 2 time is a function of the following:\n\n* Oscillators. Oscillator frequencies and accuracies on the various network\ndevices.\n\n‘  Post-packet handling start. Different devices will be out of synchronization at\nthe packet end. For Neuron cores using differential or single-ended mode, the\nvariance can be up to one MAC processor minor cycle (300ns with a 1OMHz MAC\nprocessor clock). In special purpose mode, this variation will be up to one\ninterface frame.\n\n: Interpacket variations. Different devices with different clocks and different\ninterpacket pad values will not have the exact same duration of interpacket\noverhead.\n\n* Priority slot count. The number of priority slots on the channel.\n\nLayer 1 and 2 Advanced Topics 92",
    "Page_93": "+ Neuron core transmit start. From the time the device protocol software requests\nstart of transmit until transmission actually starts takes up to one bit time in\ndifferential and single-ended mode. In special purpose mode, this can take up to\none interface frame time.\n\n+  Receive-to-transmit turnaround. These are the same components which were\ndiscussed for the preamble.\n\n* Missed preamble. This is similar to the missed preamble component discussed\nfor the preamble. It is somewhat different, however, in that it is a measure of the\nmissed preamble which would convey network activity. In differential and\nsingle-ended mode, network activity is inferred from any transition and is latched\nfor 3 bit times whereas bit sync qualification cannot begin until valid bits begin\nappearing. Special purpose mode transceivers make similar distinctions.\n\n+ Propagation delay. This is the amount of time for a signal to traverse the worst\ncase distance between two devices.\n\n* Receiver delay. This is amount of time it takes the receiver to recognize channel\nactivity once the signal has arrived. This could take the form of signal\npropagation delays through the receiver. Ifa carrier is used, it could be due to\ncarrier detection time.\n\nSpecial purpose mode transceivers have the ability to reject transmission requests\nbased on the channel activity status. Time to propagate a busy/possible packet\ncondition to the device does not need to be counted.\n\nFigure 32 is an example of the placement of the above parameters. The diagram is\nnot to scale.\n\nTromaahter %\n\n| Broviver re | fe\n\nReceive End Detar\nnade cami ae Tamme\n\nMremmbrrmde te\n\nFigure 32 Interpacket Gap Components\n\n \n\nCollision Detection\n\nA collision is defined as the event when two or more devices access the\ncommunication medium at almost the same time, resulting in mutual interference\namong their electrical signals on the transmission medium. Packets involved ina\ncollision cannot be successfully received unless collision resolution is used as\ndescribed in the next section, which results in a delay in response time.\n\nThe media access algorithm used by CNP minimizes the number of potential\ncollisions by randomizing access to the medium. Randomizing slots reduce the\nprobability of collisions, however this does not completely eliminate them.\n\nLayer 1 and 2 Advanced Topics 93",
    "Page_94": "CNP supports optional collision detection. Collision detection hardware at a\ntransmitting device informs the transmitting device shortly after a collision occurs\nabout the need to retry. If hardware is implemented to detect a collision, the\nfirmware cancels transmission of a packet during the preamble upon detecting a\ncollision. This allows the device to immediately retransmit any packet that has been\ndamaged by a collision.\n\nIf a device does not use collision detection, then the only way it can determine that a\nmessage has not been received is to request an acknowledgement as described in\nAcknowledged Service. When acknowledged service is used, the retry timer is set to\nallow sufficient time for a message to be sent and acknowledged (typically 48 to 96ms\nat 1.25Mbps when there are no routers in the transmission path). If the retry timer\ntimes out, the device attempts to re-access the channel.\n\nAn alternative to acknowledged service described in Repeated Service is the repeated\nservice. With repeated service, each message is automatically repeated a fixed\nnumber of times. This ensures that the message will get though even if one or more\ncollisions occur, as long as the number of collisions is less than the number of retries.\nThis improves response time because the sending device does not have to wait for the\nacknowledgement before retrying the message.\n\nThe collision avoidance built into the predictive p-persistent CSMA MAC sublayer, as\ndescribed in Predictive P-Persistent CSMA earlier in this chapter, is so good that the\nperformance benefit provided by collision detection is minimal.\n\nIn differential or single-ended mode, collisions may be detected in the preamble\n(configurable), near the end of the packet (always), and after the end of the packet\n(configurable). If collisions are checked for in the preamble, such collisions result in\ntermination of the packet. Otherwise, the colliding packet is completely transmitted.\nCollision detection is not enabled until 25% of the way into the bit sync portion of the\npreamble (because false collisions are often a problem at a packet's front end).\n\nChecking for collisions during the preamble is only recommended if it is certain that\nwhen one transmitter detects a collision during the preamble, so will all others. If\nthis were not the case, a collider could be left transmitting after termination by the\nother colliders leaving the lone transmitter with, most likely, a bad packet (due to a\ncorrupted preamble) but with no collision indication.\n\nChecking for collisions after the packet end is not recommended if the code violation\nmight result in a false collision indication.\n\nIn special purpose mode, collisions can be detected at any point in the packet.\nPackets are always terminated immediately upon report of a collision from the\ntransceiver to the protocol processor.\n\n \n\nCollision Resolution\n\nSpecial purpose mode transceivers can implement collision resolution. This is\npossible because a special purpose transceiver may be able to detect collisions early\nin the preamble and terminate transmission. The last device left transmitting\ncompletes the frame transmission, and all devices backing off can turn around and\nreceive the transmitted frame. To give colliding devices enough time to turn around,\nthe preamble length must be extended as described in the next section.\n\nLayer 1 and 2 Advanced Topics 94",
    "Page_95": "Oscillator Accuracy\n\nOscillator accuracy affects many parameters including bit times, beta 1 times, and\nbeta 2 times. The protocol processor on each device is controlled by an independent\noscillator with some degree of accuracy. The variance from the nominal frequency is\nassumed to be symmetric and is typically specified in parts per million.\n\nWherever asynchronous timing is factored into computations, the oscillator accuracy\nis considered. This includes processor cycle times, bit times, and interface frame\ntimes (as used by special purpose mode). Depending on the circumstances, times are\nadjusted to their worst case or best case time.\n\nIn differential and single-ended modes, the protocol processor receiver synchronizes\nto the incoming bit stream so oscillator accuracy is not an issue for bit counting\nconditions such as bit sync threshold. Extreme oscillator inaccuracy will cause loss of\nsynchronization.\n\n \n\nPreamble Length\n\nThe length of the preamble is affected by the following parameters:\n\n+  Receive-to-transmit turnaround. This is the amount of time it takes the\ntransmitting transceiver to switch from receive mode to transmit mode. During\nthis period, nothing is being transmitted on the communications channel, even\nthough the transmitting device is actively transmitting. The device starts timing\nthe preamble when the packet starts from its vantage point.\n\n+ Missed preamble. This is the amount of the front end of the preamble lost by the\nreceiving transceiver due to perturbation of the signal as a result of start-up\nanomalies. For example, on twisted pair, there may be an initial DC offset which\nresults in the first few bits failing to pass the hysteresis threshold.\n\n+ Packet qualification. This is the amount of preamble which must be seen by the\nreceiving transceiver's receive logic to decide that a valid packet is present. In\ndifferential and single-ended mode, the packet qualification time is controlled by\nthe configurable bit sync threshold (a bit count from 4 to 7 bits). Increasing this\ncount decreases the likelihood that some form of noise will be misconstrued as a\npacket, but also reduces the maximum channel bandwidth.\n\n+ Packet response time. The Neuron firmware detects qualified incoming packets\nby polling. The worst case interval between detection of the incoming packet and\nstart of the packet input operation is used to compute the amount of preamble\nneeded following packet qualification. Not complying with this means that there\nis a chance that an overflow condition can occur in the receiver, resulting in a lost\nor improperly received packet.\n\nThree different packet response times may be used depending on whether or not\ncollision detection or collision resolution is used. Table 21 summarizes the three\nresponse times. These times may be increased for special purpose mode as\ndescribed in the next section.\n\nLayer 1 and 2 Advanced Topics 95",
    "Page_96": "Table 21 Neuron Core Packet Response Time\n\n \n\nStandard 136.2usecs * 20/MAC clock\n\n \n\nCollision Detection 211.8usecs * 20/MAC clock\nCollision Resolution 258usecs * 20/MAC clock\n\n \n\n \n\n \n\n \n\nTf collision detection and collision resolution are not used, the standard packet\nresponse time is used. The standard packet response time is based on the\nNeuron core's time-to-respond when in the idle state or in various states of\npreparing for transmission. Packets arriving during the interpacket gap may be\nlost, however, the probability of a packet arriving during the interpacket gap is\ntypically much lower than the probability of a collision.\n\nA longer packet response time is used with collision detection to avoid losing\npackets that are transmitted during the interpacket gap. This may occur when\ndevices get out of synchronization with the network due to collisions or noise.\n\nThe longest packet response time is used with collision resolution to provide\nsufficient time for the devices which have terminated transmission to be able to\nreceive the “winning” packet.\n\nBecause the Neuron core response time is directly proportional to the Neuron\ncore's MAC clock, the response time for every device on a channel must be based\non the slowest device on the channel.\n\n* Collision detection. Special consideration must be made when collision detection\nis being used. In particular, if collisions are ignored during some beginning\nportion of the preamble, it is possible that a collision occurring only during that\nportion would go unnoticed. Therefore, the preamble must be long enough such\nthat the amount of preamble following the collision-ignore portion satisfies the\nprevious three constraints.\n\nFor example, if two devices are transmitting simultaneously and a third device\nfails to detect this transmission; the third device may transmit near the end of\nthe collision. This can occur if two transmissions cancel themselves so that a\nthird device does not detect either transmission. If the only portion of the third\ndevice's transmission which collides is during the collision-ignore period, it will\nnot detect the collision. If the remaining portion of the preamble were not\nsufficiently long, the packet could be lost.\n\nThe total preamble length is thus determined by adding the contributions of\nreceive-to-transmit turnaround, missed preamble, packet qualification and\nNeuron core response time. To that sum, the collision detect consideration is\nfactored in.\n\nExample\n\nHere is an example of the components of a differential or single-ended mode\npreamble. Table 22 lists communications parameters for a sample 78kbps\ntransceiver (this is not the standard TP/XF-78 transceiver type described earlier, it is\ninstead a lower performance transceiver that illustrates how transceiver performance\naffects preamble length).\n\nLayer 1 and 2 Advanced Topics 96",
    "Page_97": "Table 22. Example Communications Parameters\n\n \n\nChannel minimum input clock 5 Mhz (1.2 usec cycle time)\nChannel bit rate 78kbps (12.8 usec bit time)\nOscillator accuracy 2000 PPM\nReceive-to-transmit turnaround time 7.5 bits\n\n \n\n \n\n \n\n \n\nMissed preamble 2 bits\n\n \n\nPacket qualification 6 bits\n\nNeuron core packet response time’ 274 usec (227 * 1.2 * 1.0022)\nor 22 bits\n\nCollision detection No\n\n1 The packet response time is adjusted by the square of the oscillator accuracy to\naccount for the case where the receiver is running at the slowest rate and the\nsender at the fastest rate.\n\n \n\n \n\n \n\n \n\n \n\nThis yields the preamble shown in Figure 33.\n\nCoe ee rar rer\n\nReels Nesom Chip ro\nResponse Tine\n\n“r rn Packet Qualiikation\n\nBissed Preanable\n\nFigure 33 Example Preamble\n\nThe preamble is 23.5 bits long (from the transmitting device’s perspective). The\npacket response time was offset by seven bits of the first data byte. Seven was used\nrather than eight to provide a bit of margin.\n\nLayer 1 and 2 Advanced Topics 97",
    "Page_98": "= ECHELON\n\nwww.echelon.com"
}
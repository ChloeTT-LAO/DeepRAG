{
    "Page_1": "OMAR SANTOS\nRON TAYLOR\n\nCert Guide\n\nLearn, prepare, and practice for exam Success\n\nSrolaslon naw\n\nPen Test+\n\nSave 10%\n\non Exam\n\nVoucher\n\nPEARSON IT\n\nSee Inside\nCERTIFICATION\n\n \n\nFREE SAMPLE CHAPTER\nSHARE WITH OTHERS\n\n<n",
    "Page_2": "CompTIA® PenTest+\nCert Guide\n\nOmar Santos\nRon Taylor",
    "Page_3": "CompTIA® PenTest+ Cert Guide\n\nOmar Santos\nRon Taylor\nCopyright © 2019 by Pearson Education, Inc.\n\nAll rights reserved. No part of this book shall be reproduced, stored in a retrieval system, or transmitted\nby any means, electronic, mechanical, photocopying, recording, or otherwise, without written permission\nfrom the publisher. No patent liability is assumed with respect to the use of the information contained\nherein. Although every precaution has been taken in the preparation of this book, the publisher and\nauthor assume no responsibility for errors or omissions. Nor is any liability assumed for damages\nresulting from the use of the information contained herein.\n\nISBN-13: 978-0-7897-6035-7\nISBN-10: 0-7897-6035-5\n\nLibrary of Congress Control Number: 2018956261\nOl 18\n\n \n\nTrademarks\n\nAll terms mentioned in this book that are known to be trademarks or service marks have been appropriately\ncapitalized. Pearson IT Certification cannot attest to the accuracy of this information. Use of a term in this\nbook should not be regarded as affecting the validity of any trademark or service mark.\n\nMICROSOFT® WINDOWS®, AND MICROSOFT OFFICE® ARE REGISTERED TRADEMARKS\nOF THE MICROSOFT CORPORATION IN THE U.S.A. AND OTHER COUNTRIES. THIS\nBOOK IS NOT SPONSORED OR ENDORSED BY OR AFFILIATED WITH THE MICROSOFT\nCORPORATION.\n\nWarning and Disclaimer\n\nThis book is designed to provide information about the CompTIA Pen'Test+ exam. Every effort has been\nmade to make this book as complete and accurate as possible, but no warranty or fitness is implied. The\nhave neither liability nor\nresponsibility to any person or entity with respect to any loss or damages arising from the information\n\n  \n \n\n \n\ninformation provided is on an “as is” basis. The author and the publisher sha\n\ncontained in this book or from the use of the supplemental online content or programs accompanying it.\n\nMICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS MAKE NO REPRESENTATIONS\nABOUT THE SUITABILITY OF THE INFORMATION CONTAINED IN THE DOCUMENTS\nAND RELATED GRAPHICS PUBLISHED AS PART OF THE SERVICES FOR ANY\nPURPOSE. ALL SUCH DOCUMENTS AND RELATED GRAPHICS ARE PROVIDED “AS,\n\nIS” WITHOUT WARRANTY OF ANY KIND. MICROSOFT AND/OR ITS RESPECTIVE\nSUPPLIERS HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH REGARD\nTO THIS INFORMATION, INCLUDING ALL WARRANTIES AND CONDITIONS OF\nMERCHANTABILITY, WHETHER EXPRESS, IMPLIED OR STATUTORY, FITNESS FOR\n\nA PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL\nMICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS BE LIABLE FOR ANY SPECIAL,\nINDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER\nRESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF\nCONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF INFORMATION AVAILABLE\nFROM THE SERVICES.\n\nTHE DOCUMENTS AND RELATED GRAPHICS CONTAINED HEREIN COULD\n\nINCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES\n\nARE PERIODICALLY ADDED TO THE INFORMATION HEREIN. MICROSOFT AND/OR\n\nITS RESPECTIVE SUPPLIERS MAY MAKE IMPROVEMENTS AND/OR CHANGES IN THE\nPRODUCT(S) AND/OR THE PROGRAM(S) DESCRIBED HEREIN AT ANY TIME. PARTIAL,\nSCREEN SHOTS MAY BE VIEWED IN FULL WITHIN THE SOFTWARE VERSION SPECIFIED.\n\n \n\nEditor-in-Chief\nMark Taub\n\n \n\nProduct Line Manager\nBrett Bartow\n\nAcquisitions Editor\nPaul Carlstroem\n\nManaging Editor\nSandra Schroeder\n\nDevelopment Editor\nChristopher Cleveland\n\nProject Editor\nMandie Frank\n\nCopy Editor\nKitty Wilson\n\nTechnical Editors\nChris McCoy\nBenjamin Taylor\n\nEditorial Assistant\nVanessa Evans\n\nDesigner\nChuti Prasertsith\n\nComposition\ncodemantra\n\nIndexer\nErika Millen\n\nProofreader\nChristopher Morris",
    "Page_4": "Contents at a Glance\n\nCHAPTER 1\nCHAPTER 2\nCHAPTER 3\nCHAPTER 4\nCHAPTER 5\nCHAPTER 6\nCHAPTER 7\nCHAPTER 8\nCHAPTER 9\nCHAPTER 10\nCHAPTER 11\nAPPENDIX A\n\nIntroduction xxiii\n\nIntroduction to Ethical Hacking and Penetration Testing 3\nPlanning and Scoping a Penetration Testing Assessment 25\nInformation Gathering and Vulnerability Identification 63\nSocial Engineering Attacks 121\n\nExploiting Wired and Wireless Networks 143\n\nExploiting Application-Based Vulnerabilities 207\n\nExploiting Local Host and Physical Security Vulnerabilities 277\nPerforming Post-Exploitation Techniques 333\n\nPenetration Testing Tools 361\n\nUnderstanding How to Finalize a Penetration Test 471\n\nFinal Preparation 505\n\nAnswers to the “Do | Know This Already?” Quizzes and\nQ&A Sections 511\n\nIndex 541",
    "Page_5": "iv\n\nCompTIA® PenTest+ Cert Guide\n\nContents\n\nChapter 1\n\nChapter 2\n\nIntroduction xxiii\n\nIntroduction to Ethical Hacking and Penetration Testing 3\n“Do I Know This Already?” Quiz 3\nUnderstanding Ethical Hacking and Penetration Testing 6\n\nWhat Is the Difference Between Ethical Hacking and Nonethical\nHacking? 6\n\nWhy Do We Need to Do Penetration Testing? 7\nUnderstanding the Current Threat Landscape 7\nRansomware 8\nIoT 8\nThreat Actors 9\nExploring Penetration Testing Methodologies 10\n\nWhy Do We Need to Follow a Methodology for Penetration\nTesting? 10\n\nPenetration Testing Methods 11\nSurveying Penetration Testing Methodologies 13\nBuilding Your Own Lab 16\nRequirements and Guidelines for Penetration Testing Labs 18\nWhat Tools Should You Use in Your Lab? 18\nWhat if You Break Something? 19\nReview All Key Topics 20\nDefine Key Terms 20\nQ&A 21\nPlanning and Scoping a Penetration Testing Assessment 25\n“Do I Know This Already?” Quiz 25\nExplaining the Importance of the Planning and Preparation Phase 29\nUnderstanding the Target Audience 29\nRules of Engagement 30\nCommunication Escalation Path 31\nConfidentiality of Findings 32\nBudget 32\n\nPoint-in-Time Assessment 33",
    "Page_6": "Contents\n\nImpact Analysis and Remediation Timelines 34\nDisclaimers 38\nTechnical Constraints 39\nSupport Resources 40\n\nUnderstanding the Legal Concepts of Penetration Testing 41\nContracts 41\n\nWritten Authorization 42\n\nSOW 42\nMSA 42\nNDA 43\n\nExport Restrictions 43\nCorporate Policies 43\nLearning How to Scope a Penetration Testing Engagement Properly 44\nScope Creep 44\nTypes of Assessment 45\nSpecial Scoping Considerations 45\nTarget Selection 46\nStrategy 47\nRisk Acceptance, Tolerance, and Management 47\nUnderstanding Risk Management 48\nRisk Acceptance 48\nRisk Mitigation 48\nRisk Transfer, Avoidance, and Sharing 49\nRisk Appetite and Tolerance 49\nLearning the Key Aspects of Compliance-Based Assessments 50\nRules for Completing Compliance-Based Assessments 50\nRegulations in the Financial Sector 50\nRegulations in the Healthcare Sector 52\nPayment Card Industry Data Security Standard (PCI DSS) 53\nKey Technical Elements in Regulations You Should Consider 56\nLimitations When Performing Compliance-Based Assessments 57\nReview All Key Topics 58\nDefine Key Terms 59\nQ&A 59",
    "Page_7": "vi CompTIA® PenTest+ Cert Guide\n\nChapter 3 Information Gathering and Vulnerability Identification 63\n“Do I Know This Already?” Quiz 63\nUnderstanding Information Gathering and Reconnaissance 67\nUnderstanding Active Reconnaissance vs. Passive Reconnaissance 70\nUnderstanding Active Reconnaissance 71\nNmap Scan Types 73\nTCP Connect Scan (-sT) 73\nUDP Scan (-sU) 74\nTCP FIN Scan (-sF) 76\nPing scan (-sn) 77\nExploring the Different Types of Enumeration 78\nHost Enumeration 78\nUser Enumeration 80\nGroup Enumeration 81\nNetwork Share Enumeration 82\nWeb Page Enumeration/Web Application Enumeration 83\nService Enumeration 85\nExploring Enumeration via Packet Crafting 85\nUnderstanding Passive Reconnaissance 87\nDomain Enumeration 88\nPacket Inspection and Eavesdropping 90\nUnderstanding Open Source Intelligence (OSINT) Gathering 90\nExploring Reconnaissance with Recon-ng 90\nUnderstanding the Art of Performing Vulnerability Scans 103\nHow a Typical Automated Vulnerability Scanner Works 103\nUnderstanding the Types of Vulnerability Scans 104\nUnauthenticated Scans 104\nAuthenticated Scans 105\nDiscovery Scans 106\nFull Scans 106\nStealth Scans 108\nCompliance Scans 109\nChallenges to Consider When Running a Vulnerability Scan 110\nConsidering the Best Time to Run a Scan 110",
    "Page_8": "Chapter 4\n\nDetermining What Protocols Are in Use 110\nNetwork Topology 110\nBandwidth Limitations 111\nQuery Throttling 111\nFragile Systems/Nontraditional Assets 111\nUnderstanding How to Analyze Vulnerability Scan Results\nUS-CERT 113\nThe CERT Division of Carnegie Mellon University 113\nNIST 114\nJPCERT 114\nCAPEC 114\nCVE 114\nCWE 115\nHow to Deal with a Vulnerability 115\nReview All Key Topics 116\nDefine Key Terms 117\nQ&A 117\nSocial Engineering Attacks 121\n“Do I Know This Already?” Quiz 121\nUnderstanding Social Engineering Attacks 125\nPhishing 126\nPharming 126\nMalvertising 127\nSpear Phishing 128\nSMS Phishing 134\nVoice Phishing 135\nWhaling 135\nElicitation, Interrogation, and Impersonation (Pretexting)\nSocial Engineering Motivation Techniques 137\nShoulder Surfing 137\nUSB Key Drop and Social Engineering 138\nReview All Key Topics 138\nDefine Key Terms 139\nQ&A 139\n\nContents vii\n\n112\n\n135",
    "Page_9": "viii CompTIA® PenTest+ Cert Guide\n\nChapter 5 Exploiting Wired and Wireless Networks 143\n\n“Do I Know This Already?” Quiz 143\n\nExploiting Network-Based Vulnerabilities 148\nExploring Windows Name Resolution and SMB Attacks 148\nNetBIOS Name Service and LLMNR_ 148\nSMB Exploits 151\nDNS Cache Poisoning 155\nSNMP Exploits 157\nSMTP Exploits 159\nSMTP Open Relays 160\nUseful SMTP Commands 160\nUsing Known SMTP Server Exploits 163\nFTP Exploits 166\nPass-the-Hash Attacks 168\nKerberos and LDAP-Based Attacks 169\nUnderstanding Man-in-the-Middle Attacks 173\nUnderstanding ARP Spoofing and ARP Cache Poisoning 173\nDowngrade Attacks 175\nRoute Manipulation Attacks 175\n\nUnderstanding Denial-of-Service (DoS) and Distributed\nDenial-of-Service (DDoS) Attacks 176\n\nDirect DoS Attacks 176\n\nReflected DDoS Attacks 178\n\nAmplification DDoS Attacks 178\n\nNetwork Access Control (NAC) Bypass 179\n\nVLAN Hopping 181\n\nDHCP Starvation Attacks and Rogue DHCP Servers 183\nExploiting Wireless and RF-Based Attacks and Vulnerabilities 185\n\nInstalling Rogue Access Points 185\n\nEvil Twin Attacks 185\n\nDeauthentication Attacks 186\n\nAttacking the Preferred Network Lists 189\n\nJamming Wireless Signals and Causing Interference 189\n\nWar Driving 190",
    "Page_10": "Chapter 6\n\nContents\n\nIX\n\nInitialization Vector (IV) Attacks and Unsecured Wireless\nProtocols 190\n\nAttacking WEP 190\nAttacking WPA 192\nKRACK Attacks 196\nAttacking Wi-Fi Protected Setup (WPS) 197\nKARMA Attacks 197\nFragmentation Attacks 197\nCredential Harvesting 199\nBluejacking and Bluesnarfing 199\nRadio-Frequency Identification (RFID) Attacks 200\nReview All Key Topics 200\nDefine Key Terms 202\nQ&A 202\nExploiting Application-Based Vulnerabilities 207\n“Do I Know This Already?” Quiz 207\nOverview of Web Applications for Security Professionals 213\nThe HTTP Protocol 213\nUnderstanding Web Sessions 221\nHow to Build Your Own Web Application Lab 224\nUnderstanding Injection-Based Vulnerabilities 227\nExploiting SQL Injection Vulnerabilities 228\nA Brief Introduction to SQL 228\nSQL Injection Categories 232\nFingerprinting a Database 234\nSurveying the UNION Exploitation Technique 235\nUsing Booleans in SQL Injection Attacks 237\nUnderstanding Out-of-Band Exploitation 237\nExploring the Time-Delay SQL Injection Technique 239\nSurveying a Stored Procedure SQL Injection 239\nUnderstanding SQL Injection Mitigations 240\nHTML Injection Vulnerabilities 241\nCommand Injection Vulnerabilities 241\n\nExploiting Authentication-Based Vulnerabilities 242",
    "Page_11": "CompTIA® PenTest+ Cert Guide\n\nExploring Credential Brute Forcing 243\nUnderstanding Session Hijacking 245\nUnderstanding Redirect Attacks 249\nTaking Advantage of Default Credentials 249\nExploiting Kerberos Vulnerabilities 250\nExploiting Authorization-Based Vulnerabilities 250\nUnderstanding Parameter Pollution 250\nExploiting Insecure Direct Object Reference Vulnerabilities 251\nUnderstanding Cross-Site Scripting (XSS) Vulnerabilities 252\nReflected XSS Attacks 253\nStored XSS Attacks 255\nDOM-Based XSS Attacks 256\nXSS Evasion Techniques 257\nXSS Mitigations 258\nUnderstanding Cross-Site Request Forgery Attacks 260\nUnderstanding Clickjacking 261\nExploiting Security Misconfigurations 262\nExploiting Directory Traversal Vulnerabilities 262\nUnderstanding Cookie Manipulation Attacks 263\nExploiting File Inclusion Vulnerabilities 264\nLocal File Inclusion Vulnerabilities 264\nRemote File Inclusion Vulnerabilities 264\nExploiting Insecure Code Practices 265\nComments in Source Code 265\nLack of Error Handling and Overly Verbose Error Handling 266\nHard-Coded Credentials 266\nRace Conditions 266\nUnprotected APIs 267\nHidden Elements 270\nLack of Code Signing 270\nReview All Key Topics 271\nDefine Key Terms 272\nQ&A 273",
    "Page_12": "Contents xi\n\nChapter 7 Exploiting Local Host and Physical Security Vulnerabilities 277\n“Do I Know This Already?” Quiz 277\nExploiting Local Host Vulnerabilities 281\nInsecure Service and Protocol Configurations 281\nLocal Privilege Escalation 285\nUnderstanding Linux Permissions 286\nUnderstanding SUID or SGID and Unix Programs 291\nInsecure SUDO Implementations 294\nRet2libe Attacks 298\nWindows Privileges 299\nCPassword 299\nClear-Text Credentials in LDAP 300\nKerberoasting 301\nCredentials in Local Security Authority Subsystem Service (LSASS) 301\nSAM Database 302\nUnderstanding Dynamic Link Library Hijacking 303\nExploitable Services 304\nInsecure File and Folder Permissions 305\nUnderstanding Windows Group Policy 305\nKeyloggers 306\nScheduled Tasks 307\nEscaping the Sandbox 308\nVirtual Machine Escape 310\nUnderstanding Container Security 310\nMobile Device Security 314\nUnderstanding Android Security 316\nUnderstanding Apple iOS Security 323\nUnderstanding Physical Security Attacks 326\nUnderstanding Physical Device Security 326\nProtecting Your Facilities Against Physical Security Attacks 327\nReview All Key Topics 328\nDefine Key Terms 329\nQ&A 329",
    "Page_13": "xii\n\nCompTIA® PenTest+ Cert Guide\n\nChapter 8\n\nChapter 9\n\nPerforming Post-Exploitation Techniques 333\n\n“Do I Know This Already?” Quiz 333\n\nMaintaining Persistence After Compromising a System 337\nCreating Reverse and Bind Shells 338\nCommand and Control (C2) Utilities 344\nCreating and Manipulating Scheduled Jobs and Tasks 346\nCreating Custom Daemons, Processes, and Additional Backdoors 346\nCreating New Users 346\n\nUnderstanding How to Perform Lateral Movement 347\nPost-Exploitation Scanning 347\nUsing Remote Access Protocols 348\nUsing Windows Legitimate Utilities 349\nUsing PowerShell for Post-Exploitation Tasks 349\nUsing PowerSploit 351\n\nUsing the Windows Management Instrumentation for Post-Exploitation\nTasks 354\n\nUsing Sysinternals and PSExec 355\n\nUnderstanding How to Cover Your Tracks and Clean Up Systems After a\nPenetration Testing Engagement 356\n\nReview All Key Topics 357\n\nDefine Key Terms 358\n\nQ&A 358\n\nPenetration Testing Tools 361\n“Do I Know This Already?” Quiz 361\n\nUnderstanding the Different Use Cases of Penetration Testing Tools and\nHow to Analyze Their Output 365\n\nPenetration Testing—Focused Linux Distributions 365\nKali Linux 366\n\nParrot 367\n\nBlackArch Linux 367\n\nCAINE 369\n\nSecurity Onion 369\n\nCommon Tools for Reconnaissance and Enumeration 370\nTools for Passive Reconnaissance 370\n\nTools for Active Reconnaissance 390",
    "Page_14": "Contents xiii\n\nCommon Tools for Vulnerability Scanning 400\nCommon Tools for Credential Attacks 420\nJohn the Ripper 420\n\nCain and Abel 424\n\nHashcat 425\n\nHydra 428\n\nRainbowCrack 429\n\nMedusa and Nerack 430\n\nCeWL 431\n\nMimikatz 432\n\nPatator 432\n\nCommon Tools for Persistence 433\nCommon Tools for Evasion 434\n\nVeil 434\n\nTor 438\n\nProxychains 439\n\nEncryption 439\n\nEncapsulation and Tunneling Using DNS and Other Protocols Like NTP 440\nExploitation Frameworks 442\n\nMetasploit 442\n\nBeEF 449\n\nCommon Decompilation, Disassembling, and Debugging Tools 450\nThe GNU Project Debugger (GDB) 450\nWindows Debugger 452\n\nOllyDbg 452\n\nedb Debugger 452\n\nImmunity Debugger 454\n\nIDA 454\n\nObjdump 455\n\nCommon Tools for Forensics 457\nCommon Tools for Software Assurance 458\nFindbugs, Findsecbugs, and SonarQube 458\nFuzzers and Fuzz Testing 458\n\nPeach 459",
    "Page_15": "xiv\n\nCompTIA® PenTest+ Cert Guide\n\nChapter 10\n\nMutiny Fuzzing Framework 459\nAmerican Fuzzy Lop 459\nWireless Tools 459\n\nLeveraging Bash, Python, Ruby, and PowerShell in Penetration Testing\nEngagements 460\n\nIntroducing the Bash Shell 460\nA Brief Introduction to Python 461\nA Brief Introduction to Ruby 461\nA Brief Introduction to PowerShell 462\nReview All Key Topics 462\nDefine Key Terms 465\nQ&A 465\nUnderstanding How to Finalize a Penetration Test 471\n“Do I Know This Already?” Quiz 471\nExplaining Post-Engagement Activities 474\nSurveying Report Writing Best Practices 475\nUnderstanding the Importance of a Quality Report 475\nDiscussing Best Practices of Writing a Penetration Testing Report 476\nKnowing Your Audience 476\nAvoiding Cutting and Pasting 477\nRelating the Findings to the Environment 477\nStarting the Report While You Are Testing 478\nExploring Tools for Collecting and Sharing Information 478\nUsing Dradis for Effective Information Sharing and Reporting 478\nSteps in Using the Dradis Framework CE on Kali Linux 479\nExploring the Common Report Elements 490\nPCI Data Security Standard Reporting Guidelines 491\nExpanding on the Common Report Elements 493\nExecutive Summary 493\nMethodology 494\nFinding Metrics and Measurements 494\n\nFindings and Recommendations for Remediation 495",
    "Page_16": "Chapter 11\n\nAppendix A\n\nContents xv\n\nUnderstanding Report Handling and Communications Best Practices 499\nUnderstanding Best Practices in Report Handling 499\nCorrectly Classifying Report Contents 499\nControlling Distribution Method and Media 499\nExplaining the Importance of Appropriate Communication 500\nReview All Key Topics 501\nDefine Key Terms 502\nQ&A 502\nFinal Preparation 505\nTools for Final Preparation 505\nPearson Cert Practice Test Engine and Questions on the Website 505\nAccessing the Pearson Test Prep Software Online 506\nAccessing the Pearson Test Prep Software Offline 506\nCustomizing Your Exams 507\nUpdating Your Exams 508\nPremium Edition 508\nChapter-Ending Review Tools 509\nSuggested Plan for Final Review/Study 509\nSummary 509\n\nAnswers to the “Do | Know This Already?” Quizzes and\nQ&A Sections 511\n\nIndex 541",
    "Page_17": "xvi\n\nCompTIA® PenTest+ Cert Guide\n\nAbout the Authors\n\nOmar Santos is a principal engineer in the Cisco Product Security Incident\nResponse Team (PSIRT) within Cisco’s Security Research and Operations. He\nmentors and leads engineers and incident managers during the investigation and\nresolution of security vulnerabilities in all Cisco products, including cloud services.\nOmar has been working with information technology and cybersecurity since the\nmid-1990s. He has designed, implemented, and supported numerous secure\nnetworks for Fortune 100 and 500 companies and the U.S. government. Prior to\nhis current role, he was a technical leader within the Worldwide Security Practice\nand the Cisco Technical Assistance Center (TAC), where he taught, led, and\nmentored many engineers within both organizations.\n\nOmar is an active member of the security community, where he leads several indus-\ntrywide initiatives and standards bodies. His active role helps businesses, academic\ninstitutions, state and local law enforcement agencies, and other participants that are\ndedicated to increasing the security of the critical infrastructure.\n\nOmar often delivers technical presentations at many cybersecurity conferences. He\nis the author of more than 20 books and video courses. You can follow Omar on any\nof the following:\n\n= Personal website: omarsantos.io and theartofhacking.org\n= Twitter: @santosomar\n\n= LinkedIn: https://www.linkedin.com/in/santosomar\n\nRon Taylor has been in the information security field for almost 20 years, 10 of which\nwere spent in consulting. In 2008, he joined the Cisco Global Certification Team as\nan SME in information assurance. In 2012, he moved into a position with the Security\nResearch & Operations group, where his focus was mostly on penetration testing of\nCisco products and services. He was also involved in developing and presenting secu-\nrity training to internal development and test teams globally. In addition, he provided\nconsulting support to many product teams as an SME on product security testing. He\nthen spent some time as a consulting systems engineer specializing in Cisco’s security\nproduct line. In his current role, he works in the Cisco Product Security Incident\nResponse Team (PSIRT). He has held a number of industry certifications, including\nGPEN, GWEB, GCIA, GCIH, GWAPT, RHCE, CCSP, CCNA, CISSP, and MCSE.\nRon is also a Cisco Security Blackbelt, SANS mentor, cofounder and president of the\nRaleigh BSides Security Conference, and an active member of the Packet Hacking\nVillage team at Defcon.\n\nYou can follow Ron on any of the following:\n= Twitter: @Gu5GOrman\n= LinkedIn: www.linkedin.com/in/-Ron Taylor",
    "Page_18": "Dedication\n\nDedication\n\nI would like to dedicate this book to my lovely wife, Jeannette, and my two beautiful children,\nHannah and Derek, who have inspired and supported me throughout the development of this book.\n\nI also dedicate this book to my father, Jose, and to the memory of my mother, Generosa. Without\ntheir knowledge, wisdom, and guidance, I would not have the goals that I strive to achieve today.\n\n—Omar\n\nThe most important thing in life is family:\n\nTo my wife of 17 years: Kathy, without your support and encouragement, I would not be where\nI am today.\n\nTo my kids, Kaitlyn, Alex, and Grace: You give me the strength and motivation to do what I do.\n\nTo my parents: It was your example that instilled in me the drive and work ethic that has gotten\nme this far.\n\n—Ron\n\nAcknowledgments\n\nThis book is a result of concerted efforts of various individuals whose help brought\nthis book to reality. We would like to thank the technical reviewers, Chris McCoy\nand Ben Taylor, for their significant contributions and expert guidance.\n\nWe would also like to express our gratitude to Chris Cleveland, Kitty Wilson,\nMandie Frank, Paul Carlstroem, and Brett Bartow for their help and continuous\nsupport throughout the development of this book.\n\nAbout the Technical Reviewers\n\nChris McCoy is a technical leader in the Cisco Advanced Security Initiatives\nGroup (ASIG). He has more than 20 years of experience in the networking and\nsecurity industry. He has a passion for computer security, finding flaws in mission-\ncritical systems, and designing mitigations to thwart motivated and resourceful adver-\nsaries. He was formerly with Spirent Communications and the U.S. Air Force. Chris\nis CCIE certified in the Routing & Switching and Service Provider tracks, which he\nhas held for more than 10 years. You can follow Chris on Twitter@chris_mccoy.\n\nBenjamin Taylor is a security researcher currently working in the Cisco Security and\nTrust Organization. He has worked in the security industry for more than 10 years.\nHis work spans numerous architectures and operating systems. His background and\nexperience include security evaluations, penetration testing, security architecture\nreviews, product security compliance, digital forensics, and reverse engineering.",
    "Page_19": "xviii CompTIA® PenTest+ Cert Guide\n\nWe Want to Hear from You!\n\nAs the reader of this book, you are our most important critic and commentator.\n\nWe value your opinion and want to know what we’re doing right, what we could\ndo better, what areas you'd like to see us publish in, and any other words of wisdom\nyou're willing to pass our way.\n\nWe welcome your comments. You can email to let us know what you did or didn’t\nlike about this book—as well as what we can do to make our books better.\n\nPlease note that we cannot help you with technical problems related to the topic of this book.\n\nWhen you write, please be sure to include this book’s title and author as well as your\nname and email address. We will carefully review your comments and share them\nwith the author and editors who worked on the book.",
    "Page_20": "Credits\n\nCover: GlebSStock/Shutterstock\n\nNIST Computer Security Resource Center defines the term Hacker\n\nSun Tzu, The Art of War\nHigh Level Organization of the Standard by The Penetration Testing Execution\n\nStandard\n\nPCI Security Standard council, Information Supplement: Penetration Testing\n\nGuidance\n\nPenetration Testing Framework 0.59 by VulnerabilityAssessment.co.uk\n\nCredits\n\nOpen Source Security Testing Methodology Manual (OSSTMM), Contemporary\nSecurity testing and analysis\nGLBA (12 U.S.C. § 1843(k))\nNY DFS Cybersecurity Regulation\n\nCovered Entities and Business Associates, The HIPAA Rules apply to covered\n\nentities and business associates.\n\nPayment Card Industry (PCI) Data Security Standard (DSS) and\nPayment Application Data Security Standard (PA-DSS), April 2016.\n\nElaine Barker, NIST Special Publication 800-57 Part 1 Revision 4\nRecommendation for Key Management Part 1: General, January 2016.\n\nFigure Credits\n\nFigure 2-1\n\nFigure 3-2\n\nFigure 3-4\n\nFigure 3-6\n\nFigure 3-8\n\nFigure 3-10\nFigure 3-12\nFigure 3-13\nFigure 3-14\nFigure 3-15\nFigure 3-16\nFigure 3-17\nFigure 3-18\nFigure 3-19\nFigure 3-20\nFigure 3-21\nFigure 3-22\n\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\n\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\n\n \n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Gantt Chart © 2018 Microsoft Corporation\n\nxix",
    "Page_21": "CompTIA® PenTest+ Cert Guide\n\nFigure 3-23 Screenshot of Google © 2018 Google, LLC.\n\nFigure 3-24 Screenshot of DNSdumpster © 2018 Hacker Target Pty Ltd\nFigure 3-25 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-26 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-27 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-28 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-29 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-30 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-31 Screenshot of Shodan © 2013-2018 Shodan®\nFigure 3-32 Screenshot of Shodan © 2013-2018 Shodan®\nFigure 3-33 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-34 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-35 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-36 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 3-37 Screenshot o i Linux © 2018 Kali Linux\nFigure 3-38 Screenshot o i Linux © 2018 Kali Linux\nFigure 3-39 Omar Santos\nFigure 3-41 Screenshot o\nFigure 4-3 Screenshot o\nFigure 4-4 — Screenshot o\nFigure 4-5 — Screenshot o\nFigure 4-6 — Screenshot o\nFigure 4-7 Screenshot o\nFigure 4-8 — Screenshot of\nFigure 4-9 — Screenshot of\nFigure 4-10 Screenshot of\nFigure 4-11 Screenshot of\nFigure 5-15 Screenshot of\nFigure 5-18 Screenshot of\nFigure 5-19 Screenshot of\nFigure 5-20 Screenshot of\nFigure 5-23 Screenshot of\nFigure 5-24 Screenshot of\nFigure 5-25 Screenshot of Kali Linux © 2018 Kali Linux\n\nFigure 5-26 Screenshot of Kali Linux © 2018 Kali Linux\n\nFigure 6-3 Screenshot of Wireshark © The Wireshark team\nFigure 6-4 — Screenshot of Wireshark © The Wireshark team\nFigure 6-7 — Screenshot of WebGoat © OWASP\n\nFigure 6-9 — Screenshot of W3school © 1999-2018 by Refsnes Data\nFigure 6-11 Screenshot of WebGoat © OWASP\n\nFigure 6-12 Screenshot of WebGoat © OWASP\n\nFigure 6-13 Screenshot of WebGoat © OWASP\n\nFigure 6-14 Screenshot of DVWA © 2014-2017 Dewhurst Security\n\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\n\n \n\n \n\n \n\nZERRRE RRR AERA A EER BARR ES",
    "Page_22": "Figure 6-16\nFigure 6-18\nFigure 6-21\nFigure 6-22\nFigure 6-23\nFigure 6-24\nFigure 6-25\nFigure 7-5\nFigure 7-6\nFigure 7-7\nFigure 7-9\n\nFigure 7-13\nFigure 7-14\nFigure 7-15\nFigure 8-4\nFigure 8-6\nFigure 9-1\nFigure 9-2\nFigure 9-3\nFigure 9-4\nFigure 9-5\nFigure 9-6\nFigure 9-7\nFigure 9-8\nFigure 9-9\nFigure 9-10\nFigure 9-11\nFigure 9-12\nFigure 9-13\n\nFigure 9-14\nFigure 9-15\nFigure 9-16\nFigure 9-17\n\nFigure 9-18\nFigure 9-19\nFigure 9-20\nFigure 9-21\nFigure 9-22\nFigure 9-23\n\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\n\nCredits xxi\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of Wireshark © The Wireshark team\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of DVWA © 2014-2017 Dewhurst Security\n\nhot of Unix Permission Calculator © 2017 Dan’s Tools\nhot of Unix Permission Calculator © 2017 Dan’s Tools\nhot of Visudo Command Man Page © Visudo\n\nhot of Microsoft Excel © 2018 Microsoft Corporation\n\nMobile Top 10 2016-Top 10 by OWASP\n\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\n\nhot of Android Studio © Google, LLC.\n\nhot of Android Studio © Google, LLC.\n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Parrot Linux © 2013-2018 Lorenzo Faletra\n\nhot of BlackArch Linux © 2013-2018 BlackArch Linux\nhot of BlackArch Linux © 2013-2018 BlackArch Linux\nhot of Caine © Caine\n\nhot of Security Onion © Security Onion Solutions, LLC\nhot of Shodan © 2013-2018 Shodan®\n\nhot of Maltego © Paterva\n\nhot of Maltego © Paterva\n\nhot of Kali Linux © 2018 Kali Linux\n\nhot of Censys © 2018 Censys\n\nhot of Zenmap © Nmap\n\nhot of Zenmap © Nmap\n\nCategory: Vulnerability Scanning Tools by OWASP\n\nScreens\nScreens\nScreens\nScreens\n\nhot of Greenbone © 2017 Greenbone Networks\nhot of Greenbone © 2017 Greenbone Networks\nhot of Greenbone © 2017 Greenbone Networks\nhot of Greenbone © 2017 Greenbone Networks\n\nOWASP Zed Attack Proxy Project by OWASP\n\nScreens\nScreens\nScreens\nScreens\nScreens\nScreens\n\nhot of OWASP ZAP © OWASP\nhot of OWASP ZAP © OWASP\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux\nhot of Kali Linux © 2018 Kali Linux",
    "Page_23": "xxii CompTIA® PenTest+ Cert Guide\n\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\nart of hacking © 2018 Omar Santos\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\ni Linux © 2018 Kali Linux\n\nFigure 9-24 Screenshot of\nFigure 9-25 Screenshot of\nFigure 9-26 Screenshot of\nFigure 9-27 Screenshot of\nFigure 9-28 Screenshot of\nFigure 9-29 Screenshot of\nFigure 9-30 Screenshot of\nFigure 9-31 Screenshot of\nFigure 9-32 Screenshot of\nFigure 9-33 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 9-34 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 9-35 Screenshot of BeEF Exploitation Framework © Beef\nFigure 9-36 Screenshot of OllyDbg © 2000-2014 Oleh Yuschuk\nFigure 9-37 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 9-38 Screenshot of IDA © 2017 Hex-Rays SA.\nFigure 9-39 Screenshot of IDA © 2017 Hex-Rays SA.\nFigure 10-1 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 10-2 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-3 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-4 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-5 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-6 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-7 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-8 Screenshot of Kali Linux © 2018 Kali Linux\nFigure 10-9 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-10 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-11 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-12 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-13 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-14 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-15 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-16 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-17 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-18 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-19 Screenshot of Dradis © 2012-2018 Dradis Framework\nFigure 10-21 Screenshot of SQLMap © 2006-2018 by Bernardo Damele\nAssumpcao Guimaraes\nFigure 10-22 Screenshot of SQLMap © 2006-2018 by Bernardo Damele\nAssumpcao Guimaraes ISO 31000\nChapter Opener images: Charlie Edwards/Gettyimages\n\nDORR RO ORE RE",
    "Page_24": "Introduction\n\nIntroduction\n\nCompTIA PenTest+ is a security penetration testing certification that focuses on\nperformance-based and multiple-choice questions, as well as simulations that require\na candidate to demonstrate the hands-on ability to complete a penetration testing\nengagement. PenTest+ candidates must demonstrate their skills in planning and\nscoping a penetration testing engagement. Candidates are also required to know how\nto mitigate security weaknesses and vulnerabilities, as well as how to exploit them.\n\nCompTIA PenTest+ is an intermediate-level cybersecurity career certification. His-\ntorically, the only intermediate-level cybersecurity certification was the CompTIA\nCybersecurity Analyst (CySA+). Today, PenTest+ provides an alternate path from\nthose who want to specialize in security penetration testing (ethical hacking).\n\nCompTIA PenTest+ and CySA+ can be taken in any order. Either exam typically\nfollows the skills learned in Security+. The main difference between CySA+ and\nPenTest+ is that CySA+ focuses on defensive security (including incident detection\nand response), whereas PenTest+ focuses on offensive security (ethical hacking or\npenetration testing).\n\nNOTE CompTIA PenTest+ is a globally recognized certification that demonstrates\nthe holder’s knowledge and skills across a broad range of security topics.\n\nThe Goals of the CompTIA PenTest+ Certification\n\nThe CompTIA PenTest+ certification was created and is managed by one of the most\nprestigious organizations in the world and has a number of stated goals. Although not\ncritical for passing the exam, having knowledge of the organization and of these goals\nis helpful in understanding the motivation behind the creation of the exam.\n\nSponsoring Bodies\n\nThe Computing Technology Industry Association (CompTIA) is a vendor-neutral\nIT certification body that is recognized worldwide. CompTIA has been in existence\nfor more than 20 years. It develops certificate programs for IT support, networking,\nsecurity, Linux, cloud, and mobility. CompTIA is a nonprofit trade association.\n\nPenTest+ is one of a number of security-related certifications offered by CompTIA.\nOther certifications offered by this organization include the following:\n\n= CompTIA Security+\n= CompTIA Cybersecurity Analyst (CySA+)\n= CompTIA Advanced Security Practitioner (CASP)\n\nxxii",
    "Page_25": "xxiv CompTIA® PenTest+ Cert Guide\n\nCompTIA offers certifications in other focus areas, including the following:\n\nCompTIA IT Fundamentals\nCompTIA A+\n\nCompTIA Network+\nCompTIA Cloud Essentials\nCompTIA Cloud+\nCompTIA Linux+\nCompTIA Server+\nCompTIA Project+\nCompTIA CT T+\n\nStated Goals\n\nThe goal of CompTIA in its administration of the PenTest+ certification is to pro-\nvide a reliable instrument to measure an individual’s knowledge of cybersecurity\npenetration testing (ethical hacking). This knowledge is not limited to technical\nskills alone but extends to all aspects of a successful penetration testing engagement.\n\nThe Exam Objectives (Domains)\n\nThe CompTIA Pen Test+ exam is broken down into five major domains. This book\ncovers all the domains and the subtopics included in them. The following table lists\nthe breakdown of the domains represented in the exam:\n\n \n\n \n\n \n\n \n\n \n\nDomain Percentage of\nRepresentation in Exam\n\n1.0 Planning and Scoping 15%\n\n2.0 Information Gathering and Vulnerability Identification 22%\n\n3.0 Attacks and Exploits 30%\n\n4.0 Penetration Testing Tools 17%\n\n5.0 Reporting and Communication 16%\n\n \n\nTotal 100%\n\n \n\n1.0 Planning and Scoping\n\nThe Planning and Scoping domain, which is covered in Chapter 2, discusses the\nimportance of good planning and scoping in a penetration testing or ethical hacking",
    "Page_26": "Introduction XXV\n\nengagement. Comprising 15% of the exam, it covers several key legal concepts and\nthe different aspects of compliance-based assessment. It Covers topics including the\nfollowing:\n\n= Explain the importance of planning for an engagement.\n= Explain key legal concepts.\n= Explain the importance of scoping an engagement properly.\n\n= Explain the key aspects of compliance-based assessments.\n\n2.0 Information Gathering and Vulnerability Identification\n\nThe Information Gathering and Vulnerability Identification domain, which is cov-\nered in Chapter 3, starts out by discussing in general what reconnaissance is and\n\nthe difference between passive and active reconnaissance methods. It touches on\nsome of the common tools and techniques used. From there it covers the process of\nvulnerability scanning and how vulnerability scanning tools work, including how to\nanalyze vulnerability scanning results to provide useful deliverables and the process\nof leveraging the gathered information in the exploitation phase. Finally, it discusses\nsome of the common challenges to consider when performing vulnerability scans.\nThis domain accounts for 22% of the exam. Topics include the following:\n\n= Given a scenario, conduct information gathering using appropriate techniques.\n= Given a scenario, perform a vulnerability scan.\n\n= Given a scenario, analyze vulnerability scan results.\n\nExplain the process of leveraging information to prepare for exploitation.\n\nExplain weaknesses related to specialized systems.\n\n3.0 Attacks and Exploits\n\nThe Attacks and Exploits domain is covered throughout Chapters 4 through 8.\nThese chapters include topics such as social engineering attacks, exploitation of\nwired and wireless networks, application-based vulnerabilities, local host and physi-\ncal security vulnerabilities, and post-exploitation techniques. It encompasses 30% of\nthe exam. Topics include the following:\n\n= Compare and contrast social engineering attacks.\n= Given a scenario, exploit network-based vulnerabilities.\n= Given a scenario, exploit wireless and RF-based vulnerabilities.\n\n= Given a scenario, exploit application-based vulnerabilities.",
    "Page_27": "xxvi CompTIA® PenTest+ Cert Guide\n\n= Given a scenario, exploit local host vulnerabilities.\n= Summarize physical security attacks related to facilities.\n\n= Given a scenario, perform post-exploitation techniques.\n\n4.0 Penetration Testing Tools\n\nThe Penetration Testing Tools domain is covered in Chapter 9. In this chapter, you\nwill learn different use cases for penetration testing tools. You will also learn how to\nanalyze the output of some of the most popular penetration testing tools to make\ninformed assessments. At the end of the chapter, you will learn how to leverage the\nbash shell, Python, Ruby, and PowerShell to perform basic scripting. This domain\naccounts for 17% of the exam. The topics include the following:\n\n= Given a scenario, use Nmap to conduct information gathering exercises.\n= Compare and contrast various use cases of tools.\n= Given a scenario, analyze tool output or data related to a penetration test.\n\n= Given a scenario, analyze a basic script (limited to bash, Python, Ruby, and\nPowerShell).\n\n5.0 Reporting and Communication\n\nThe Reporting and Communication domain is covered in Chapter 10, which starts\nout by discussing post-engagement activities, such as cleanup of any tools or shells\nleft on systems that were part of the test. From there it covers report writing best\npractices, including the common report elements as well as findings and recommen-\ndations. Finally, it touches on report handling and proper communication best prac-\ntices. This domain makes up 16% of the exam. Topics include the following:\n\n= Given a scenario, use report writing and handling best practices.\n= Explain post-report delivery activities.\n\n= Given a scenario, recommend mitigation strategies for discovered\nvulnerabilities.\n\n= Explain the importance of communication during the penetration testing\nprocess.\n\nSteps to Earning the PenTest+ Certification\n\nTo earn the PenTest+ certification, a test candidate must meet certain prerequisites\nand follow specific procedures. Test candidates must qualify for and sign up for\nthe exam.",
    "Page_28": "Introduction XXxVvii\n\nRecommended Experience\n\nThere are no prerequisites for the PenTest+ certification. However, CompTIA\nrecommends that candidates possess Network+, Security+, or equivalent knowledge.\n\nNOTE Certifications such as Cisco CCNA CyberOps can help candidates and can\nbe used as an alternative to Security+.\n\nCompTIA also recommends a minimum of three to four years of hands-on\ninformation security or related experience.\n\nSigning Up for the Exam\nThe steps required to sign up for the PenTest+ exam are as follows:\n1. Create a Pearson Vue account at pearsonvue.com and schedule your exam.\n\n2. Complete the examination agreement, attesting to the truth of your assertions\nregarding professional experience and legally committing to the adherence to\nthe testing policies.\n\n3. Review the candidate background questions.\n\n4. Submit the examination fee.\n\nThe following website presents the CompTIA certification exam policies:\nhttps://certification.comptia.org/testing/test-policies.\n\nFacts About the PenTest+ Exam\n\nThe PenTest+ exam is a computer-based test that focuses on performance-based and\nmultiple-choice questions. There are no formal breaks, but you are allowed to bring\na snack and eat it at the back of the test room; however, any time used for breaks\ncounts toward 165 minutes allowed for the test. You must bring a government-\nissued identification card. No other forms of ID will be accepted. You may be\nrequired to submit to a palm vein scan.",
    "Page_29": "xxviii CompTIA® PenTest+ Cert Guide\n\nAbout the CompTIA® PenTest+ Cert Guide\n\nThis book maps to the topic areas of the CompTIA® PenTest+ exam and uses a\nnumber of features to help you understand the topics and prepare for the exam.\n\nObjectives and Methods\n\nThis book uses several key methodologies to help you discover the exam topics on\nwhich you need more review, to help you fully understand and remember those\ndetails, and to help you prove to yourself that you have retained your knowledge\nof those topics. This book does not try to help you pass the exam only by memo-\nrization; it seeks to help you truly learn and understand the topics. This book is\ndesigned to help you pass the PenTest+ exam by using the following methods:\n\n= Helping you discover which exam topics you have not mastered\n= Providing explanations and information to fill in your knowledge gaps\n\n= Supplying exercises that enhance your ability to recall and deduce the answers\nto test questions\n\n= Providing practice exercises on the topics and the testing process via test\nquestions on the companion website",
    "Page_30": "Introduction XXxi\n\nCustomizing Your Exams\nIn the exam settings screen, you can choose to take exams in one of three modes:\n\n= Study mode: Allows you to fully customize your exams and review answers\nas you are taking the exam. This is typically the mode you would use first to\nassess your knowledge and identify information gaps.\n\n= Practice Exam mode: Locks certain customization options, as it is presenting\na realistic exam experience. Use this mode when you are preparing to test your\nexam readiness.\n\n= Flash Card mode: Strips out the answers and presents you with only the\nquestion stem. This mode is great for late-stage preparation, when you really\nwant to challenge yourself to provide answers without the benefit of see-\ning multiple-choice options. This mode does not provide the detailed score\nreports that the other two modes do, so it will not be as helpful as the other\nmodes at helping you identify knowledge gaps.",
    "Page_31": "XXxii\n\nCompTIA® PenTest+ Cert Guide\n\nIn addition to choosing among these three modes, you will be able to select the\nsource of your questions. You can choose to take exams that cover all the chapters, or\nyou can narrow your selection to just a single chapter or the chapters that make up\nspecific parts in the book. All chapters are selected by default. If you want to narrow\nyour focus to individual chapters, simply deselect all the chapters and then select\nonly those on which you wish to focus in the Objectives area.\n\nYou can also select the exam banks on which to focus. Each exam bank comes\ncomplete with a full exam of questions that cover topics in every chapter. The two\nexams printed in the book are available to you, as are two additional exams of unique\nquestions. You can have the test engine serve up exams from all four banks or just\nfrom one individual bank by selecting the desired banks in the exam bank area.\n\nThere are several other customizations you can make to your exam from the exam\nsettings screen, such as the time of the exam, the number of questions served up,\nwhether to randomize questions and answers, whether to show the number of cor-\nrect answers for multiple-answer questions, and whether to serve up only specific\ntypes of questions. You can also create custom test banks by selecting only questions\nthat you have marked or questions on which you have added notes.\n\nUpdating Your Exams\n\nIf you are using the online version of the Pearson Test Prep software, you should\nalways have access to the latest version of the software as well as the exam data. If\nyou are using the Windows desktop version, every time you launch the software\nwhile connected to the Internet, it checks whether there are any updates to your\nexam data and automatically downloads any changes made since the last time you\nused the software.\n\nSometimes, due to many factors, the exam data may not fully download when you\nactivate your exam. If you find that figures or exhibits are missing, you may need to\nmanually update your exams. To update a particular exam you have already activated\nand downloaded, simply click the Tools tab and click the Update Products button.\nAgain, this is only an issue with the desktop Windows application.\n\nIf you wish to check for updates to the Pearson Test Prep exam engine software,\nWindows desktop version, simply click the Tools tab and click the Update\nApplication button. By doing so, you ensure that you are running the latest version\nof the software engine.",
    "Page_32": "This page intentionally left blank",
    "Page_33": "CHAPTER 7\n\nExploiting Local Host\nand Physical Security\nVulnerabilities\n\nIn this chapter you will learn about exploiting local host vulnerabilities, as well\nas physical security flaws. This chapter provides details on how to take advan-\ntage of insecure services and protocol configurations during a penetration test-\ning engagement. You will also learn how to perform local privilege escalation\nattacks as part of penetration testing. This chapter provides details to help you\ngain an understanding of Set-UID, Set-GID, and Unix programs, as well as\nret2libe attacks. This chapter also covers privilege escalation attacks against\nWindows systems and the security flaws of Android and Apple iOS mobile\ndevices. In this chapter you will also gain an understanding of physical security\nattacks such as piggybacking, tailgating, fence jumping, dumpster diving, lock\npicking, and badge cloning.\n\n“Do I Know This Already?” Quiz\n\nThe “Do I Know This Already?” quiz allows you to assess whether you should\nread this entire chapter thoroughly or jump to the “Exam Preparation Tasks”\nsection. If you are in doubt about your answers to these questions or your own\nassessment of your knowledge of the topics, read the entire chapter. Table 7-1\nlists the major headings in this chapter and their corresponding “Do I Know\nThis Already?” quiz questions. You can find the answers in Appendix A,\n“Answers to the ‘Do I Know This Already?’ Quizzes and Q&A Sections.”\n\nTable 7-1 “Do | Know This Already?” Section-to-Question Mapping\n\nFoundation Topics Section Questions\n\n \n\nExploiting Local Host Vulnerabilities 1-8\n\n \n\nUnderstanding Physical Security Attacks 9-10",
    "Page_34": "278\n\nCompTIA® PenTest+ Cert Guide\n\nCAUTION The goal of self-assessment is to gauge your mastery of the topics in\nthis chapter. If you do not know the answer to a question or are only partially sure\nof the answer, you should mark that question as incorrect for purposes of the self-\nassessment. Giving yourself credit for an answer you correctly guess skews your self-\nassessment results and might provide you with a false sense of security.\n\n1. Which of the following is not an insecure service or protocol?\na. Cisco Smart Install\nb. Telnet\nc. Finger\n\nd. Windows PowerSploit\n\n2. Consider the following example:\n\nomar@ares:~$ ls -1 topsecret.txt\n-rwxrwxr-- 1 omar omar 15 May 26 21:15 topsecret.txt\n\nWhat permissions does the user omar have in the topsecret.txt file?\na. Read only\nb. Write only\nc. Read, write, execute\n\nd. Write, execute\n\n3. Which of the following is not true about sticky bits?\n\na. A restricted deletion flag, or sticky bit, is a single bit whose interpreta-\ntion depends on the file type.\n\nb. For directories, the sticky bit prevents unprivileged users from removing\nor renaming a file in the directory unless they own the file or the direc-\ntory; this is called the restricted deletion flag for the directory, and is\ncommonly found on world-writable directories such as /tmp.\n\nc. If the sticky bit is set on a directory, files inside the directory cannot be\nrenamed or removed by the owner of the file, the owner of the directory,\nor the superuser (even though the modes of the directory might allow\nsuch an operation).\n\nd. For regular files on some older systems, the sticky bit saves the program’s\ntext image on the swap device so it will load more quickly when run.",
    "Page_35": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 279\n\n4. Which of the following is a type of attack in which a subroutine return\naddress on a call stack is replaced by an address of a subroutine that is already\npresent in the executable memory of the process?\n\na. Ret2libc\n\nb. ASLR bypass\n\n. CPassword\n\n. Sticky-bit attack\n\n9°\n\nQa\n\n5. Which of the following is a component of Active Directory’s Group\nPolicy Preferences that allows administrators to set passwords via Group\nPolicy?\n\na. Ret2libc\n\nb. CPassword\nce. Sticky-bit\nd. GPO crack\n\n6. Which of the following tools allows an attacker to dump the LSASS\nprocess from memory to disk?\n\n. John the Ripper\n. SAMsploit\n\ns,s\n\n9°\n\n. Sysinternals ProcDump\nd. Windows PowerShell\n\n7. The SELinux and AppArmor security frameworks include enforcement\nrules that attempt to prevent which of the following attacks?\n\n. Lateral movement\n\na\nb. Sandbox escape\n\n9°\n\n. Cross-site request forgery (CSRF)\n\nQa\n\n. Cross-site scripting (XSS)",
    "Page_36": "280\n\nCompTIA® PenTest+ Cert Guide\n\n8.\n\n10.\n\nWhich of the following is not one of the top mobile security threats and\nvulnerabilities?\n\na. Cross-site request forgery (CSRF)\nb. Insecure data storage\n\n. Insecure communication\n\n°o\n\na\n\n. Insecure authentication\n\nWhich of the following is an attack in which the attacker tries to\nretrieve encryption keys from a running operating system after using a\nsystem reload?\n\na. Hot-boot\nb. Rowhammer\n. Cold boot\n. ASLR bypass\n\n°o\n\na\n\nWhich of the following is the term for an unauthorized individual\nfollowing an authorized individual to enter a restricted building or\nfacility?\n\n. Lockpicking\n\na\nb. Dumpster diving\n\n°o\n\n. Badge cloning\n\na\n\n. Tailgating",
    "Page_37": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 281\n\nFoundation Topics\n\nExploiting Local Host Vulnerabilities\n\nThreat actors take advantage of numerous local host vulnerabilities to carry out dif-\nferent attacks. In this section, you will learn about exploits against local host vulner-\nabilities such as taking advantage of specific operating system flaws, escalating local\nprivileges, stealing credentials, installing key loggers, and abusing physical device\nsecurity. You will also learn about different virtual machine and container vulner-\nabilities, and you will learn about cold boot attacks, JTAG debugging, and different\nattacks that can be carried out over the serial console of a device.\n\nInsecure Service and Protocol Configurations ce\nTopic\n\nMany attacks materialize because unused or insecure protocols, services, and asso-\nciated ports, which are low-hanging fruit opportunities for attackers. In addition,\nmany organizations don’t patch vulnerabilities for the services, protocols, and ports\nthey don’t use—despite the fact that vulnerabilities may still be present for months\nor even years.\n\nTIP A best practice is to clearly define and document the services, protocols, and\nports that are necessary for business. An organization should ensure that all other ser-\nvices, protocols, and ports are disabled or removed. As a penetration tester, you should\nalways go after insecure protocols, services, and associated ports.\n\nSome protocols should never be used, such as Telnet and Cisco Smart Install. Telnet\nis a clear-text protocol that exposes the entire contents of any session to anyone who\ncan gain access to the traffic. Secure Shell (SSH) should be used instead. If a switch\nis running the Cisco Smart Install protocol, any unauthenticated attacker can modify\nthe configuration and fully compromise the switch.\n\nNOTE You can obtain more information about Smart Install and related features\nfrom the following Cisco security advisory: https://tools.cisco.com/security/center/\ncontent/CiscoSecurityAdvisory/cisco-sa-20180409-smi.\n\nOther protocols, like Telnet, transfer sensitive data in clear text. Examples of these\nclear-text protocols include SNMP (versions 1 and 2), HTTP, syslog, IMAP, POP3,\nand FTP.",
    "Page_38": "CompTIA® PenTest+ Cert Guide\n\nTIP Insome cases, there is no secure alternative to otherwise insecure management\nprotocols. In such a case, it is very important to understand what is at risk and what\nmitigation techniques could be implemented.\n\nAll insecure protocols are subject to man-in-the-middle (MITM) attacks or to IP\ntraffic capture (sniffing). Example 7-1 shows how easy it is to capture a password\nfrom an FTP transaction by just sniffing the traffic using the Linux Tepdump tool.\n\nExample 7-1 Capturing Passwords and Sniffing Traffic from Clear-Text Protocols by\nUsing Tcpdump\n\n \n\nroot@kubel:~# tcpdump -nnXSs 0 host 10.1.1.12\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\n\nlistening on ens160, link-type EN10MB (Ethernet), capture size 262144\nbytes\n\n22:50:23.958387 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [S], seq\n314242458, win 29200, options [mss 1460,sackOK,TS val 1523378506 ecr\n0,nop,wscale 7], length 0\n\n0x0000: 4500 003c 1cdO0 4000 4006 07d4 0a01 010c E.\n0x0010: Oa01 010b c664 0015 12ba £59a 0000 0000\n0x0020: a002 7210 acfl 0000 0204 05b4 0402 080A ..Vr..... ee ee eeee\n0x0030: Sacc e94a 0000 0000 0103 0307 LeiJevveceee\n\n22:50:23.958455 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [S.], seq\n4230935771, ack 314242459, win 28960, options [mss 1460,sackOK,TS val\n1523511322 ecr 1523378506,nop,wscale 7], length 0\n\n0x0000: 4500 003c 0000 4000 4006 24a4 0a01 010b E..<..@.@.$.....\n\n \n    \n\n0x0010: Oa01 010c 0015 c664 fc2e f4db 12ba £59b ....... d...eeeee\n\n0x0020: a012 7120 1647 0000 0204 05b4 0402 080a_ ..q..G..........\n\n0x0030: Sace £0la Sacc e94a 0103 0307 Z...Z..d..0.\n22:50:23.958524 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.], ack\n\n4230935772, win 229, options [nop,nop,TS val 1523378506 ecr 1523511322],\nlength 0\n\n0x0000: 4500 0034 1cdl 4000 4006 O7db Oa0l 010c E..4..@.@.......\n\n0x0010: 0a01 010b c664 0015 12ba £59b fc2e f4dce ..... Ge.ee cess\n0x0020: 8010 00e5 10e4 0000 0101 080a Sacc e94a ............ Z..0\n0x0030: Sace f0la Lees\n\n22:50:23.961422 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq\n4230935772: 4230935792, ack 314242459, win 227, options [nop,nop,TS val\n1523511323 ecr 1523378506], length 20: FTP: 220 (vsFTPd 3.0.3\n\n0x0000: 4500 0048 04c6 4000 4006 1fd2 Oa01l 010b E..H..@.@.......\n0x0010: Oa01 010c 0015 c664 fc2e f4dc 12ba £59b  ....... d...eeeee\n0x0020: 8018 00e3 1653 0000 0101 080a S5ace f01b ..... Seeeeee Lees\n0x0030: Sacc e94a 3232 3020 2876 7346 5450 6420 Z..J220. (vsFTPd.\n0x0040: 332e 302e 3329 Od0a 3.0.3)..",
    "Page_39": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\n22:50:23.961485 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.], ack\n4230935792, win 229, options [nop,nop,TS val 1523378507 ecr 1523511323],\nlength 0\n\n   \n\n0x0000: 4510 0034 1cd2 4000 4006 O7ca Oa0l 010c E. -@.@\n0x0010: Oa0l 010b c664 0015 12ba £59b fc2e £4f0 ..... dives e eee\n0x0020: 8010 00e5 10ce 0000 0101 080a S5acc e94b ....... eee Z..K\n0x0030: Sace £01b Zee\n\n22:50:26.027005 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.], seq\n314242459:314242470, ack 4230935792, win 229, options [nop,nop,TS val\n1523379024 ecr 1523511323], length 11: FTP: USER omar\n\n0x0000: 4510 003£ 1cd3 4000 4006 O7be Oa0l 010c E..?..@.@.......\n\n0x0010: 0Oa01 010b c664 0015 12ba £59b fc2e fF4f0 ..... Geese ee eens\n\n0x0020: 8018 00e5 6a32 0000 0101 080a S5acc eb50 ....52...... Z..P\n\n0x0030: Sace f£01b 5553 4552 206f 6d61 720d Oa Z...USER.omar..\n22:50:26.027045 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [.], ack\n\n314242470, win 227, options [nop,nop,TS val 1523511839 ecr 1523379024]\nlength 0\n\n0x0000: 4500 0034 04c7 4000 4006 1fe5 0a01 010b E..4..@.@.......\n\n0x0010: Oa0l 010c 0015 c664 fc2e f£4f0 12ba f5a6 ....... de... eeee\n0x0020: 8010 00e3 163f 0000 0101 080a S5ace £21f ..... Paceaee 2...\n0x0030: Sacc eb50 Z..P\n\n22:50:26.027343 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq\n4230935792:4230935826, ack 314242470, win 227, options [nop,nop,TS val\n1523511839 ecr 1523379024], length 34: FTP: 331 Please specify the\npassword.\n\n0x0000: 4500 0056 04c8 4000 4006 1fc2 Oa0l 010b E..V..@.@.......\n0x0010: Oa0l 010c 0015 c664 fc2e f£4f0 12ba f5a6 ....... de... eeee\n0x0020: 8018 00e3 1661 0000 0101 080a S5ace £21f ..... Aree eee 2...\n0x0030: Sacc eb50 3333 3120 506c 6561 7365 2073 Z..P331.Please.s\n0x0040: 7065 6369 6679 2074 6865 2070 6173 7377 pecify.the.\n0x0050: 6£72 642e Od0a password...\n\n22:50:26.027393 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.], ack\n4230935826, win 229, options [nop,nop,TS val 1523379024 ecr 1523511839],\nlength 0\n\n0x0000: 4510 0034 1cd4 4000 4006 07c8 Oa01 010c E..4..@.@.......\n\n0x0010: Oa0l 010b c664 0015 12ba f5a6 fc2e £512 ..... dives e eee\n0x0020: 8010 00e5 O0c98 0000 0101 080a S5acc eb50 ............ 2..P\n0x0030: Sace £21f Zee\n\n22:50:30.053380 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.], seq\n314242470:314242485, ack 4230935826, win 229, options [nop,nop,TS val\n1523380030 ecr 1523511839], length 15: FTP: PASS badpass1\n\n0x0000: 4510 0043 1cd5 4000 4006 07b8 Oa01 010c E..C..@.@.......\n0x0010: 0Oa01 010b c664 0015 12ba f5a6 fc2e £512 ..... Geese ee eens\n0x0020: 8018 O00e5 c455 0000 0101 080a S5acc ef3e ..... U...eee Z..>\n0x0030: Sace £21f 5041 5353 2062 6164 7061 7373 Z...PASS.badpass\n0x0040: 310d 0a sere\n\n \n\n283",
    "Page_40": "284\n\nCompTIA® PenTest+ Cert Guide\n\n22:50:30.085058 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq\n4230935826:4230935849, ack 314242485, win 227, options [nop,nop,TS val\n1523512854 ecr 1523380030], length 23: FTP: 230 Login successful.\n\n0x0000: 4500 004b 04c9 4000 4006 1fcc 0a01 010b E..K..@.@.......\n0x0010: Oa01 010c 0015 c664 fc2e £512 12ba £5b5\n0x0020: 8018 00e3 1656 0000 0101 080a Sace £616 os\n0x0030: Sacc ef3e 3233 3020 4c6f 6769 6e20 7375 Z..>230.Login.\n0x0040: 6363 6573 7366 756c 2e0d Oa successful...\n\n \n\n \n\nIn Example 7-1 a host at IP address 10.1.1.12 initiates an FTP connection to an\nFTP server with IP address 10.1.1.11. In the packet capture, you can see the initial\nlogin transaction where the user (omar) successfully logs in using the password (bad-\npass1), as demonstrated in the highlighted lines in Example 7-1. It is possible to use\nsimilar utilities, such as Tshark, to capture data from a live network (see https://\nwww.wireshark.org/docs/man-pages/tshark.html).\n\nThe following are also some of the services that are considered insecure:\n\n= Rlogin: https://linux.die.net/man/1/rlogin\n\n= Rsh: https://linux.die.net/man/1/rsh\n\n= Finger: https://linux.die.net/man/1/finger\nThe following services should be carefully implemented and not exposed to\nuntrusted networks:\n\n= Authd (or Identd): https://linux.die.net/man/3/ident\n\n= Netdump: https://linux.die.net/man/8/netdump\n\n= Netdump-server: https://linux.die.net/man/8/netdump-server\n\nNfs: https://linux.die.net/man/5/nfs\n\nRwhod: https://linux.die.net/man/8/rwhod\n\nSendmail: https://linux.die.net/man/8/sendmail.sendmail\n\nSamba: https://linux.die.net/man/7/samba\n\nYppasswdd: https://linux.die.net/man/8/yppasswdd\n\nYpserv: https://linux.die.net/man/8/ypserv\n\nYpxfrd: https://linux.die.net/man/8/ypxfrd\n\nTIP RedHat provides a great resource that goes over Linux server security; see\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/\nhtml/Security_Guide/ch-server.html.",
    "Page_41": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 285\n\nLocal Privilege Escalation\nPrivilege escalation is the process of elevating the level of authority (privileges) of Uc\n\na compromised user or a compromised application. This is done to further perform\nactions on the affected system or any other systems in the network, typically post-\n\nexploitation (that is, after gaining a foothold in the target system and exploiting a\nvulnerability).\n\nNOTE In Chapter 8, “Performing Post-Exploitation Techniques,” you will learn\nabout additional post-exploitation methodologies and tactics.\n\nThe main focus of the post-exploitation phase is to maintain access to the compro-\nmised systems and move around in the network while remaining undetected. In\nmany cases, privilege escalation is required to perform those tasks.\n\nIt is possible to perform privilege escalation in a few different ways. An attacker may\nbe able to compromise a system by logging in with a non-privileged account. Sub-\nsequently, the attacker can go from that unprivileged (or less privileged) account to\nanother account that has greater authority, as shown in Figure 7-1.\n\n \n\nuser: admin_user\n\n \n\n \n\n \n\nAttacker goes from a less-\nprivileged account\n\nto another account that has\ngreater authority.\n\n \n\nuser: omar\n\n \n\n \n\n \n\nFIGURE 7-1 Privilege Escalation from One Account to Another\n\nIt is also possible to perform privilege escalation by “upgrading,” or elevating, the\nprivileges of the same account, as shown in Figure 7-2.\n\n \n\n \n\nuser: omar user: omar\n(group: eng) (group: eng, admin)\n\n \n\n \n\n \n\n \n\n \n\n \n\nThe same account is used, but the attacker manipulates the\nsystem to increase the account privilege.\n\nFIGURE 7-2 Privilege Escalation Using the Same Account",
    "Page_42": "CompTIA® PenTest+ Cert Guide\n\nIn Figure 7-2, the user (omar) belongs to the engineering group (eng) and does not\nhave administrative rights on the system. The attacker then exploits a vulnerabil-\nity and is able to manipulate the system to put the same user (omar) in the admin\ngroup, subsequently giving the user administrative rights on the system.\n\nUnderstanding Linux Permissions\n\nThis book assumes that you have familiarity with Linux and user accounts. As a\n\nrefresher, in some cases users must be able to accomplish tasks that require privileges\n\n(for example, when installing a program or adding another user). This is why sudo\nexists. Example 7-2 shows the first few lines and description of the sudo man page.\n\nExample 7-2 The Linux sudo Command\n\n \n\nor another user,\nreal (not effective)\nto query the security policy.\n\noutput logging.\nand I/O logging plug-ins to work seamlessly with the\n\nsudoers, or via LDAP.\n\nThe security policy determines what privileges,\nto run sudo.\nwith a password or another authentication mechanism.\nis required,\na configurable time limit.\n\nThe sudoers policy caches credentials for 15 minutes,\nin sudoers(5). By running sudo with the -v option,\ncached credentials without running a command.\n\n \n\nsudo, sudoedit — execute a command as another user\nSYNOPSIS\nsudo -h -K -k -V\nsudo -v [-AknS] [-a type] [-g group] [-h host] [-p prompt] [-u user]\nsudo -1 [-AknS] [-a type] [-g group] [-h host] [-p prompt] [-U user]\n{-u user] [command]\nsudo [-AbEHnPS] [-a type] [-C num] [-c class] [-g group] [-h host]\n[-p prompt] [-r role] [-t type] [-u user] [VAR=value] [-i | -s] [command]\nsudoedit [-AknS] [-a type] [-C num] [-c class] [-g group] [-h host]\n[-p prompt] [-u user] file\nDESCRIPTION\n\nsudo allows a permitted user to execute a command as the superuser\nas specified by the security policy.\nuser ID is used to determine the user name with which\n\nThe invoking user's\n\nsudo supports a plugin architecture for security policies and input/\nThird parties can develop and distribute their own policy\n\nsudo front end. The\n\ndefault security policy is sudoers, which is configured via the file /etc/\nSee the Plugins section for more information.\n\nif any, a user has\n\nThe policy may require that users authenticate themselves\n\nIf authentication\n\nsudo will exit if the user's password is not entered within\nThis limit is policy-specific;\npassword prompt timeout for the sudoers security policy is unlimited.\n\nthe default\n\nSecurity policies may support credential caching to allow the user\nto run sudo again for a period of time without requiring authentication.\n\nunless overridden\n\na user can update the",
    "Page_43": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\nWhen invoked as sudoedit, the -e option (described below), is implied.\n\nSecurity policies may log successful and failed attempts to use sudo.\nIf an I/O plugin is configured, the running command's input and output may\nbe logged as well.\n\n<output omitted for brevity>.\n\n \n\nOn Unix-based systems, you can use the chmod command to set permissions values\non files and directories.\n\nNOTE You can set permissions of a file or directory (folder) to a given user, a group\nof users, and others.\n\nWith Linux you can set three basic permissions:\n\n= Read (r)\n\n= Write (w)\n\n= Execute (x)\nYou can apply these permissions to any type of files or to directories. Example 7-3\nshows the permissions of a file called omar_file.txt. The user executes the Is -l com-\n\nmand, and in the portion of the output on the left, you see -rw-rw-r--, which indi-\ncates that the current user (omar) has read and write permissions.\n\nExample 7-3 Linux File Permissions\n\n \n\nomar@dionysus:~$ ls -1l omar_file.txt\n\n-rw-rw-r-- 1 omar omar 15 May 26 23:45 omar_file.txt\n\n \n\n \n\n \n\nFigure 7-3 explains the Linux file permissions.\n\n- : file Read, write, and\nd: directory execute permissions\nI: link for the group members\n| owning the file.\na\"\n- fF W -fF W-f - =\na oH\nRead, write, and Read, write, and\nexecute permissions execute permissions\nfor the owner for other users.\nof the file.\n\nFIGURE 7-3 Explaining Linux File Permissions\n\n287\n\nLG",
    "Page_44": "288\n\nLG)\n\nCompTIA® PenTest+ Cert Guide\n\nExample 7-4 shows how a user belonging to any group can change the permissions\nof the file to be read, write, executable by using the chmod 0777 command.\n\nExample 7-4 Changing File Permissions\n\n \n\nomar@dionysus:~$ chmod 0777 omar_file.txt\nomar@dionysus:~$ ls -1 omar_file.txt\n-rwxrwxrwx 1 omar omar 15 May 26 23:45 omar_file.txt\n\nomar@dionysus:~$\n\n \n\n \n\nAs documented in the chmod man pages, the restricted deletion flag, or sticky bit, is\na single bit whose interpretation depends on the file type. For directories, the sticky\nbit prevents unprivileged users from removing or renaming a file in the directory\nunless they own the file or the directory; this is called the restricted deletion flag for\nthe directory, and it is commonly found on world-writable directories such as /tmp.\nFor regular files on some older systems, the sticky bit saves the program’s text image\non the swap device so it will load more quickly when run.\n\nTIP The sticky bit is obsolete with files, but it is used for directories to indicate that\nfiles can be unlinked or renamed only by their owner or the superuser. Sticky bits\nwere used with files in very old Unix machines due to memory restrictions. If the\nsticky bit is set on a directory, files inside the directory may be renamed or removed\nonly by the owner of the file, the owner of the directory, or the superuser (even\nthough the modes of the directory might allow such an operation); on some systems,\nany user who can write to a file can also delete it. This feature was added to keep an\nordinary user from deleting another’s files from the /tmp directory.\n\nThere are two ways that you can use the chmod command:\n\n= Symbolic (text) method\n\n= Numeric method\nWhen you use the symbolic method, the structure includes who has access and the\npermission given. The indication of who has access to the file is as follows:\n\n= u: The user that owns the file\n\n= g: The group that the file belongs to\n\n= o: The other users (that is, everyone else)\n\n= a: All of the above (that is, use a instead of ugo)",
    "Page_45": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 289\n\nExample 7-5 shows how to remove the execute permissions for all users by using\nthe chmod a-x omar_file.txt command.\n\nExample 7-5 Symbolic Method Example\n\n \n\nomar@dionysus:~$ ls -1l omar_file.txt\n\n-rwxrwxrwx 1 omar omar 15 May 26 23:45 omar_file.txt\nomar@dionysus:~$ chmod a-x omar_file.txt\nomar@dionysus:~$ ls -1l omar_file.txt\n\n-rw-rw-rw- 1 omar omar 15 May 26 23:45 omar_file.txt\n\nomar@dionysus:~$\n\n \n\n \n\n \n\nThe chmod command allows you to use + to add permissions and - to remove per-\nmissions. The chmod commands clears the set-group-ID (SGID or setgid) bit of a\nregular file if the file’s group ID does not match the user’s effective group ID or one\nof the user’s supplementary group IDs, unless the user has appropriate privileges.\nAdditional restrictions may cause the set-user-ID (SUID or setuid) and set-group-\nID bits of MODE or FILE to be ignored. This behavior depends on the policy and\nfunctionality of the underlying chmod system call. When in doubt, check the under-\nlying system behavior. This is clearly explained in the man page of the chmod com-\nmand (man chmod). In addition, the chmod command retains a directory’s SUID\nand SGID bits unless you explicitly indicate otherwise.\n\nYou can also use numbers to edit the permissions of a file or directory (for the\nowner, group, and others), as well as the SUID, SGID, and sticky bits. Example 7-4\nshows the numeric method. The three-digit number specifies the permission, where\neach digit can be anything from 0 to 7. The first digit applies to permissions for\n\nthe owner, the second digit applies to permissions for the group, and the third digit\napplies to permissions for all others.\n\nFigure 7-4 demonstrates how the numeric method works.\n\nPermission Binary-to-decimal conversion\nWw 000=0 100=4\n| 001=1 101=5\n\n010=2 110=6\n1 011=3  1411=7\n\n \n\n1\n\n\\<—_x\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nFIGURE 7-4 Explaining the Linux File Permission Numeric Method",
    "Page_46": "290\n\nCompTIA® PenTest+ Cert Guide\n\nAs shown in Figure 7-4, a binary number 1 is put under each permission granted\nand a 0 under each permission not granted. On the right in Figure 7-4, the\nbinary-to-decimal conversion is done. This is why in Example 7-4, the numbers 777\nmake the file omar_file.txt world-writable (which means any user has read, write,\n\nand execute permissions).\n\nA great online tool that you can use to practice setting the different parameters of\nLinux permissions is the Permissions Calculator, at http://permissions-calculator.org\n\n(see Figure 7-5).\n\n \n\n| @ © © BW Unix Permissions and Lookup\n\n€ C © © permissions-calculator.org\n\nUnix Permissions Calculator\n\nOctal Decode Octal. © Symbolic. info. Code Examples\n\nPermission bits\n\nSelect the permissions you require below. The too! will provide you with an octal code that corresponds\nto these permissions which can then be applied to relevant directories and files with chmod.\n\nSpecial User Group Other\nsetuid GRead GRead Read\nset0d @ write wre write\nSiciy te © @Exocut0 Execute Execute\n\nAbsolute Notation (octal)\n\n0740\n\ne.g: chmod 0740 <path-to-file>\n\n‘© Copyright 2008-18 by Dan's Tools.\n\n \n\n \n\nFIGURE 7-5 Permissions Calculator Online Tool\n\nThe Permissions Calculator website also provides several examples using PHP,\nPython, and Ruby to change file and directory permissions programmatically, as\n\nshown in Figure 7-6.",
    "Page_47": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 291\n\n \n\n(@8© Dhuscromisonsand lookin «\n\n©\n\nC © © permissions-calculator.org/exarm\n\n \n\nOctal | Decode Octal | Symbolic | Info. Code Examples\n\nCode Examples\nHere's a few simple code examples for changing file and directory permissions programatically.\nChmod with PHP\n\nFormat:\nbool chmod( string $path, int $mode);\n\nNote: in PHP that the mode must be supplied as octal so always prefix with 0. For more info see\nhttp://php.net/manualien/function. chmod. php.\n\n<?php\nchmod(\" /somedi r/somefile”\nchmod(\" /somedi r/somefi lL\nchmod(\"/somedir/somefi le”\n\n755); // decimal; probably incorrect\nrx,gorrx\"); // string; incorrect\n755); // octal; correct value of mode\n\n \n\n  \n\n<?php\n\n// SGID bit set, Everything for user, and group and read and exec\n// for other\n\nchmod(\"/somedir/somefile\", 02775);\n\n>\n\nChmod with Python\nFormat:\nos.chmod(path, mode)\n\nIn python it's possible to use octal values or use values defined in the stat module, For more info see\nhttp://docs. python. orglibrary/os.htmittos. chmod.\n\nimport os\n\n# Everything for user and group and read and exec for other\nos. chmad(\"/somedir/somefile\", 075)\n\n# SGID bit set. Everything for user and group and read and exec for other\n\nFIGURE 7-6 Changing Permissions Programmatically\n\nUnderstanding SUID or SGID and Unix Programs\n\nA program or a script in which the owner is root (by setting its Set-UID bit) will\nexecute with superuser (root) privileges. This introduces a security problem: If the\nsystem is compromised and that program is manipulated (as in the case of mono-\nlithic embedded devices), an attacker may be able to run additional executions as\nsuperuser (root).\n\n \n\n \n\nModern Unix and Linux-based systems ignore the SUID and SGID bits on shell\nscripts for this reason.",
    "Page_48": "292\n\nCompTIA® PenTest+ Cert Guide\n\nTIP An example of a SUID-based attack is the vulnerability that existed in the pro-\ngram /usr/lib/preserve (or /usr/lib/ex3.5 preserve). This program, which is used by the\nvi and ex editors, automatically made a backup of the file being edited if the user was\nunexpectedly disconnected from the system before writing out changes to the file.\nThe system wrote the changes to a temporary file in a special directory. The system\nalso sent an email to the user using /bin/mail with a notification that the file had been\nsaved. Because users could have been editing a file that was private or confidential,\nthe directory used by the older version of the Preserve program was not accessible by\nmost users on the system. Consequently, to let the Preserve program write into this\ndirectory and let the recovery program read from it, these programs were made\nSUID root.\n\nYou can find all the SUID and SGID files on your system by using the command\nshown in Example 7-6.\n\nExample 7-6 Finding All the SUID and SGID Files on a System\n\n \n\nomar@dionysus:~$ sudo find / \\( -perm -004000 -o -perm -002000 \\)\n-type £ -print\n\n[sudo] password for omar: *******k eee\nfind: '/proc/3491/task/3491/fdinfo/6'/usr/sbin/postqueue\n/usr/sbin/postdrop\n/ust/lib/eject/dmcrypt-get-device\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/policykit-1/polkit-agent-helper-1\n/usr/lib/x86_64-linux-gnu/utempter/utempter\n/usr/lib/x86_64-linux-gnu/1xc/1xc-user-nic\n/usr/lib/snapd/snap-confine\n/usr/lib/openssh/ssh-keysign\n/usr/bin/dotlock.mailutils\n\n/ust/bin/pkexec\n\n/ust/bin/chfn\n\n/usr/bin/screen\n\n/usr/bin/newgrp\n\n/usr/bin/crontab\n\n/usrt/bin/at\n\n/usr/bin/chsh\n\n/usrt/bin/ssh-agent\n\n/usr/bin/gpasswd\n\n/ust/bin/expiry",
    "Page_49": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\n/usr/bin/wall\n\n/usr/bin/sudo\n/usr/bin/bsd-write\n/usr/bin/mlocate\n/usr/bin/newgidmap\n/usr/bin/chage\n/usr/bin/newuidmap\n\nfind: '/proc/3491/fdinfo/5': No such file or directory\n/sbin/mount.cifs\n/sbin/unix_chkpwd\n/sbin/pam_extrausers_chkpwd\n/sbin/mount.ecryptfs_private\n/bin/fusermount\n\n/bin/pingé\n\n/bin/mount\n\n/bin/umount\n\n/bin/ntfs-3g\n\n/bin/su\n\n/bin/ping\n\n \n\n \n\nIn Example 7-6, the find command starts in the root directory (/) and looks for all\nfiles that match mode 002000 (SGID) or mode 004000 (SUID). The -type f option\nlimits the search to files only.\n\nTIP Security Enhanced Linux (SELinux) is a collection of kernel modifications and\nuser-space tools that are now part of several Linux distributions. It supports access\ncontrol security policies, including mandatory access controls. SELinux aims to pro-\nvide enforcement of security policies and simplify the amount of software required\n\nto accomplish such enforcement. Access can be constrained on variables such as\nwhich users and applications can access which resources. In addition, SELinux access\ncontrols are determined by a policy loaded on the system that cannot be changed\n\nby uneducated users or insecure applications. SELinux also allows you to configure\nmore granular access control policies. For instance, SELinux lets you specify who can\nunlink, append only, or move a file instead of only being able to specify who can read,\nwrite, or execute a file. It also allows you to configure access to many other resources\nin addition to files. For example, it allows you to specify access to network resources\nand interprocess communication (IPC).\n\n293",
    "Page_50": "294 CompTIA® PenTest+ Cert Guide\n\nInsecure SUDO Implementations\nudu Sudo, which stands for “super user do,” Is a Linux utility that allows a system admin-\n\nistrator to give certain users or groups of users the ability to run some or all com-\nmands as root or superuser. The Sudo utility operates on a per-command basis, and\nit is not a replacement for the shell. You can also use the Sudo utility to restrict the\ncommands a user can run on a per-host basis, to restrict logging of each command\nto have an audit trail of who did what, and to restrict the ability to use the same con-\nfiguration file on different systems.\n\nExample 7-7 shows the Linux command groups being used. The command shows\nthe group that the user omar belongs to. You can see in this example that sudo is one\nof the groups that the user omar belongs to.\n\nExample 7-7 The groups Command\n\n \n\nomar@dionysus:~$ groups\n\nomar adm cdrom sudo dip plugdev 1xd sambashare lpadmin\n\n \n\n \n\n \n\nAnother command you can use to see the groups a user belongs to is the id command,\nas shown in Example 7-8.\n\nExample 7-8 The id Command\n\n \n\nomar@dionysus:~$ id\n\nuid=1000 (omar) gid=1000(omar) groups=1000 (omar), 4 (adm) ,24 (cdrom),\n27 (sudo) , 30 (dip) , 46 (plugdev) , 110 (1xd) , 113 (sambashare) , 117 (lpadmin)\n\n \n\n \n\n \n\nExample 7-9 shows the same commands used when a different user (ron) is logged\nin. In this case, you can see that ron belongs only to the group ron.\n\nExample 7-9 The Groups to Which User ron Belongs\n\n \n\nron@dionysus:~$ groups\n\nron\n\nron@dionysus:~$ id\n\nuid=1001 (ron) gid=1001(ron) groups=1001 (ron)\n\nron@dionysus:~$\n\n \n\n \n\nCertain Linux systems call this group the “wheel” group. If you want to add an exist-\ning user to the wheel (or sudo) group, you can use the usermod command with the",
    "Page_51": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 295\n\n-G option. You might also want to use the -a option, to avoid removing the user\nfrom other groups to which he or she belongs, as shown in Example 7-10.\n\nExample 7-10 The usermod Command\n\n \n\n$ sudo usermod -a -G wheel ron\n\n \n\n \n\n \n\nYou can also add a user account to the wheel group as you create it, as shown in\n\nExample 7-11.\n\nExample 7-11 Adding a User to the wheel Group at Creation\n\n \n\n$ sudo useradd -G wheel chris\n\n \n\n \n\n \n\nIn many different Linux systems, you can also use the visudo command. Figure 7-7\nshows the first few lines of the description of the visudo man page (man visudo).\n\nene 1. omar@jorel: ~ (ssh)\n\n   \n\nManager's Manual\n\nAa et Ts on\n\nSYNOPSIS\nNAS Me mers\n\nnase s CaCO)\nNae Fil Ti CTE oY visudo locks the\npee Cette es Pee Da) aes ely J aan Tale rel\nfor parse errors. If the sudoers 5 ly being edite u\n\nSa ue sy\n\ntam har\n\nSTM RA Mca TTT Dean Lat)\n\nusr/bin/editor. Normally, visudo doe ese ame aan 2 01\n\nables unless they contain an editor in the afor rat Leela)\n\nPat eat a me: reser: tion or the env_editor Defa\nbaer] ae ee\n\nse ° Se Ste i\n\na isa\n\nSAE\nMae f , ae Care\n(s) where the error « Chr ame . e t. At this\n\nTae UM cts Sam lta ‘ aU ear\n\nea eal to quit and save changes. The ‘Q’ option should be used with extreme care\n\neee Gee ee en ee eee ee ce een ee ee\nto run sudo again until the error is fixed. If Peay ct eae eat\nrasa 7\n\nae curred (if the e rs\n\nManual page visudo(8) line 1 (press h for help or q to quit)\nFIGURE 7-7 The visudo Command Man Page",
    "Page_52": "296 CompTIA® PenTest+ Cert Guide\n\nExample 7-12 shows the contents of the sudoers file after the visudo command is\ninvoked.\n\nExample 7-12 The sudoers File\n\n \n\nThis file MUST be edited with the 'visudo' command as root.\n\nPlease consider adding local content in /etc/sudoers.d/ instead of\n\n#\n\n#\n\n#\n\n# directly modifying this file.\n\n#\n\n# See the man page for details on how to write a sudoers file.\n#\n\nDefaults env_reset\nDefaults mail_badpass\nDefaults secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/\n\nsbin:/usr/bin:/sbin:/bin:/snap/bin\"\n\n# Host alias specification\n\n# User alias specification\n\n# Cmnd alias specification\n\n# User privilege specification\n\nroot ALL=(ALL:ALL) ALL\n\n# Members of the admin group may gain root privileges\n\nsadmin ALL=(ALL) ALL\n\n# Allow members of group sudo to execute any command\n\n%Ssudo ALL=(ALL:ALL) ALL\n\n# See sudoers(5) for more information on \"#include\" directives:\n\n#includedir /etc/sudoers.d\n\n \n\n \n\n \n\nThe first highlighted line in Example 7-12 means that the root user can execute\ncommands from ALL terminals, acting as ALL (that is, any) users, and can run the\nALL command (any commands). The second highlighted line specifies that mem-\nbers of the admin group may gain root privileges and can also execute commands\nfrom all terminals, acting as ALL (any) users, and can run the ALL command (any\ncommands). The third highlighted line specifies the same for any members of the\ngroup sudo.",
    "Page_53": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 297\n\nA huge mistake that some people make is to copy and paste the root privileges and\nassign them to a user, as shown in Example 7-13.\n\nExample 7-13 Improper sudoers File Entry\n\n \n\nben ALL=(ALL:ALL) ALL\n\n \n\n \n\n \n\nIn Example 7-13 the user ben has been assigned all the privileges of root. Attackers\ncan take advantage of misconfigured sudoers files, like this one, to cause severe neg-\native effects on a system. In most cases, you probably want a specific user to power\noff the system or just execute certain commands that will be required for the user\nto do certain tasks. Example 7-14 shows a better setup than Example 7-13: Because\nben only needs to be able to power off the system, he has only been given that sudo\ncapability.\n\nExample 7-14 Allowing ben to Power Off the System\n\n \n\nben ALL= /sbin/poweroff\n\n \n\n \n\n \n\nAs demonstrated in Example 7-15, you can also create aliases for users (User_Alias),\nrun commands as other users (Runas_Alias), specify the host or network from which\nthey can log in (Host_Alias), and specify the command (Cmnd_Alias).\n\nExample 7-15 sudoers File Using Aliases\n\n \n\nUser_Alias COOLGUYS = ben, chris, ron\nRunas_Alias LESSCOOL = root, operator\n\nHost_Alias COOLNET = 192.168.78.0/255.255.255.0\nCmnd_Alias PRINT = /usr/sbin/lpc, /usr/bin/lprm\n\nomar ALL=(LESSCOOL) ALL\n\n# The user omar can run any command from any terminal as any user in\nthe LESSCOOL group (root or operator)\n\ntrina COOLNET=(ALL) ALL\n\n# The user trina may run any command from any machine in the COOLNET\nnetwork, as any user.\n\nben ALL=PRINT\n\n# The user ben may run lpc and lprm from any machine.",
    "Page_54": "298\n\nKey\n\nCompTIA® PenTest+ Cert Guide\n\nIn Example 7-15 the alias COOLGUYS includes the users ben, chris, and ron. The\nalias LESSCOOL includes the users root and operator. The alias COOLNET\nincludes the network 192.168.78.0/24, and the command alias PRINT includes the\ncommands Ipc and Iprm.\n\nTIP Sudo has been affected by several vulnerabilities that allow users to overwrite\nsystem configurations, run additional commands that should not be authorized,\namong other things. You can stay informed of any new vulnerabilities in Sudo at\nhttps://www.sudo.ws/security.html.\n\nRet2libc Attacks\n\nA “return-to-libe” (or ret2libe) attack typically starts with a buffer overflow. In this\ntype of attack, a subroutine return address on a call stack is replaced by an address of\na subroutine that is already present in the executable memory of the process. This is\ndone to potentially bypassing the no-execute (NX) bit feature and allow the attacker\nto inject his or her own code.\n\nOperating systems that support non-executable stack help protect against code\nexecution after a buffer overflow vulnerability is exploited. On the other hand, non-\nexecutable stack cannot prevent a ret2libe attack because in this attack, only exist-\ning executable code is used. Another technique, called stack-smashing protection, can\nprevent or obstruct code execution exploitation because it can detect the corruption\nof the stack and can potentially “flush out” the compromised segment.\n\nA technique called ASCII armoring can be used to mitigate ret2libe attacks. When\nyou implement ASCII armoring, the address of every system library (such as libc)\ncontains a NULL byte (0x00) that you insert in the first 0x01010101 bytes of mem-\nory. This is typically a few pages more than 16 MB and is called the ASCII armor\nregion because every address up to (but not including) this value contains at least one\nNULL byte. When this methodology is implemented, an attacker cannot place code\ncontaining those addresses using string manipulation functions such as strepy().\n\nOf course, this technique doesn’t protect the system if the attacker finds a way to\noverflow NULL bytes into the stack. A better approach is to use the address space\nlayout randomization (ASLR) technique, which mitigates the attack on 64-bit sys-\ntems. When you implement ASLR, the memory locations of functions are random.\nASLR is not very effective in 32-bit systems, though, because only 16 bits are avail-\nable for randomization, and an attacker can defeat such a system by using brute-\nforce attacks.",
    "Page_55": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\nWindows Privileges\n\nThe following sections cover several methodologies and attacks for performing\nprivilege escalation in Windows systems.\n\nCPassword\n\nLegacy Windows operating systems were susceptible to CPassword attacks.\nCPassword was a component of Active Directory’s Group Policy Prefer-\nences that allowed administrators to set passwords via Group Policy. Micro-\nsoft patched this vulnerability in MS14-025 (see https://docs.microsoft.\ncom/en-us/security-updates/securitybulletins/2014/ms14-025). Microsoft\nalso released a document explaining the vulnerability details, as well as well-\nknown mitigations (see https://support.microsoft.com/en-us/help/2962486/\nms14-025-vulnerability-in-group-policy-preferences-could-allow-elevati).\n\nIf administrators use CPassword to perform common tasks (such as changing the\nlocal administrator account), any user with basic read rights to the SYSVOL direc-\ntory can obtain the authentication key and crack it by using tools such as John the\nRipper and Hashcat.\n\nTIP A CPassword attack is also referred to as a GPP attack. To test and find vulner-\nable systems, you can just perform a keyword search for “cpassword” through all\n\nthe files in the SYSVOL directory and modify or remove any Group Policy Objects\n(GPOs) that reference them. A GPO is a virtual compilation of policy settings. Each\nGPO is configured with a unique name, such as a GUID. You can obtain more infor-\nmation about GPOs at https://msdn.microsoft.com/en-us/library/aa374162(v=vs.85).\naspx. Microsoft has also published an article describing the SYSVOL implementation\nat https://social.technet.microsoft.com/wiki/contents/articles/24160.active-directory-\nback-to-basics-sysvol.aspx.\n\nYou can automatically decrypt passwords that are stored in the Group Policy\nPreferences by using Metasploit, and you can use the Meterpreter post-exploitation\nmodule to obtain and decrypt CPassword from files stored in the SYSVOL directory.\nIn addition, a number of PowerShell scripts can be used to perform this type of\nattack, such as the ones at https://github.com/PowerShellMafia/PowerSploit/blob/\nmaster/Exfiltration/Get-GPPPassword.ps1.\n\n299\n\nLG)",
    "Page_56": "300\n\nLOY\n\nCompTIA® PenTest+ Cert Guide\n\nClear-Text Credentials in LDAP\n\nUnfortunately, many organizations still configure their Windows domain control-\nlers to receive credentials in clear text over the network. One easy way to determine\nwhether a system is affected by sending credentials in the clear is to look for event\nIDs 2886 and 2887 in the Active Directory Service log. Example 7-16 shows an\nexample of Event 2886.\n\nExample 7-16 Directory Service Event 2886\n\n \n\nLog Name: Directory Service\n\nSource: Microsoft-Windows-ActiveDirectory_DomainService\nDate: 6/12/2018 3:08:11 AM\n\nEvent ID: 2886\n\nTask Category: LDAP Interface\n\nLevel: Warning\n\nKeywords: Classic\n\nUser: hacker\n\nComputer: omar_workstation.sd.lan\n\nDescription:\n\nThe security of this directory server can be significantly enhanced\n\nby configuring the server to reject SASL (Negotiate, Kerberos\n\nNTLM, or Digest) LDAP binds that do not request signing (integrity\nverification) and LDAP simple binds that are performed on a cleartext\n(non-SSL/TLS-encrypted) connection. Even if no clients are using such\nbinds, configuring the server to reject them will improve the security\nof this server.\n\nSome clients may currently be relying on unsigned SASL binds or LDAP\nsimple binds over a non-SSL/TLS connection, and will stop working\n\nif this configuration change is made. To assist in identifying these\nclients, if such binds occur this directory server will log a summary\nevent once every 24 hours indicating how many such binds occurred. You\nare encouraged to configure those clients to not use such binds. Once no\nsuch events are observed for an extended period, it is recommended that\nyou configure the server to reject such binds.\n\n \n\n \n\n \n\nIf any domain controller has the 2886 event present, this indicates that LDAP sign-\ning is not being enforced by the domain controller, and it is possible to perform a\nsimple (clear-text) LDAP bind over a non-encrypted connection.",
    "Page_57": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 301\n\nTIP The tool at https://github.com/russelltomkins/Active-Directory/blob/master/\nQuery-InsecureLDAPBinds.ps1 can be used to query logs for insecure LDAP binds\nand clear-text passwords. Furthermore, the following post includes additional infor-\nmation about how such an attack could be performed: https://www.harmj0y.net/blog/\npowershell/kerberoasting-without-mimikatz.\n\nKerberoasting\n(J e)(]\n\nKerberoast is a series of tools for attacking Microsoft Kerberos implementations\nand Windows service accounts. The tool can be obtained from https://github.com/\nnidem/kerberoast.\n\nTIP The post https://www.blackhillsinfosec.com/a-toast-to-kerberoast/ provides\nstep-by-step instructions for remotely running a Kerberoast attack over an established\nMeterpreter session to a command and control server and cracking the ticket offline\nusing Hashcat.\n\nYou will learn more about Meterpreter and Hashcat in Chapter 9, “Penetration\nTesting Tools.”\n\nCredentials in Local Security Authority Subsystem Service (LSASS)\nTopic\n\nAnother attack commonly performed against Windows systems involves obtain-\ning user and application credentials from the Local Security Authority Subsystem\nService (LSASS). It is possible to dump the LSASS process from memory to disk\nby using tools such as Sysinternals ProcDump. Attackers have been successful using\nProcDump because it is a utility digitally signed by Microsoft. Therefore, this type\nof attack can evade many antivirus programs. ProcDump creates a minidump of\nthe target process. An attacker can then use tools such as Mimikatz to mine user\ncredentials\n\nTIP You can use the VMware tool vmss2core to dump memory from a suspended\nvirtual machine (VM). You can easily identify a suspended VM by the file extension\n-vmss. You can also use the VMware tool vmss2core to dump memory from\nsnapshotted VMs (*.vmsn). You can then use the Volatility Framework to extract the\nhashes. For more information about the Volatility Framework, see http://\nwww.volatilityfoundation.org.",
    "Page_58": "302\n\nLOY\n\nCompTIA® PenTest+ Cert Guide\n\nThe following are additional resources related to the aforementioned attacks:\n\n= ProcDump and Windows Sysinternals: https://docs.microsoft.com/en-us/\nsysinternals/downloads/procdump\n\n= Mimikatz: http://blog.gentilkiwi.com/mimikatz\n= The Volatility Foundation: http://www.volatilityfoundation.org\n= Vmmss2core: https://labs.vmware.com/flings/vmss2core\n\n= VMware Snapshot and Saved State Analysis: http://volatility-labs.blogspot.be/\n2013/05/movp-ii-13-vmware-snapshot-and-saved.html\n\nSAM Database\n\nMicrosoft Active Directory plays an important role in many organizations. Active\nDirectory provides a directory service for managing and administering different\ndomain activities. Active Directory is based on a client/server architecture. Under-\nstanding how Active Directory works and the underlying architecture is very impor-\ntant for any pen tester tasked with testing Windows environments.\n\nOf course, one of the common tasks in a penetration testing engagement is to\nretrieve passwords from a Windows system and ultimately try to get domain admin-\nistrator access. In Chapter 5, “Exploiting Wired and Wireless Networks,” you\nlearned about the pass-the-hash attack technique and other attacks against Windows\nsystems. As a refresher, Windows stores password hashes in three places:\n\n= The Security Account Manager (SAM) database\n= The LSASS\n= The Active Directory database\n\nAll versions of Windows store passwords as hashes, in a file called the Security\nAccounts Manager (SAM) database.\n\nNOTE The SAM database stores only hashes the passwords. Windows itself does not\nknow what the passwords are.\n\nThe SAM database stores usernames and NT hashes in a %SystemRoot%/\nsystem32/config/SAM file. This file contains all the hash values for accounts that\nare local to the computer.\n\nMicrosoft created its own hash process for its Windows operating systems. This\nis where the NT LAN Manager (NTLM) comes into play. NTLM is a suite of",
    "Page_59": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 303\n\nMicrosoft security protocols that have been proven to be vulnerable and used by\nmany penetration testers as well as threat actors to compromise machines. Because\npassword hashes cannot be reversed, instead of trying to figure out a user’s password,\nyou (or an attacker) can just use a password hash collected from a compromised\nsystem and then use the same hash to log in to another client or server system. This\ntechnique, called pass-the-hash, is illustrated in Figure 7-8.\n\nServer 1 Server 2\n\nAttacker user hash\n\nfrom Server 1 to\n\nlog in to Server 2.\nhansolo:1010:aabb23430c908437 128ea:bc32193819d9aa302b1::\n\n  \n \n \n   \n\n@ Attacker steals user hash\nfrom Server 1.\n\nhansolo:1010:aabb23430c9b98437 1 28ea:bc32193819d9aa302b1:::\n\n—_——\n\n—\nAttacker\n\nFIGURE 7-8 Pass-the-Hash Attack Example\n\nMicrosoft now uses Kerberos in Windows domains, but NTLM is still used when\nthe client is authenticating to a server in a different Active Directory forest that has\na legacy NTLM trust instead of a transitive inter-forest trust. NTLM is also used\nwhen the client is authenticating to a server that doesn’t belong to a domain and\nwhen Kerberos is blocked by a firewall or a similar device.\n\nUnderstanding Dynamic Link Library Hijacking re\n\nye . . Uy\nDynamic link libraries (DLLs) are common components in all versions of Windows.\n\nSome DLLs are loaded into applications when they start (if needed). DLLs inter-\nact with APIs and other operating system procedures. If you tamper with a system\nin order to control which DLL an application loads, you may be able to insert a\nmalicious DLL during the DLL loading process to compromise the system. An\napplication can decide the order of the directories to be searched for a DLL to load,\ndepending on the configuration of the system. The following list shows the order of\nthe Windows DLL search process:\n\nStep 1. | Windows searches the working directory from which the application is\nloaded.\n\nStep 2. Windows searches the current directory (from which the user is working).",
    "Page_60": "304\n\nLOY\n\nCompTIA® PenTest+ Cert Guide\n\nStep 3. | Windows searches the system directory (typically \\Windows\\System32\\).\n\nThe GetSystemDirectory function is called to obtain this directory.\n\nStep 4. | Windows searches the 16-bit system directory.\n\nStep 5. | Windows searches the Windows directory. The GetWindowsDirectory\n\nfunction is called to obtain this directory.\n\nStep 6. | Windows searches directories that are listed in the PATH environment\n\nvariable.\n\nIn this process, the attack relies on a program making a decision to load a DLL from\nthe current directory (step 2). An attacker can manipulate that step and perform\n\na DLL hijacking attack. For instance, if the user is opening an Excel spreadsheet,\nMicrosoft Office attempts to load its DLL component from the location of that\ndocument file. An attacker can put a malicious DLL in that directory. Subsequently,\nMicrosoft Office can carelessly load the malicious DLL.\n\nTIP DLL hijack attacks are not as effective as they used to be. This is because\nMicrosoft has released several patches and features that help prevent these types of\nattacks. The following article explains some of the mitigations: https://docs.microsoft\n.com/en-us/windows/desktop/dlls/dynamic-link-library-search-order.\n\nExploitable Services\n\nYou as a pen tester can take advantage of exploitable services such as the following:\n\n= Unquoted service paths: If an executable (application binary) is enclosed\nin quotation marks (“”), Windows knows where to find it. On the contrary, if\nthe path where the application binary is located doesn’t contain any quotation\nmarks, Windows will try to locate it and execute it inside every folder of this\npath until it finds the executable file. An attacker can abuse this functionality\nto try to elevate privileges if the service is running under SYSTEM privileges.\nA service is vulnerable if the path to the executable has a space in the filename\nand the filename is not wrapped in quotation marks; exploitation requires\nwrite permissions to the path before the quotation mark.\n\n= Writable services: Administrators often configure Windows services that\nrun with SYSTEM privileges. This could lead to a security problem because\nan attacker may obtain permissions over the service or over the folder where",
    "Page_61": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 305\n\nthe binary of the service is stored (or both). Services configured this way are\nalso often found in third-party software (TPS) and may be used for privilege\nescalation.\n\nInsecure File and Folder Permissions Key\n\n \n\nAn attacker can take advantage of unsecured and misconfigured file and folder per-\nmissions. Files and folders in Windows can have read and write permissions. These\npermissions are established strictly to specific users or groups. In contrast, Unix and\nLinux-based systems grant file and folder permissions to the owner, the group owner,\nor everybody. Windows uses specific permissions to allow users to access folder con-\ntent. Windows does not use execute permissions on files. Windows uses the filename\nextension to determine whether a file (including a script file) can be run.\n\nTIP For details on how Windows file security and access rights work, see https://\ndocs.microsoft.com/en-us/windows/desktop/fileio/file-security-and-access-rights.\nMicrosoft has also published a detailed document explaining Windows access\ncontrol lists at https://docs.microsoft.com/en-us/windows/desktop/secauthz/\naccess-control-lists.\n\nTable 7-2 compares the permissions between Unix/Linux systems and Windows.\n\nTable 7-2 A Comparison Between Permissions for Unix/Linux-Based Systems and\nWindows Systems\n\nUnix/Linux Windows\n\n \n\nRead and write permissions on a folder in Unix is the same as the read and write permissions\nin Windows.\n\n \n\ne read and execute permissions on a file in Unix are the same as the read and execute\nTh d and t file in Ui th th d and t\npermissions in Windows.\n\n \n\nWrite permission on a file Modify permission on a file\n\n \n\nExecute permission on a folder List Folder Contents permission\n\n \n\nRead, write, and execute permissions on a file — Full Control permission\nor folder\n\n \n\nUnderstanding Windows Group Policy\n\nIn Windows, Group Policy is a centralized administration feature for systems\nbelonging to a Windows domain. This functionality allows you to create poli-\ncies in Active Directory and assign them to users or systems. You create policies to",
    "Page_62": "306\n\nLG\n\nCompTIA® PenTest+ Cert Guide\n\nconfigure specific settings and permissions within the Windows operating system.\nThe item inside Active Directory that contains these settings is called a Group\nPolicy Object (GPO). GPOs can be used for user accounts, for client computer set-\ntings, or for configuring policies in servers. Typically, the goal is to configure GPOs\nin such a way that they cannot be overridden by users.\n\nTIP Microsoft provides a series of spreadsheets and other documentation to help\nmanage GPOs; see http://www.microsoft.com/en-us/download/details.aspx?id=25250.\nThese spreadsheets list the policy settings for computer and user configurations that\nare included in the Administrative template files delivered with the specified Win-\ndows operating system. You can configure these policy settings when you edit GPOs.\nA brief example of one of these spreadsheets is shown in Figure 7-9.\n\n \n\n \n\n   \n\nEis o -—— —+ wm |\n\nFIGURE 7-9 Group Policy Settings Reference for Windows and Windows Server\n\nKeyloggers\n\nAn attacker may use a keylogger to capture every key stroke of a user in a system\nand steal sensitive data (including credentials). There are two main types of\nkeyloggers: keylogging hardware devices and keylogging software. A hardware\n(physical) keylogger is usually a small device that can be placed between a user’s\nkeyboard and the main system. Software keyloggers are dedicated programs\ndesigned to track and log user keystrokes.",
    "Page_63": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\nNOTE Keyloggers are legal in some countries and designed to allow employers to\noversee the use of their computers. However, recent regulations like GDPR have\nmade keyloggers a very sensitive and controversial topic. Threat actors use keyloggers\nfor the purpose of stealing passwords and other confidential information.\n\nThere are several categories of software-based keyloggers:\n\n= Kernel-based keylogger: A program on the machine obtains root access to\nhide itself in the operating system and intercepts keystrokes that pass through\nthe kernel. This method is difficult both to write and to combat. Such keylog-\ngers reside at the kernel level, which makes them difficult to detect, especially\nfor user-mode applications that don’t have root access. They are frequently\nimplemented as rootkits that subvert the operating system kernel to gain unau-\nthorized access to the hardware. This makes them very powerful. A keylogger\nusing this method can act as a keyboard device driver, for example, and thus\ngain access to any information typed on the keyboard as it goes to the\noperating system.\n\n= API-based keylogger: With this type of keylogger, compromising APIs reside\ninside a running application. Different types of malware have taken advantage\nof Windows APIs, such as GetAsyncKeyState() and GetForeground\nWindow(), to perform keylogging activities.\n\n= Hypervisor-based keylogger: This type of keylogger is effective in virtual\nenvironments, where the hypervisor could be compromised to capture sensi-\ntive information.\n\n= Web form-grabbing keylogger: Keyloggers can steal data from web form\nsubmissions by recording the web browsing on submit events.\n\n= JavaScript-based keylogger: Malicious JavaScript tags can be injected into\na web application and then capture key events (for example, the onKeyUpQ)\nJavaScript function).\n\n= Memory-injection-based keylogger: This type of keylogger tampers with\nthe memory tables associated with the browser and other system functions.\n\nScheduled Tasks\n\nThreat actors can take advantage of the Windows Task Scheduler to bypass User\nAccount Control (UAC) if the user has access to its graphical interface. This is pos-\nsible because the security option runs with the system’s highest privileges. When a\nWindows user creates a new task, the system typically doesn’t require the user to\n\n307\n\nKe",
    "Page_64": "308 CompTIA® PenTest+ Cert Guide\n\nauthenticate with an administrator account. You can also use this functionality for\npost-exploitation and persistence.\n\nNOTE You can access the scheduled tasks of a Windows system by navigating to\nStart -> Programs -> Accessories -> System Tools -> Scheduled Tasks.\n\nroy Escaping the Sandbox\nBye) [4\n\nThe term sandbox can mean different things depending on to the field. In cyberse-\ncurity, a sandbox allows you to isolate running applications to minimize the risk of\nsoftware vulnerabilities spreading from one application to another. Figure 7-10 illus-\ntrates this sandboxing concept.\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n© Attack or OG\nVulnerability\nO * \"OS\nApplication Sandbox 1 Application Sandbox 2\nOperating System\n\n \n\n \n\n \n\nFIGURE 7-10 Sandboxes\n\nSandboxes can also be used to run untested or untrusted software from unverified or\nuntrusted third parties, suppliers, users, or websites. In addition, they can be used to\ntest malware without allowing the software to compromise the host system.\n\nTIP Sandbox implementations typically operate and provide a controlled set of\nresources for guest applications to run in. These resources include a “scratch space”\non disk and memory. Typically, network access is disallowed or highly restricted.\n\nIn web development, a sandbox is a mirrored production environment that developers\nuse to create an application before migrating it to a production environment. Compa-\nnies like Amazon, Google, and Microsoft, among others, provide sandboxing services.\n\nNOTE For the purpose of this book, we of course concentrate on sandboxes related\nto cybersecurity.",
    "Page_65": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 309\n\nThe following are examples of sandbox implementations:\n\n= A jail: This implementation is commonly used in mobile devices where there is\nrestricted filesystem namespace and rule-based execution to not allow untrusted\napplications to run in the system. This is where the term jail-braking comes in.\nUsers may “jail-break” their phones to be able to install games and other applica-\ntions. With a jail-broken phone, an attacker can more easily impersonate applica-\ntions and deliver malware to the user because a jail-broken device does not have\nthe security controls in place to prevent malware from running on the system.\n\n= Rule-based execution in SELinux and AppArmor security frameworks:\nThis implementation restricts control over what processes are started, spawned\nby other applications, or allowed to inject code into the system. These imple-\nmentations can control what programs can read and write to the file system.\n\n= Virtual machines: Virtual machines can be used to restrict a guest operating\nsystem to run sandboxed so that the applications do not run natively on the\nhost system and can only access host resources through the hypervisor.\n\n= Sandboxing on native hosts: Security researchers may use sandboxing to ana-\nlyze malware behavior. Even commercial solutions such as Cisco’s ThreatGrid\nuse sandbox environments that mimic or replicate the victim system to evalu-\nate how malware infects and compromises such a system.\n\n= Secure Computing Mode (seccomp) and seccomp-bpf (seccomp\nextension): These are sandboxes built in the Linux kernel to only allow the\nwrite(), read(), exit(), and sigreturn() system calls.\n\n= Software fault isolation (SFI): This implementation uses sandboxing methods\nin all store, read, and jump assembly instructions to isolated segments of memory.\n\n= Web browsers: Browsers provide sandboxing capabilities to isolate extensions\nand plugins.\n\n= HTMLS: HTMLS has a sandbox attribute for use with iframes.\n\n= Java virtual machines: These VMs include a sandbox to restrict the actions of\nuntrusted code, such as a Java applet.\n\n= .NET Common Language Runtime: This implementation enforces restric-\ntions on untrusted code.\n\n= Adobe Reader: This implementation runs PDF files in a sandbox to prevent\nthem from escaping the PDF viewer and tampering with the rest of the computer.\n\n= Microsoft Office: Office has a sandbox mode to prevent unsafe macros from\nharming the system.",
    "Page_66": "310 CompTIA® PenTest+ Cert Guide\n\nIf an attacker finds a way to bypass (escape) the sandbox, he or she can then compro-\nmise other applications and potentially implement a full system compromise. Several\nsandbox escape vulnerabilities in the past have allowed attackers to do just that.\n\nVirtual Machine Escape\naly : . .\nLd In the previous section, you learned that VMs can be used to restrict a guest operat-\n\ning system to run sandboxed. This is because the applications do not run natively on\nthe host system and can only access host resources through the hypervisor.\n\nIf an attacker finds a way to escape the VM, he or she can then compromise other\nVMs and potentially compromise the hypervisor. This is catastrophic in cloud envi-\nronments, where multiple customers can be affected by these types of attacks. AVM\nescape attack is illustrated in Figure 7-11.\n\n@ Attacker Compromises VM3.\n\n \n\nTD J\n\nVM 1 VM 2 VM 3 ® Attacker exploits VM\nescape vulnerability and\ncompromises the\nhypervisor.\n\n \n\n \n\n \n\n \n\n \n\n \n\nHypervisor\n\n \n\n \n\n \n\nAttacker compromises\nother VMs on the system.\n\nFIGURE 7-11 VM Escape\n\nUnderstanding Container Security\n\nA lot of people immediately think about Docker when they hear the word containers,\nbut there are other container technologies out there. Linux Containers (LXC) is a\nwell-known set of tools, templates, and library and language bindings for Linux con-\ntainers. It’s pretty low level and very flexible, and it covers just about every contain-\nment feature supported by the upstream kernel.\n\nNOTE You can learn more about LXC at https://linuxcontainers.org.\n\nDocker is really an extension of LXC’s capabilities. A high-level API provides a\nlightweight virtualization solution to run different processes in isolation. Docker was\ndeveloped in the Go language and utilizes LXC, cgroups, and the Linux kernel itself.",
    "Page_67": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 311\n\nNOTE You can learn more about Docker at https://www.docker.com.\n\nAnother popular container technology or package is rkt (or Rocket). rkt aims to\nprovide a feature and capability that its creators call “secure-by-default.” It includes\na number of security features such as support for SELinux, TPM measurement, and\nrunning app containers in hardware-isolated VMs.\n\nNOTE You can learn more about Rocket at https://github.com/rkt/rkt.\n\nCri-o is a lightweight container technology used and designed with Kubernetes. It\nprovides support for containers based on the Open Container Initiative specifica-\ntions (see https://www.opencontainers.org), a set of two specifications: the Runtime\nSpecification (runtime-spec) and the Image Specification (image-spec). The\nruntime-spec outlines how to run a filesystem bundle that is unpacked on disk.\n\nNOTE You can learn more about Cri-o at http://cri-o.io.\n\nAnother container package is called OpenVz. It is not as popular as Docker or\nRocket, but it is making the rounds.\n\nNOTE You can learn more about OpenVz at https://openvz.org.\n\nWhat is a container? A container image is a lightweight, standalone, executable\npackage of a piece of software that includes everything you need to run it, including\ncode, the runtime, system tools, system libraries, and settings. Containers are avail-\nable for Linux, Mac OS X, and Windows applications.\n\nNOTE Containerized software will always run the same, regardless of the\nenvironment.\n\nContainers isolate software from its surroundings and help reduce conflicts between\nteams running different software on the same infrastructure.\n\nSo what is the difference between a container and a virtual machine? Figure 7-12\nprovides a comparison.",
    "Page_68": "312 CompTIA® PenTest+ Cert Guide\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nVirtual Machines Containers\n\nVM1 VM2 VM3\n\nApp App App\n\n[ae [35] [5 App 1 | | App 2 || App 3 | | App 4\nHypervisor Docker Engine\nHost Hardware Host Hardware\nFIGURE 7-12 VMs vs. Containers\nFigure 7-12 shows the architectural differences between container and VM environ-\n\nments. A VM generally includes an entire operating system along with the applica-\ntion. It also needs a hypervisor running along with it to control the VM. VMs tend\nto be pretty big in size, since they include whole operating systems. Because of this,\nthey take up several minutes to boot up the operating system and initialize the appli-\ncation they are hosting. Containers are much smaller; they perform much better\nthan VMs and can start almost instantly.\n\nOne of the biggest advantages of container technologies is that containers can be\ncreated much faster than VM instances. Their lightweight footprint means less over-\nhead in terms of performance and size. Containers increase developer productivity\nby removing cross-service dependencies and conflicts. Each container can be seen as\na different microservice, and you can very easily upgrade them independently.\n\nEach image of a container can be version controlled, so you can track different ver-\nsions of a container. Containers encapsulate all the relevant details, such as appli-\ncation dependencies and operating systems. This makes them extremely portable\nacross systems.\n\nDocker and container technologies are supported by all major cloud providers,\nincluding Amazon Web Services (AWS), Google Cloud Platform, and Microsoft\nAzure. In addition, Docker can be integrated with tools like Ansible, Chef, Pup-\npet, Jenkins, Kubernetes, OpenStack, Vagrant, and dozens of other tools and\ninfrastructures.",
    "Page_69": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 313\n\nTIP Of course, this is not a book about Docker and containers. However, if you have\nnever played with containers, you can easily download your favorite Linux distribu-\n\ntion and install Docker. For example, in Ubuntu or even Kali Linux, you can simply\n\ninstall Docker with the apt install docker.io command.\n\nSome of the most challenging issues with containers and DevOps are operational\n\nin nature. For example, due to the convenience and agility that containers bring to\nthe table, developers often pull Docker containers from community repositories and\nstores not knowing what vulnerabilities they are inheriting in those containers. Asset\ndiscovery and container vulnerability management are therefore very important.\n\nThe following are a few examples of tools and solutions that have been developed\nthroughout the years for container security:\n\n= Anchore: Anchore is used to analyze container images for the presence of\nknown security vulnerabilities and against custom security policies. It has\nboth open source and commercial versions. You can obtain the open source\ncode and more information about it from https://github.com/anchore/\nanchore-engine.\n\n= Aqua Security: This is a commercial tool for securing container-based appli-\ncations (see https://www.aquasec.com).\n\n= Bane: This is an AppArmor profile generator for Docker containers. You can\ndownload it from https://github.com/genuinetools/bane.\n\n= CIS Docker Benchmark: This tool provides an automated way to test con-\ntainers against well-known security best practices. You can download the CIS\nDocker Benchmark from https://github.com/dev-sec/cis-docker-benchmark.\n\n= Dev-Sec.io: This tool allows you to automatically apply hardening best prac-\ntices to different types of servers (see https://dev-sec.io).\n\n® Clair: This is an open source static analysis for Docker containers from\nCore-OS. You can download Clair from https://github.com/coreos/clair.\n\n= Dagda: This is another tool for performing static analysis of known vulner-\nabilities. You can download Dagda from https://github.com/eliasgranderubio/\ndagda.\n\n= docker-bench-security: This script, created by Docker, checks for common\nsecurity best practices when deploying Docker containers in production. You\ncan download this tool from https://github.com/docker/docker-bench-security.",
    "Page_70": "314\n\nL©\nrea\n\nCompTIA® PenTest+ Cert Guide\n\n= docker-explorer: This tool was created by Google to help analyze offline\nDocker file systems. It can be useful when performing forensic analysis of\nDocker containers. You can download it from https://github.com/google/\ndocker-explorer.\n\n= Notary: This open source project includes a server and a client for running\nand interacting with trusted containers. Notary is maintained by The Update\nFramework (TUF). You can obtain more information about Notary from\nhttps://github.com/theupdateframework/notary and information about TUF\nfrom https://theupdateframework.github.io.\n\n= oscap-docker: OpenSCAP (created by RedHat) includes the oscap-docker\ntool, which is used to scan Docker containers and images. OpenSCAP and the\noscap-docker tool can be downloaded from https://github.com/OpenSCAP/\nopenscap.\n\nMobile Device Security\n\nMobile device security is a hot topic today. Individuals and organizations are increas-\ningly using mobile devices for personal use and to conduct official business. Because\nof this, the risk in mobile devices and applications continues to increase.\n\nThe OWASP organization created the Mobile Security Project to provide mobile\napplication and platform developers, as well as security professionals, resources\nto understand cybersecurity risks and to build and maintain secure mobile\napplications. The OWASP Mobile Security Project website can be accessed at\nhttps://www.owasp.org/index.php/OWASP_Mobile_Security_Project.\n\nOWASP often performs studies of the top mobile security threats and vulnerabilities.\nAccording to OWASP, the top 10 mobile security risks at the time of this writing are:\n\n= Improper platform usage\n= Insecure data storage\n\n= Insecure communication\n= Insecure authentication\n= Insufficient cryptography\n= Insecure authorization\n\n= Client code quality\n\n= Code tampering\n\n= Reverse engineering\n\n= Extraneous functionality",
    "Page_71": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\nMobile applications (apps) run either directly on a mobile device, on a mobile device\nweb browser, or both. Mobile operating systems (such as Android and Apple iOS)\noffer software development kits (SDKs) for developing applications (such as those\nfor games, productivity, business, and more). These mobile apps, referred to as native\napps, typically provide the fastest performance with the highest degree of reliability\nand adhere to platform-specific design principles.\n\nMobile web apps are basically websites designed to look and feel like native apps.\nThese apps are accessed by a user via a device’s browser and are usually developed in\nHTMLS and responsive mobile frameworks. Another option, a hybrid app, executes\nlike a native app, but a majority of its processes rely on web technologies.\n\nA lot of attacks against mobile apps start with reverse engineering and then move\ninto tampering with the mobile app. Reverse engineering involves analyzing the\ncompiled app to extract information about its source code. The goal of reverse engi-\nneering is to understand the underlying code and architecture. Tampering is the\nprocess of changing a mobile app (either the compiled app or the running process)\nor its environment to affect its behavior. In order to perform good reverse engineer-\ning of mobile apps, you should become familiar with the mobile device processor\narchitecture, the app executable format, and the programming language used to\ndevelop a mobile app.\n\nModern apps often include controls that hinder dynamic analysis. Certificate pin-\nning and end-to-end (E2E) encryption sometimes prevent you from intercepting or\nmanipulating traffic with a proxy. Root detection could prevent an app from running\non a rooted device, preventing you from using advanced testing tools.\n\nNOTE Mobile apps that implement the protections specified in the Mobile AppSec\nVerification Standard (MASVS) Anti-Reversing Controls should withstand reverse\nengineering to a certain degree. Details about MASVS can be accessed at\nhttps://www.owasp.org/images/6/61/MASVS_v0.9.4.pdf.\n\nThere are a few basic tampering techniques:\n\n= Binary patching (“modding”): This involves changing the compiled app\nin binary executables or tampering with resources. Modern mobile operat-\ning systems such as iOS and Android enforce code signing to mitigate binary\ntampering.\n\n= Code injection: This allows you to explore and modify processes at runtime.\nSeveral tools, including Cydia Substrate (http://www.cydiasubstrate.com),\nFrida (https://www.frida.re), and XPosed (https://github.com/rovo89/\nXposedInstaller), give you direct access to process memory and important\nstructures such as live objects instantiated by the app.\n\n315",
    "Page_72": "316\n\nLG\n\nCompTIA® PenTest+ Cert Guide\n\n= Static and dynamic binary analysis: This is done using disassemblers and\ndecompilers to translate an app’s binary code or bytecode back into a more\nunderstandable format. By using these techniques on native binaries, you can\nobtain assembler code that matches the architecture for which the app was\ncompiled.\n\n= Debugging and tracing: It is possible to identify and isolate problems in a\nprogram as part of the software development life cycle. The same tools used\nfor debugging are valuable to reverse engineers even when identifying bugs\nis not their primary goal. Debuggers enable program suspension at any point\nduring runtime, inspection of the process’s internal state, and even register and\nmemory modification.\n\nUnderstanding Android Security\n\nAndroid is a Linux-based open source platform developed by Google as a mobile\noperating system. Android is not only used in mobile phones and tablets but also\nin wearable products, TVs, and many other smart devices. Android-based solutions\ncome with many pre-installed (“stock”) apps and support installation of third-party\napps through the Google Play store and other marketplaces.\n\nAndroid’s software stack is composed of several different layers (see https://source\n-android.com/devices/architecture). Each layer defines interfaces and offers specific\nservices. At the lowest level, Android is based on a variation of the Linux kernel. On\ntop of the kernel, the Hardware Abstraction Layer (HAL) defines a standard inter-\nface for interacting with built-in hardware components. Several HAL implementa-\ntions are packaged into shared library modules that the Android system calls when\nrequired. This is how applications interact with the device’s hardware (for instance,\nhow a phone uses the camera, microphone, and speakers).\n\nAndroid apps are usually written in Java and compiled to Dalvik bytecode, which\nis somewhat different from the traditional Java bytecode. The current version of\nAndroid executes this bytecode on the Android runtime (ART). ART is the succes-\nsor to Android’s original runtime, the Dalvik virtual machine. The key difference\nbetween Dalvik and ART is the way the bytecode is executed (see https://source\n-android.com/devices/tech/dalvik/).\n\nAndroid apps do not have direct access to hardware resources, and each app runs\nin its own sandbox (see https://source.android.com/security/app-sandbox). The\nAndroid runtime controls the maximum number of system resources allocated to\napps, preventing any one app from monopolizing too many resources.",
    "Page_73": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 317\n\nEven though the Android operating system is based on Linux, it doesn’t implement\nuser accounts in the same way other Unix-like systems do. In Android, the multiuser\nsupport of the Linux kernel extends to sandbox apps: With a few exceptions, each\napp runs as though under a separate Linux user, effectively isolated from other apps\nand the rest of the operating system.\n\nTIP ‘The file android_filesystem_config-h includes a list of the predefined users and\ngroups to which system processes are assigned. User IDs (UIDs) for other applica-\ntions are added as they are installed.\n\nAndroid apps interact with system services such as the Android Framework and\nrelated APIs. Most of these services are invoked via normal Java method calls and\nare translated to IPC calls to system services that are running in the background.\nExamples of system services include the following:\n\n= Network connectivity, including Wi-Fi, Bluetooth, and NFC\n= Cameras\n= Geolocation (GPS)\n\n= Device microphone\n\nThe framework also offers common security functions, such as cryptography.\n\nThe Android Package Kit (APK) file is an archive that contains the code and\nresources required to run the app it comes with. This file is identical to the original\nsigned app package created by the developer. The installed Android apps are typi-\ncally located at /data/app/[package-name].\n\nThe following are some key Android files:\n\n= AndroidManifest.xml: This file contains the definition of the app’s package\nname, target, and minimum API version, app configuration, components, and\nuser-granted permissions.\n\n= META-INF: This file contains the application’s metadata and the following\nthree files:\n\n= MANIFEST.MF: This file stores hashes of the app resources.\n= CERT RSA: This file stores the app’s certificate(s).\n\n= CERTSF: This file lists resources and the hash of the corresponding\nlines in the MANIFEST.MF file.",
    "Page_74": "318\n\nCompTIA® PenTest+ Cert Guide\n\n= assets: This directory contains app assets (files used within the Android app,\nsuch as XML files, JavaScript files, and pictures), which the AssetManager can\n\nretrieve.\n\n= classes.dex: This directory contains classes compiled in the DEX file format\nthat the Dalvik virtual machine/Android runtime can process. DEX is Java\nbytecode for the Dalvik virtual machine, and it is optimized for small devices.\n\n= lib: This directory contains native compiled libraries that are part of the APK,\nsuch as the third-party libraries that are not part of the Android SDK.\n\n= res: This directory contains resources that haven’t been compiled into\nresources.arsc.\n\n™ resources.arse: This file contains precompiled resources, such as XML files\nfor layout.\n\nAndroidManifest.xml is encoded into binary XML format, which is not readable\nwith a text editor. However, you can unpack an Android app by using Apktool.\nWhen you run Apktool with the default command-line flags, it automatically\ndecodes the manifest file to text-based XML format and extracts the file resources.\nThe following are the typical decoded and extracted files:\n\n= AndroidManifest.xml: This is the decoded manifest file, which can be opened\nand edited in a text editor.\n\n= apktool.yml: This file contains information about the output of Apktool.\n\n® original: This folder contains the MANIFEST.MF file, which stores informa-\ntion about the files contained in the JAR file.\n\n= res: This directory contains the app’s resources.\n\n= smalidea: This is a Smali language plugin. Smali is a human-readable repre-\nsentation of the Dalvik executable. Every app also has a data directory for stor-\ning data created during runtime. Additional information about smalidea can be\nobtained from https://github.com/JesusFreke/smali/wiki/smalidea.\n\n= cache: This location is used for data caching. For example, the WebView cache\nis found in this directory.\n\n= code_cache: This is the location of the file system’s application-specific cache\ndirectory that is designed for storing cached code. On devices running Lol-\nlipop or later Android versions, the system deletes any files stored in this loca-\ntion when the app or the entire platform is upgraded.\n\n= databases: This folder stores SQLite database files generated by the app at\nruntime (for example, user data files).",
    "Page_75": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 319\n\n= files: This folder stores regular files created by the app.\n\n= lib: This folder stores native libraries written in C/C++. These libraries can\nhave one of several file extensions, including .so and .dll (x86 support). This\nfolder contains subfolders for the platforms for which the app has native\nlibraries, including the following:\n\n= armeabi: Compiled code for all ARM-based processors\n\n= armeabi-v7a: Compiled code for all ARM-based processors, version 7\nand above only\n\n= arm64-v8a: Compiled code for all 64-bit ARM-based processors,\nversion 8 and above only\n\nx86: Compiled code for x86 processors only\n= x86_64: Compiled code for x86_64 processors only\n\n= mips: Compiled code for MIPS processors\n\n= shared_prefs: This folder contains an XML file that stores values saved via\nthe SharedPreferences APIs.\n\nAndroid leverages Linux user management to isolate apps. This approach is differ-\nent from user management in traditional Linux environments, where multiple apps\nare often run by the same user. Android creates a unique UID for each Android app\nand runs the app in a separate process. Consequently, each app can access its own\nresources only. This protection is enforced by the Linux kernel. Typically, apps are\nassigned UIDs in the range 10000 and 19999. An Android app receives a user name\nbased on its UID. For example, the app with UID 10188 receives the username\nu0_a188. If the permissions an app requested are granted, the corresponding group\nID is added to the app’s process. For example, the user ID of the app in this exam-\nple is 10188. It belongs to the group ID 3003 (inet). That group is related to the\nandroid.permission. INTERNET permission in the application manifest.\n\nApps are executed in the Android Application Sandbox, which separates the app data\nand code execution from other apps on the device. This separation adds a layer of\nsecurity. Installation of a new app creates a new directory named after the app pack-\nage (for example, /data/data/[package-name]). This directory holds the app’s data.\nLinux directory permissions are set such that the directory can be read from and\nwritten to only with the app’s unique UID.\n\nThe process Zygote starts up during Android initialization. Zygote is a system ser-\nvice for launching apps. The Zygote process is a base process that contains all the\ncore libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/",
    "Page_76": "320\n\nCompTIA® PenTest+ Cert Guide\n\nzygote and listens for connections from local clients. When it receives a connection,\nit forks a new process, which then loads and executes the app-specific code.\n\nIn Android, the lifetime of an app process is controlled by the operating system. A\nnew Linux process is created when an app component is started and the same app\ndoesn’t yet have any other components running. Android may kill this process when\nthe process is no longer necessary or when it needs to reclaim memory to run more\nimportant apps. The decision to kill a process is primarily related to the state of the\nuser’s interaction with the process.\n\nAndroid apps are made of several high-level components, including the following:\n= Activities\n= Fragments\n= Intents\n= Broadcast receivers\n\n= Content providers and services\n\nAll these elements are provided by the Android operating system, in the form of pre-\ndefined classes available through APIs.\n\nTIP During development, an app is signed with an automatically generated certifi-\ncate. This certificate is inherently insecure and is for debugging only. Most stores\ndon’t accept this kind of certificate for publishing; therefore, a certificate with more\nsecure features must be created. When an application is installed on the Android\ndevice, PackageManager ensures that it has been signed with the certificate included\nin the corresponding APK. If the certificate’s public key matches the key used to sign\nany other APK on the device, the new APK may share a UID with the preexisting\nAPK. This facilitates interactions between applications from a single vendor. Alter-\nnatively, specifying security permissions for the Signature protection level is possible;\nthis restricts access to applications that have been signed with the same key.\n\nTo perform detailed analysis of Android applications, you can download Android\nStudio. It comes with the Android SDK, an emulator, and an app to manage the var-\nious SDK versions and framework components. Android Studio also comes with the\nAndroid Virtual Device (AVD) Manager application for creating emulator images.\nYou can download Android Studio from https://developer.android.com/studio.\n\nFigure 7-13 shows a screenshot of an application called OmarsApplication being\ndeveloped using Android Studio.",
    "Page_77": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n\n \n\n    \n   \n\nLe Omenepteaten app een Spm Day OH eer Seaman Merete Aoe-b)O@soG8 #8 Lag\nGetermenie |e rcmetornrane  Batiregute © imine © neoridrrrtne |\n\npucnage org. cba ar-oarsapp cation; .\n\nmo\n\n \n\n \n\nFIGURE 7-13 Android Studio\n\nFor dynamic analysis, you need an Android device to run the target app. In prin-\nciple, however, you can do without a real Android device and test on the emulator.\nFigure 7-14 shows the Android emulator that comes with Android Studio.\n\n \n\n*, (awe kana\n\n{eOmanAapteaton 509 Sew time snares ne\n\ne\n\n]\n\ncm oe TT\n\ngo04 Pn BO09048\n\n \n\n8 hems\n\n2 tems\n\nsee a te\n10 ten 10\n\n \n\n \n\n \n\n \n\ntorre TE) oct oweraarene ane 9100\n| Perwrng tm rane owe mts a mane een Yr nye Aaa charge a We ont ni id tae i\n\nFIGURE 7-14 Android Emulator\n\n321",
    "Page_78": "322 CompTIA® PenTest+ Cert Guide\n\n‘Testing on a real device makes for a smoother process and a more realistic environ-\nment. However, emulators provide a lot of convenience and flexibility.\n\nDevelopers and users often root their real devices to get full control over the oper-\nating system and to bypass restrictions such as app sandboxing. These privileges in\nturn allow individuals to use techniques like code injection and function hooking\nmore easily. Rooting is risky and can void the device warranty. You might end up\n“bricking” a device (rendering it inoperable and unusable) if you run into problems\nwhen rooting the device. More importantly, rooting a device creates additional secu-\nrity risks because built-in exploit mitigations are often removed.\n\nTIP You should not root a personal device on which you store your private informa-\ntion. It is recommended to use a cheap, dedicated test device instead.\n\nFigure 7-15 demonstrates how to use Apktool to decode and analyze the Android\napplication OmarsApplication.\n\nrota: -/Downlanse pp ronaa\n\nchemas.android.com/apk/res/android” packa\n\nra ag android: ic\nSee TiC Me LCL Cert ciaet teeta\n\nesc ea\n\nwae\n\nRe ce\nandroid: theme\nee\n\n \n\nFIGURE 7-15 Using Apktool\n\nNOTE ‘The source code for this sample application can be accessed at\nhttps://github.com/The-Art-of-Hacking/art-of-hacking.",
    "Page_79": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 323\n\nA few tools and frameworks are designed to test Android-based systems and related\napplications:\n\n= Androick: This collaborative research project allows any user to analyze an\nAndroid application. You can download Androick from https://github.com/\nFlo354/Androick.\n\n= NowSecure App Testing: This is a mobile app security testing suite for\nAndroid and iOS mobile devices. There are two versions: a commercial\nedition and a community (free) edition. You can obtain more informa-\ntion about NowSecure from https://www.nowsecure.com/solutions/\nmobile-app-security-testing.\n\n= OWASP SeraphimDroid: This privacy and device protection application\nfor Android devices helps users learn about risks and threats coming from\nother Android applications. SeraphimDroid is also an application firewall\nfor Android devices that blocks malicious SMS or MMS from being sent,\nUnstructured Supplementary Service Data (USSD) codes from being\nexecuted, or calls from being called without user permission and\nknowledge. You can obtain more information about SeraphimDroid from\nhttps://www.owasp.org/index.php/OWASP_SeraphimDroid_Project.\n\nUnderstanding Apple iOS Security CaN\nTopic\n\nThe iOS operating system runs only in Apple mobile devices, including the iPhone,\niPad, and iPods. Apple tvOS has inherited many architectural components and\nfeatures from iOS. iOS apps run in a restricted environment and are isolated from\neach other at the file system level. iOS apps are also significantly limited in terms of\nsystem API access compared to macOS and other operating systems. Apple restricts\nand controls access to the apps that are allowed to run on iOS devices. The Apple\nApp Store is the only official application distribution platform.\n\niOS apps are isolated from each other via the Apple sandbox and mandatory access\ncontrols defining the resources an app is allowed to access. iOS offers very few\nIPC options compared to Android, which significantly reduces the attack surface.\nUniform hardware and tight hardware/software integration create another security\nadvantage.\n\nThe iOS security architecture consists of six core features:\n= Hardware security\n= Secure boot\n\n= Code signing",
    "Page_80": "324\n\nCompTIA® PenTest+ Cert Guide\n\n= Sandbox\n= Encryption and data protection\n\n= General exploit mitigations\n\nEvery iOS device has two built-in Advanced Encryption Standard (AES) 256-bit\nkeys (GID and UID). These keys are included in the application processor and\nsecure enclave during manufacturing. There’s no direct way to read these keys with\nsoftware or debugging interfaces such as JTAG. The GID is a value shared by all\nprocessors in a class of devices that is used to prevent tampering with firmware files.\nThe UID is unique to each device and is used to protect the key hierarchy that’s used\nfor device-level file system encryption. UIDs are not created during manufacturing,\nand not even Apple can restore the file encryption keys for a particular device.\n\nThe Apple secure boot chain consists of the kernel, the bootloader, the kernel exten-\nsions, and the baseband firmware. Apple has also implemented an elaborate DRM\nsystem to make sure that only Apple-approved code runs on Apple devices. FairPlay\nCode Encryption is applied to apps downloaded from the App Store. FairPlay was\ndeveloped as a DRM for multimedia content purchased through iTunes.\n\nThe App Sandbox is an iOS sandboxing technology. It is enforced at the kernel\nlevel and has been a core security feature since the first release of iOS. All third-\nparty apps run under the same user (mobile), and only a few system applications\nand services run as root. Regular iOS apps are confined to a container that restricts\naccess to the app’s own files and a very limited number of system APIs. Access to all\nresources (such as files, network sockets, IPCs, and shared memory) is controlled\nby the sandbox. In addition, iOS implements address space layout randomization\n(ASLR) and the eXecute Never (XN) bit to mitigate code execution attacks.\n\niOS developers cannot set device permissions directly; they do so by using APIs. The\nfollowing are a few examples of APIs and resources that require user permission:\n\n= Contacts\n\nMicrophone\n\nCalendars\n\nCamera\n\nReminders\n\nHomeKit\n\nPhotos\n\nHealthKit\n\nMotion activity and fitness",
    "Page_81": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 325\n\n= Speech recognition\n= Location Services\n= Bluetooth\n\n= Media library\n\n= Social media accounts\n\nThere are a few tools you can use to practice security testing on mobile devices. One\n\nof the most popular is the Damn Vulnerable iOS application, a project that provides an\niOS application to practice mobile attacks and security defenses. It has a set of challenges\nthat can be completed by an individual. Each challenge area corresponds to an in-depth\narticle designed to teach the fundamentals of mobile security on the iOS platform. The\nfollowing are examples of the challenges in the Damn Vulnerable iOS application:\n\n= Insecure Data Storage\n\n@ Jailbreak Detection\n\n= Runtime Manipulation\n\n= Transport Layer Security\n\n= Client-Side Injection\n\n= Broken Cryptography\n\n= Binary Patching\n\n= Side Channel Data Leakage\n\n= Security Decisions via Untrusted Input\nA learning tool for iOS security that is very popular and maintained by OWASP is\niGoat. iGoat was inspired by the OWASP WebGoat project and has a similar con-\n\nceptual flow. iGoat is free software, released under the GPLv3 license. iGoat can be\ndownloaded from https://www.owasp.org/index.php/OWASP_iGoat_Tool_Project.\n\nAnother tool is the MobiSec Live Environment Mobile Testing Framework. MobiSec\nis a live environment for testing mobile environments, including devices, applications,\nand supporting infrastructure. The purpose is to provide attackers and defenders the\nability to test their mobile environments to identify design weaknesses and vulnerabili-\nties. MobiSec can be downloaded from https://sourceforge.net/projects/mobisec.\n\nMITRE started a collaborative research project focused on open source iOS secu-\nrity controls called iMAS. iMAS was created to protect iOS applications and data\nbeyond the Apple-provided security model and reduce the attack surface of iOS\nmobile devices and applications. The source code for iMAS is available on GitHub\nat https://github.com/project-imas.",
    "Page_82": "326\n\nKe’\n\nCompTIA® PenTest+ Cert Guide\n\nUnderstanding Physical Security Attacks\n\nPhysical security is a very important element when defending an organization\nagainst any security risk. The following sections provide an overview of physical\ndevice security and facilities/building security concepts.\n\nUnderstanding Physical Device Security\n\nAttackers with physical access to a device can perform a large number of attacks.\nOf course, device theft is one of the most common risks and the main reason it is\nimportant to encrypt workstations, laptops, and mobile devices as well as to enable\nremote wipe and remote recovery features. On the other hand, a few more sophisti-\ncated attacks and techniques can be carried out, including the following:\n\n= Cold boot attacks: Cold boot is a type of side channel attack in which the\nattacker tries to retrieve encryption keys from a running operating system after\nusing a cold reboot (system reload). Cold boot attacks attempt to compromise\nthe data remanence property of DRAM and SRAM to retrieve memory con-\ntents that could remain readable in the seconds to minutes after power has\nbeen removed from the targeted system. Typically, this type of attack by using\nremovable media to boot a different operating system used to dump the con-\ntents of pre-boot physical memory to a file.\n\n= Serial console debugging, reconnaissance, and tampering: Many organiza-\ntions use terminal servers (serial console servers) to allow remote access to the\nserial port of another device over a network. These devices provide remote\naccess to infrastructure devices (for example, routers, switches), servers, and\nindustrial control systems. They are also used to provide out-of-band access\nto network and power equipment for the purpose of recovery in the case of an\noutage. Many serial devices do not require authentication and instead assume\nthat if you are physically connected to a serial port, you probably are assumed\nto be allowed to configure and connect to the system. Clearly, this can be\nabused by any attacker to gain access to a victim system. Even if terminal serv-\ners may allow you to connect using a non-privileged account, attackers can use\nunprotected serial consoles for reconnaissance and debugging to then perform\nfurther attacks on the targeted system.\n\n= JTAG debugging, reconnaissance, and tampering: JTAG is a hardware\naccess interface that allows a penetration tester to perform debugging of hard-\nware implementations. Debuggers can use JTAG access registers, memory\ncontents, and interrupts, and they can even pause or redirect software instruc-\ntion flows. JTAG can be an effective attack research tool because it allows\ndebugging software (such as OpenOCD) control over a JTAG interface.\nOpenOCD can be used to manipulate the JTAG’s TAP controller and to send",
    "Page_83": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 327\n\nbits to a state machine with the goal of the chip being able to interpret them\nas valid commands. These types of tools allow you to debug firmware and soft-\nware in devices via the GNU Project Debugger (GDB) or even interact with\nother tools like IDA Pro and other disassemblers and debuggers.\n\nClearly, an attacker with physical access to the targeted system has an advantage.\nPhysical security to protect buildings and facilities is therefore crucial. In the next\nsection, you will learn details about different physical security threats and attacks\nagainst buildings and facilities.\n\nProtecting Your Facilities Against Physical Security Attacks\nBeye) (e\n\nNumerous types of attacks can be carried to infiltrate facilities and to steal sensitive\ninformation from an organization. The following are some of the most common\nof them:\n\n= Piggybacking/tailgating: An unauthorized individual may follow an autho-\nrized individual to enter a restricted building or facility.\n\n= Fence jumping: An unauthorized individual may jump a fence or a gate to\nenter a restricted building or facility.\n\n= Dumpster diving: An unauthorized individual may search for and attempt to\ncollect sensitive information from the trash.\n\n= Lockpicking: An unauthorized individual may manipulate or tamper with\na lock to enter a building or obtain access to anything that is protected by a\nlock. Lock bypass is a technique used in lockpicking. Locks may be bypassed\nin many ways, including by using techniques such as simple loiding attempts\n(using a “credit card” or similar items against self-closing “latch” locks) and\nbypassing padlocks by shimming.\n\n= Egress sensors: Attackers may tamper with egress sensors to open doors.\n\n= Badge cloning: Attackers may clone the badges of employees and authorized\nindividuals to enter a restricted facility or a specific area in a building. One\n\nof the most common techniques is to clone radio-frequency identification\n(RFID) tags (refer to Chapter 5).\n\nExam paration Tasks\n\nAs mentioned in the section “How to Use This Book” in the Introduction, you have\na couple of choices for exam preparation: the exercises here, Chapter 11, “Final Prep-\naration,” and the exam simulation questions in the Pearson Test Prep software online.",
    "Page_84": "328 CompTIA® PenTest+ Cert Guide\n\nReview All Key Topics\n\nReview the most important topics in this chapter, noted with the Key Topics icon in\nthe outer margin of the page. Table 7-3 lists these key topics and the page number\non which each is found.\n\n \n\nCo Table 7-3 Key Topics for Chapter 7\nAy) [4\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nKey Topic Description Page\nElement Number\nSummary Understanding insecure service and protocol configurations 281\nSummary Understanding local privilege escalation 285\nSummary Understanding Linux permissions 286\nSummary Changing Linux permissions and understanding sticky bits 288\nSummary Understanding SUID or SGID and Unix programs 291\nSummary Identifying insecure Sudo implementations 294\nSummary Understanding ret2libc attacks 298\nSummary Defining CPassword 299\nSummary Abusing and obtaining clear-text LDAP credentials 300\nSummary Understanding Kerberoasting 301\nSummary Compromising credentials in Local Security Authority Subsystem 301\nService (LSASS) implementations\n\nSummary Understanding and attacking the Windows SAM database 302\nSummary Understanding dynamic link library (DLL) hijacking 303\nSummary Abusing exploitable services 304\nSummary Exploiting insecure file and folder permissions 305\nSummary Defining and understanding keyloggers 306\nSummary Defining and understanding scheduled tasks 307\nSummary Understanding sandbox escape attacks 308\nSummary Understanding virtual machine (VM) escape attacks 310\nSummary Identifying container security challenges 313\nSummary Understanding the top mobile security threats and vulnerabilities 314\nSummary Understanding Android security 316\nSummary Understanding Apple iOS security 323\nSummary Understanding cold boot attacks, serial console, and JTAG 326\n\ndebugging reconnaissance and tampering\n\n \n\n \n\nSummary Understanding physical security attacks 327",
    "Page_85": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities 329\n\nDefine Key Terms\n\nDefine the following key terms from this chapter and check your answers in the\nglossary:\n\npiggybacking, tailgating, fence jumping, dumpster diving, lockpicking,\nlock bypass, JTAG, sandbox, keylogger, Group Policy Object (GPO),\nKerberoast, CPassword, Ret2libce\n\nQ&A\n\nThe answers to these questions appear in Appendix A. For more practice with exam\nformat questions, use the Pearson Test Prep software online.\n\n1. Which of the following involves an unauthorized individual searching and\nattempting to collect sensitive information from the trash?\na. Piggybacking\nb. Fence jumping\nc. Dumpster diving\nd. Lockpicking\n2. Which of the following is a technique that is executed using disassemblers and\n\ndecompilers to translate an app’s binary code or bytecode back into a more or\nless understandable format?\n\na. Static and dynamic binary analysis\nb. Static and dynamic source code analysis\nc. Binary patching, or “modding”\n\nd. Binary code injection\n\n3. Which of the following is a sandbox built in the Linux kernel to only allow the\nwrite(), read(), exit(), and sigreturn() system calls?\n\na. SUDI\nb. Seccomp\n\nc. SELinux\n\n. Linux-jail\n\nQa",
    "Page_86": "330 CompTIA® PenTest+ Cert Guide\n\n4. Which of the following statements is not true?\na. Modern web browsers provide sandboxing capabilities to isolate exten-\nsions and plugins.\nb. HTMLS has a sandbox attribute for use with iframes.\n\nc. Java virtual machines include a sandbox to restrict the actions of\nuntrusted code, such as a Java applet.\n\nd. Microsoft’s .NET Common Language Runtime cannot enforce restric-\ntions on untrusted code.\n\n5. Which of the following can attackers use to capture every keystroke of a user\nin a system and steal sensitive data (including credentials)?\n\na. RATS\nb. Keybinders\nc. Keyloggers\n\nd. Ransomware\n\n6. Which of the following functionalities can an attacker abuse to try to elevate\nprivileges if the service is running under SYSTEM privileges?\n\na. Unquoted service paths\n\nb. Unquoted PowerShell scripts\n\nc. Writable SYSTEM services using the GetSystemDirectory function\nd. Cross-site scripting (XSS)\n\n7. Which of the following is not a place where Windows stores password hashes?\na. SAM database\nb. LSASS\nc. PowerShell hash store\n\nd. AD database\n\n8. Which of the following is an open source tool that allows an attacker to\nretrieve user credential information from the targeted system and potentially\nperform pass-the-hash and pass-the-ticket attacks?\n\na. SAM Stealer\nb. Mimikatz\nc. Kerberoast\n\nd. Hashcrack",
    "Page_87": "This page intentionally left blank",
    "Page_88": "Index\n\nA\nAC (Attack Complexity) metrics, 37\nacceptance of risk, 48\nAccess Vector (AV) metrics, 37\naccount data, elements of, 55\nacquirers, 54\nActivate Exam button (Pearson Test\nPrep software), 507\nActivate New Product button (Pearson\nTest Prep software), 506\nactive reconnaissance\ndefined, 70-71\nEnum4linux, 395-400\nenumeration\ndefined, 71\ngroup, 81-82\nhost, 78-79\nnetwork share, 82\npacket crafting, 85-87\nservice, 85\nuser, 80-81\nweb page/web application, 83-84\nNikto scans, 84\nNmap port scans, 391-393\nhalf-open, 71-72\nping, 77-78\nSYN, 71-72\nTCP connect, 73-74\nTCP FIN, 76-77\nUDP, 74-75\nRecon-ng, 90-102\nhackertarget module, 96\nhelp menu, 92\n\nkey list command, 96-97\nlaunching, 91\nmain menu and splash page, 91\nsearches, 95\nShodan API, 96-102\nshow modules command, 92-95\nZenmap, 393-395\nadapters, wireless, 189\nAdd-Persistence script, 351\nAddress Resolution Protocol. See ARP\n(Address Resolution Protocol)\naddress space layout randomization\n(ASLR), 298, 324\nADIA (Appliance for Digital\nInvestigation and Analysis), 457\nAdobe Reader, 309\nAdvanced Encryption Standard (AES),\n324\nadvertisements, malvertising, 127-128\nAES (Advanced Encryption Standard),\n324\nAFL (American Fuzzy Lop), 459\nAircrack-ng suite, 186-189, 191-196\nAireplay-ng, 188, 191, 194-195\nAirmon-ng, 186-187, 191, 194\nAirodump-ng, 188, 191, 194-195\nalgorithms\ncryptographic, 243-244\nLuhn, 55\nALTER DATABASE statement,\n228\nALTER TABLE statement, 228\nAmerican Fuzzy Lop (AFL), 459",
    "Page_89": "542\n\namplification DDoS (distributed denial-of-service) attacks\n\namplification DDoS (distributed denial-\nof-service) attacks, 178-179\nAnchore, 313\nAndersson, Bjorn, 441\nAndroick, 323\nAndroid\nandroid_filesystem_config.h file, 317\nAndroidManifest.xml file, 317\nAPK (Android Package Kit), 317\nAVD (Android Virtual Device)\nManager, 320\nsecurity, 316-323\nAPIs (application programming\ninterfaces), 40\nAPI-based keyloggers, 307\ndocumentation, 40\nESAPI (Enterprise Security API), 240\nRESTful (REST), 269\nShodan, 96-102, 378-380\nunprotected, 267-270\nAPK (Android Package Kit), 317\nApktool, 322\napktool.yml file, 318\nappetite for risk, 49-50\nApple\niOS security, 323-325\nRemote Desktop, 348, 433\nAppliance for Digital Investigation and\nAnalysis (ADIA), 457\napplication-based vulnerabilities, 207\napproved scanning vendors (ASVs), 54\nAPs (access points), rogue, 185\nAqua Security, 313\narm64-v8a folder, 319\narmeabi folder, 319\narmeabi-v7a folder, 319\narmoring, ASCII, 298\nARP (Address Resolution Protocol)\ncache poisoning, 173-175\nspoofing, 173-175\nArt of Hacking GitHub repository, 225,\n346, 390, 395, 410, 454\n\nASCII armor region, 298\nASCII armoring, 298\nASLR (address space layout\nrandomization), 298, 324\nassets directory, 318\nASVs (approved scanning vendors), 54\nAttack Complexity (AC) metrics, 37\nattacks, 7-8. See also evasion techniques;\nprivilege escalation\nauthentication-based vulnerabilities\ncredential brute forcing, 243-245\ndefault credential exploits, 249-250\nKerberos exploits, 250\nredirect attacks, 249\nsession hijacking, 245-249\nauthorization-based vulnerabilities\nInsecure Direct Object Reference\nvulnerabilities, 251-252\nparameter pollution, 250-251\nclickjacking, 261\ncommand injection, 241-242\ncredential, 420\nCain and Abel, 424-425\nCeWL, 431-432\nHashcat, 425-427\nHydra, 428-429\nJohn the Ripper, 420-425\nJohnny, 425\nMedusa, 430-431\nMimikatz, 432\nNerack, 430-431\nPatator, 432-433\nRainbowCrack, 429-430\nCSRF (cross-site request forgery),\n260-261\ncurrent threat landscape, 7-9\nDDoS (distributed denial-of-service),\n8-9\nexploitation frameworks\nBeEF, 449-450\nMetasploit, 442-449\nfile inclusion vulnerabilities",
    "Page_90": "LFI (local file inclusion), 264\nRFI (remote file inclusion), 264-265\nHTML injection, 241\ninsecure code practices\ncode signing, lack of, 270\nerror-handling errors, 266\nhard-coded credentials, 266\nhidden elements, 270\nrace conditions, 266-267\nsource code comments, 265-266\nunprotected APIs, 267-270\ninsecure service and protocol\nconfigurations, 281-284\nto IoT devices, 8-9\nmobile device security, 314-316\nAndroid, 316-323\nApple iOS, 323-325\nOWASP Mobile Security Project,\n314\nnetwork-based vulnerabilities\nDDoS (distributed denial-of-service),\n178-179\nDHCP (Dynamic Host Control\nProtocol), 183-185\nDNS cache poisoning, 155-157\nDoS (denial-of-service), 176-177\nFTP (File Transfer Protocol),\n166-168\nKerberos, 169-172\nLDAP (Lightweight Directory\nAccess Protocol), 169-172\nman-in-the-browser attacks, 249\nMITM (man-in-the-middle) attacks,\n173-175, 193\nNAC (network access control)\nbypass, 179-180\nname resolution and SMB attacks,\n148-155\npass-the-hash attacks, 168-169,\n302-303\nroute manipulation attacks,\n175-176\n\nSQL injection 543\n\nSMB (Server Message Block),\n151-155, 157-159\nSMTP (Simple Mail Transfer\nProtocol), 159-166\nVLAN hopping, 181-183\nphysical, 326-327\nransomware\nNyeta, 354\nWannaCry, 8\nret2libe (“return-to-libc”), 298\nsecurity misconfigurations, 262\ncookie manipulation attacks,\n263-264\ndirectory traversal vulnerabilities,\n262-263\nsocial engineering, 11-12\ncharacteristics of, 125-126\nelicitation, 135\ninterrogation, 136\nmalvertising, 127-128\nmotivation techniques, 137\npharming, 126-127\nphishing, 126\npretexting, 136\nSET (Social-Engineer Toolkit),\n129-134\nshoulder surfing, 137\nSMS phishing, 134-135\nspear phishing, 128-134\nUSB key drop, 138\nvoice phishing, 135\nwhaling, 135\nSQL injection, 228\nblind, 237\nBoolean technique, 233, 237\ncategories of, 232-234\ndatabase fingerprinting, 234-235\nerror-based technique, 233\nexamples of, 228-232\nmitigations, 240\nout-of-band technique, 233, 237-238\nstored procedures, 239-240",
    "Page_91": "SQL injection\n\ntime-delay technique, 233, 239\nUNION operator technique, 233,\n235-236\nthreat actors, 9-10\nwireless and RF-based\ncredential harvesting, 199-200\ndeauthentication attacks, 186-189\nevil twin attacks, 185-186\nfragmentation attacks, 197-198\nIV (initialization vector) attacks,\n190\nKARMA attacks, 197\nKRACK (key reinstallation attack),\n196-197\nPNL (preferred network list) attacks,\n189\nRFID (radio-frequency\nidentification) attacks, 200\nrogue access points, 185\nsignal jamming, 189\nwar driving, 190\nWEP (Wired Equivalent Privacy)\nattacks, 190-192\nWPA (Wi-Fi Protected Access)\nattacks, 192-196\nWPS (Wi-Fi Protected Setup),\n197\nXSS (cross-site scripting)\nvulnerabilities, 252-253\nDOM -based XSS attacks, 256-257\nevasion techniques, 257-259\nreflected XSS attacks, 253-254\nstored XSS attacks, 255-256\nzero-day, 8\naudience for reports, identifying, 476-477\nAUTH command (SMTP), 161\nAuthd, 284\nauthenticated scans, 105\nauthentication\nAuthentication Cheat Sheet (OWASP),\n222, 246\nvulnerabilities\n\ncredential brute forcing, 243-245\ndefault credential exploits, 249-250\nKerberos, 169-172\nKerberos exploits, 250\nredirect attacks, 249\nsession hijacking, 245-249\nauthority, in social engineering, 137\nauthorization-based vulnerabilities\nInsecure Direct Object Reference\nvulnerabilities, 251-252\nparameter pollution, 250-251\nAV (Access Vector) metrics, 37\nAvailability Impact (A) metrics, 37\nAVD (Android Virtual Device) Manager,\n320\navoidance of risk, 49\n\nB\n\nackdoors, 238, 346\n\nacktracking, 262-263\n\nadge cloning, 327\n\nandwidth limitations, vulnerability\nscanning and, 111\n\nBane, 313\n\nase groups, 34-37\n\nash, 460-461\n\nasic service set identifiers (BSSIDs), 188\n\nBeEF, 449-450\n\nBGP hijacking attacks, 175\n\nBienaimé, Pierre, 441\n\nilateral NDAs (nondisclosure\nagreements), 43\n\ninary patching, 315\n\nBlack Hills Information Security, 90-91\n\nlack lists, 46\n\nBlackArch Linux, 224, 367-368\n\nlack-box tests, 12, 47\n\nlind shells, creating, 338-344\n\nlind SQL injection, 237\n\nBlowfish, 166\n\nlue teams, 46\n\nBluejacking, 199-200",
    "Page_92": "Bluesnarfing, 199-200\n\nBooleans, SQL injection with, 233, 237\nBorn, Kenton, 441\n\nbotnets, 177\n\nBourne-Again shell (bash), 460-461\nBreach Notification Rule, 52\n\nBSSIDs (basic service set identifiers), 188\nbudget, planning, 32-33\n\nBurp Suite, 41, 214\n\nBursztein, Elie, 138\n\nbusiness associates, 53\n\nbWAPP, 225\n\nCc\n\nC (Confidentiality Impact) metrics, 37\n\nC2 (command and control) utilities,\n344-345\n\ncache file, 318\n\ncache poisoning\n\nARP (Address Resolution Protocol),\n173-175\nDNS (Domain Name System),\n\n155-157\n\nCain and Abel, 424-425\n\nCAINE (Computer Aided Investigative\nEnvironment), 369, 457\n\nCAPEC (Common Attack Pattern\nEnumeration and Classification),\n114\n\ncard security codes, 56\n\ncardholder data environment, 55\n\ncat command, 343\n\nCAV? codes, 56\n\ncd command, 343, 350\n\nCensys, 389-390\n\nCERTRSA file, 317\n\nCERTSF file, 317\n\nCeWL, 431-432\n\nCFTC (Commodity Futures Trading\nCommission), 52\n\nchaining analysis, 37-38\n\nchmod command, 287-289\n\ncommands 545\n\nChoose a Tool dropdown (Dradis),\n484-485\nCID codes, 56\nCIFS (Common Internet File System),\n172\nCIS Docker Benchmark, 313\nCisco ETA (Encrypted Traffic Analytics),\n440\nCisco Smart Install, 281\nClair, 313\nclasses.dex directory, 318\nclassification, report, 499\ncleanup process, 356\nclearev command, 343\nclear-test credentials in LDAP, 300-301\nclickjacking, 261\nClickjacking Defense Cheat Sheet\n(OWASP), 261\nclients, HTTP (Hypertext Transfer\nProtocol), 213\ncode injection, 315\ncode practices, insecurity in\ncode signing, lack of, 270\nerror-handling errors, 266\nhard-coded credentials, 266\nhidden elements, 270\nrace conditions, 266-267\nsource code comments, 265-266\nunprotected APIs, 267-270\ncode_cache file, 318\ncold boot attacks, 326\nCollignon, Nicolas, 441\ncommand and control. See C2 (command\nand control) utilities\ncommand injection vulnerabilities,\n241-242\ncommands. See also scripts; tools\naireplay-ng, 188, 191, 194-195\nairmon-ng, 186-187, 191, 194\nairodump-ng, 191, 194\ncat, 343\ncd, 343, 350",
    "Page_93": "546 commands\n\nchmod, 287-289\nclearev, 343\n\ncontinue, 451\nCopy-Item, 349\n\ndig, 90, 371-372\ndownload, 343\n\nedit, 343\n\nexecute, 343\n\nfind, 292-293\nGet-ChildItem, 349\nGet-Command, 350\nGet-Content, 350\nGet-HotFix, 350\nGet-Location, 350\nGet-NetFirewallRule, 350\nGet-Process, 350\nGet-Service, 350\ngetsystem, 449\n\ngetuid, 343\n\ngroups, 294\n\nhashdump, 343, 448\nhost, 371-372\n\nid, 294\n\nidletime, 343\n\nipconfig, 343\n\njohn --list=formats, 420-421\njohn -show hashes, 423\nkey list, 96-97\n\nkeys add, 386\n\nkeys add shodan_api, 98\nkeys list, 386-387\n\ncd, 343\n\nist audit, 417-419\nocate, 423\n\npwd, 343\n\ns, 343, 350\n\nmigrate, 343\nMove-Item, 349\nmsfconsole, 90-91, 442\nmsfdb init, 443\nNew-NetFirewallRule, 350\nnmap\n\n \n\n-sF option, 76-77\n-sn option, 77-78\n-sS option, 71-72\n-sT option, 73-74\n-sU option, 74-75\nnslookup, 90, 156-157, 371-372\nps, 343\npwd, 343\nresource, 343\nrun, 451\nscapy, 86\nscreenshot, 448\nsearch, 343\nSelect-String, 349\nservice dradis start, 479\nset LHOST, 155\nset RHOST, 155\nsetoolkit, 129\nshell, 343\nshow info, 387-388\nshow modules, 383-386\nshow options, 155\nSMTP (Simple Mail Transfer\nProtocol), 160-163\nsudo, 286-287, 294-298\nsysinfo, 449\nupload, 343\nuse, 387-389\nuse exploit/windows/smb/ms17_010_\neternalblue, 155\nuseradd, 295\nusermod, 294-295\nvisudo, 296\nwebcam_list, 344\nwebcam_snap, 344\nwhois, 372-373\ncomments, exploiting, 265-266\nCommodity Futures Trading Commission\n(CFTC), 52\nCommon Attack Pattern Enumeration\nand Classification (CAPEC),\n114",
    "Page_94": "Common Internet File System (CIFS),\n172\nCommon Vulnerabilities and Exposures\n(CVE), 114-115\nCommon Vulnerability Scoring System\n(CVSS), 34-37, 494-495\nCommon Weakness Enumeration\n(CWE), 115\ncommunication escalation path, 31-32\ncommunications, reporting and, 500-501\nCommunity Edition (Dradis), 479\ncompliance scans, 109-110\ncompliance-based assessment, 45, 50\nfinancial sector regulations, 50-52\nhealthcare sector regulations, 52-53\nkey technical elements, 56-57\nlimitations of, 57-58\nPCI DSS (Payment Card Industry\nData Security Standard), 53-56\nComputer Aided Investigative\nEnvironment (CAINE), 369, 457\nConfidentiality Impact (C) metrics, 37\nconfidentiality of findings, 32\nCONNECT method (HTTP), 217\ncontainer security, 310-314\ncontinue command, 451\ncontracts, 41-42\ncookie manipulation attacks, 263-264\nCopy-Item command, 349\ncorporate policies, 43-44\ncovering tracks, 356\nCPassword attacks, 299\ncracking passwords. See password\ncrackers\nCREATE DATABASE statement, 228\nCREATE INDEX statement, 228\nCREATE TABLE statement, 228\ncredentials\nattacks, 420\nbrute forcing, 243-245\nCain and Abel, 424-425\nCeWL, 431-432\n\nDamn Vulnerable Web App (DVWA) 547\n\ncredential harvesting, 199-200\nHashcat, 425-427\nHydra, 428-429\nJohn the Ripper, 420-425\nMedusa, 430-431\nMimikatz, 432\nNerack, 430-431\nPatator, 432-433\nRainbowCrack, 429-430\nRFID (radio-frequency\nidentification) attacks, 200\nhard-coded, 266\nCri-o, 311\ncross-site scripting. See XSS (cross-site\nscripting) vulnerabilities\ncryptographic algorithms, 243-244\nCrysis, 8\nCSRF (cross-site request forgery), 260-261\ncurl, 221\ncustom daemons and processes, creating,\n346\nCVC2 codes, 56\nCVE (Common Vulnerabilities and\nExposures), 114-115\nCVSS (Common Vulnerability Scoring\nSystem), 34-37, 494-495\nCVV? codes, 56\nCWE (Common Weakness\nEnumeration), 115\ncyber ranges, 227\nCydia Substrate, 315\n\nD\n\ndaemons, creating, 346\n\nDagda, 313\n\nDalvik, 316\n\nDamn Vulnerable ARM Router (DVAR),\n225\n\nDamn Vulnerable iOS Application\n(DVIA), 225\n\nDamn Vulnerable Web App (DVWA),\n225",
    "Page_95": "548\n\nDATA command (SMTP)\n\nDATA command (SMTP), 160\ndata isolation, 56\ndatabase fingerprinting, 234-235\ndatabases, SAM (Security Account\nManager), 302-303\ndatabases folder, 318\nDDoS (distributed denial-of-service)\nattacks, 8-9\namplification, 178-179\nreflected, 178\ndeauthentication attacks, 186-189\ndebugging tools\nedb debugger, 452-454\nGDB (GNU Project Debugger),\n450-452\nImmunity, 454\nOllyDbg, 452-453\nWindows Debugger, 452\ndefault credential exploits, 249-250\ndefensive controls, 49\nDEFT (Digital Evidence & Forensics\nToolkit), 457\nDELETE method (HTTP), 217\nDELETE statement (SQL), 228\nDembour, Olivier, 441\ndenial-of-service (DoS) attacks, 176-177\nDeNiSe, 441\nDepartment of Health and Human\nServices (HHS), 52\nDES, 166\nDev-Sec.io, 313\nDHCP (Dynamic Host Control\nProtocol)\nspoofing, 183-185\nstarvation attacks, 183-185\ndig command, 90\nDig tool, 371-372\nDigital Evidence & Forensics Toolkit\n(DEFT), 457\nDirbuster, 419\ndirectory climbing, 262-263\nDirectory Information Tree (DIT), 170\n\ndirectory traversal vulnerabilities,\n262-263\ndisassemblers\nIDA, 454-455\nObjdump, 455-457\ndisclaimers, documentation of, 38-39\ndiscovery scans, 106\nDistinguished Name (DN), 170\ndistributed denial-of-service. See DDoS\n(distributed denial-of-service)\nattacks\ndistribution of reports, 499-500\nDIT (Directory Information Tree), 170\nDLL (dynamic link library) hijacking,\n303-304\nDN (Distinguished Name), 170\nDNS (Domain Name System)\ncache poisoning, 155-157\nDNSSEC (Domain Name System\nSecurity Extension), 157\nexfiltration, 440-442\ntunneling, 440-442\ndns2tcp, 441\nDNScapy, 441\nDNScat, 441\nDNScat2, 345, 441\nDNSdumpster, 88\nDNSRecon, 67-69\nDNSSEC (Domain Name System\nSecurity Extension), 157\nDocker, 310-313\ndocker-bench-security, 313\ndocker-explorer, 314\nDocument Object Model. See DOM\n(Document Object Model)\ndocumentation, 41\nAPI (application programming\ninterface), 268\nlegal\ncontracts, 41-42\nMSAs (master service agreements),\n42",
    "Page_96": "NDAs (nondisclosure agreements),\n43\nSOWs (statements of work), 42\npre-engagement\nbudget, 32-33\ncommunication escalation path,\n31-32\nconfidentiality of findings, 32\ndisclaimers, 38-39\nimpact analysis and remediation\ntimelines, 34-38\npoint-in-time assessment, 33\nrules of engagement, 30\ntarget audience, 29-30\ntechnical constraints, 39\nrules of engagement, 30\nsupport resources, 40-41\nDOM (Document Object Model)\nDOM-based XSS (cross-site scripting)\nattacks, 256-257\nstored DOM-based attacks,\n263-264\ndomain enumeration, 88-91\nDomain Name System. See DNS\n(Domain Name System)\nDoS (denial-of-service) attacks,\n176-177\ndot-dot-slash, 262-263\ndowngrade attacks, 175\ndownload command, 343\nDradis Framework\nChoose a Tool dropdown, 484-485\ndata import, 483\nimported scans, viewing, 488-490\nlaunching, 479\nlogin screen, 480\nnode organization, 486-488\nnode/subnode creation, 481-483\noutput file processing, 485-486\npassword creation, 479-480\nplugin.output node, 486\nProject Summary screen, 481\n\nemail threats 549\n\nUpload Manager screen, 484\nUpload Output from Tool option,\n483-484\nversions, 478-479\nDROP INDEX statement, 228\nDROP TABLE statement, 228\nDropboxC2 (DBC2), 345\nDual Elliptic Curve Deterministic\nRandom Bit Generator\n(Dual_EC_DRBG), 439\ndumpster diving, 327\nDVAR (Damn Vulnerable ARM Router),\n225\nDVIA (Damn Vulnerable iOS\nApplication), 225\nDVWA (Damn Vulnerable Web App), 225\ndynamic binary analysis, 316\nDynamic Host Control Protocol. See\nDHCP (Dynamic Host Control\nProtocol)\ndynamic link library (DLL) hijacking,\n303-304\nDynDNS service, 8-9\n\nE\n\nE (Exploit Code Maturity), 36\neavesdropping, packet, 90\nedb debugger, 452-454\nedit command, 343\negress sensors, 327\nEHLO command (SMTP), 160\nEkman, Erik, 441\nelectronic protected health information\n(ePHD), 53\nelicitation, 135\nemail threats\npharming, 126-127\nphishing, 126\nSMS phishing, 134-135\nspear phishing, 128-134\nvoice phishing, 135\nwhaling, 135",
    "Page_97": "550\n\nEmpire\n\nEmpire, 171, 353-354, 434\nEncrypted Traffic Analytics (ETA), 440\nEncryption, 439-440\nencryption\nAES (Advanced Encryption Standard),\n324\ncryptographic algorithms, 243-244\nengagement, rules of, 30\nEnterprise Security API (ESAPI), 240\nEnum4linux, 155, 395-400\nenumeration\ndefined, 71\ndomain, 88-91\ngroup, 81-82\nhost, 78-79\nnetwork share, 82\npacket crafting, 85-87\nservice, 85\nuser, 80-81\nweb page/web application, 83-84\nenvironmental groups, 34-37\nePHI (electronic protected health\ninformation), 53\nerror handling\nlack of, 266\nverbose, 266\nerror-based SQL injection, 233\nESAPI (Enterprise Security API), 240\nescalation of privileges. See privilege\nescalation\nescalation path, 31-32\nESSIDs (extended basic service set\nidentifiers), 188\nETA (Encrypted Traffic Analytics), 440\nEternalBlue exploit, 8, 154-155\nethical hacking\ndefined, 6-7\nimportance of, 7\nnonethical hacking compared to,\n6-7\nEttercap, 199\nEvan’s debugger, 452-454\n\nevasion techniques\nDNS tunneling, 440-442\nEncryption, 439-440\nProxychains, 439\nTor, 438-439\nVeil, 434-437\nXSS (cross-site scripting)\nvulnerabilities, 257-258\nevil twin attacks, 185-186\nexam preparation\nchapter-ending review tools, 509\nPearson Test Prep software, 505\nexam customization, 507-508\nexam updates, 508\noffline access, 506-507\nonline access, 505\nPremium Edition, 508-509\nstudy plans, 509\nexecute command, 343\neXecute Never (XN), 324\nexecutive summary section (reports),\n493\nexfiltration, DNS (Domain Name\nSystem), 440-442\nExifTool, 374-375\nExploit Code Maturity (E), 36\nThe Exploit Database, 151\nExploitability metrics, 35\nexploitable services, 304-305\nexploitation frameworks\nBeEF, 449-450\nMetasploit, 90-91, 115, 154-155,\n442-449\nMetasploit Unleashed course, 344\nMeterpreter, 299, 343-344,\n446-449\nRDP connections, creating, 348-349\nexploits. See attacks\nEXPN command (SMTP), 161\nexport restrictions, 43\nextended basic service set identifier\n(ESSID), 188",
    "Page_98": "F\nfalse negatives, 475-476, 477\nfalse positives, 475-476, 477, 495-496\nFBI (Federal Bureau of Investigation),\n439\nFDIC (Federal Deposit Insurance\nCorporation) Safeguards Act, 51\nfear, social engineering and, 137\nFederal Bureau of Investigation (FBI), 439\nFederal Deposit Insurance Corporation\n(FDIC) Safeguards Act, 51\nFederal Financial Institutions\nExamination Council (FFIEC), 51\nFederal Trade Commission (FTC), 52\nFeederbot and Moto, 442\nfence jumping, 327\nFFIEC (Federal Financial Institutions\nExamination Council), 51\nfile inclusion vulnerabilities\nLFI (local file inclusion), 264\nRFI (remote file inclusion), 264-265\nFile Transfer Protocol. See FTP (File\nTransfer Protocol)\nfiles\npermissions, insecurity in, 305\nSOAP (Simple Object Access Protocol),\n40\nfiles folder, 319\nFILS (Financial Institutions Letters), 51\nfinancial sector regulations, 50-52\nfind command, 292-293\nFind-AVSignature script, 351\nFindbugs, 458\nfindings, reporting, 495-497\nFindsecbugs, 458\nFinger, 284\nfingerprinting databases, 234-235\nFingerprinting Organizations with\nCollected Archives (FOCA), 374\nFIRST (Forum of Incident Response and\nSecurity Teams), 34, 37\nFIRSToorg, 494\n\nGet-NetFirewallRule command 551\n\nFOCA (Fingerprinting Organizations\nwith Collected Archives), 374\nfolder permissions, 305\nforensics tools, 457-458\nforgery, CSRF (cross-site request\nforgery), 260-261\nForum of Incident Response and Security\nTeams (FIRST), 34, 37\nfragile systems, vulnerability scans for,\n111-112\nfragmentation attacks, 197-198\nFrida, 315\nFTC (Federal Trade Commission), 52\nFTP (File Transfer Protocol)\nexploits, 166-168\nFTPS (File Transfer Protocol Secure),\n166\nfull scans, 106-108\nfunctions. See also commands\nGetSystemDirectory, 304\nGetWindowsDirectory, 304\nfuzz testing, 458\nfuzzers, 458\nAFL (American Fuzzy Lop), 459\nMutiny Fuzzing Framework, 459\nPeach, 459\n\nG\n\nGame of Hacks, 225\n\nGDB (GNU Project Debugger), 450-452\nGET method (HTTP), 215, 217\nGet-ChildItem command, 349\nGet-Command command, 350\nGet-Content command, 350\nGet-GPPAutologon script, 352\nGet-GPPPassword script, 352\nGet-HotFix command, 350\nGet-HttpStatus script, 352\nGet-Keystrokes script, 352\nGet-Location command, 350\nGet-MicrophoneAudio script, 352\nGet-NetFirewallRule command, 350",
    "Page_99": "552\n\nGet-Process command\n\nGet-Process command, 350\nGet-SecurityPackages script, 351\nGet-Service command, 350\ngetsystem command, 449\nGetSystemDirectory function, 304\nGet-TimedScreenshot script, 352\ngetuid command, 343\nGet-VaultCredential script, 352\nGet-VolumeShadowCopy script, 352\nGetWindowsDirectory function, 304\nGLBA (Gramm-Leach-Bliley Act), 51-52\nGNU Project Debugger (GDB),\n450-452\ngoals-based assessment, 45\ngolden ticket attacks (Kerberos), 170-172\nGPOs (Group Policy Objects), 305-306\nGPP attacks. See CPassword attacks\nGramm-Leach-Bliley Act (GLBA), 51-52\nGraphQL, 40, 267\ngray-box tests, 13, 47\ngroups\nCVSS (Common Vulnerability Scoring\nSystem), 34-37\nenumeration, 81-82\nGroup Policy Objects (GPOs),\n305-306\ngroups command, 294\n\nH\n\nHack This, 225\n\nHack This Site, 225\n\nHackazon, 225\n\nhackertarget module, 96\n\nhacktivists, 10\n\nHAL (Hardware Abstraction Layer),\n316\n\nhalf-open scanning, 71-72\n\nhandling reports, 499-500\n\nhard-coded credentials, 266\n\nHardware Abstraction Layer (HAL), 316\n\nHashcat, 425-427\n\nhashdump command, 343, 448\n\nHEAD method (HTTP), 217\nHealth Information Technology for\nEconomic and Clinical Health\nAct, 52\nhealth plans, 53\nhealthcare clearinghouses, 53\nhealthcare providers, 53\nhealthcare sector regulations, 52-53\nHellBound Hackers, 225\nHELO command (SMTP), 160\nHELP command (SMTP), 161\nhelp menu (Recon-ng), 92\nHeyoka, 441\nhidden elements, 270\nhijacking\nDLL (dynamic link library),\n303-304\nsession, 245-249\nHIPAA Security Enforcement Final\nRule, 52\nHIPAA Security Rule, 52-53\nHITECH (Health Information\nTechnology for Economic and\nClinical Health) Act, 52\nhopping, VLAN, 181-183\nHost, 371-372\nhost enumeration, 78-79\nhosts, local. See local host vulnerabilities\nHPP (HTTP parameter pollution),\n250-251\nHTML (Hypertext Markup Language)\nHTMLS, 309\ninjection, 241\nHTTP (Hypertext Transfer Protocol),\n213-221\nclients, 213\nHPP (HTTP parameter pollution),\n250-251\nproxies\ndefined, 214\nZAP, 214\nrequest/response model, 215-218",
    "Page_100": "servers, 213\nsessions, 213\nURLs (uniform resource locators),\n219-220\nhttp-enum script, 83-84\nHydra, 428-429\nHypertext Markup Language.\nSee HTML (Hypertext Markup\nLanguage)\nHypertext Transfer Protocol. See HTTP\n(Hypertext Transfer Protocol)\nhypervisor-based keyloggers, 307\n\nI\nI dntegrity Impact) metrics, 37\nid command, 294\nIDA, 454-455\nIdentd, 284\nidletime command, 343\nIDs\nSGID (set-group-ID)\nLinux, 289\nUnix, 291-293\nSUID (set-user-ID)\nLinux, 289\nUnix, 291-293\nIETF (Internet Engineering Task Force),\n157\niGoat, 325\nTIHI (individually identifiable health\ninformation), 53\nIMAP (Internet Message Address\nProtocol), 159\niMAS, 325\nImmunity, 454\nimpact analysis, 34-38\nImpact metrics, 36-44\nimpersonation, 136\nindividually identifiable health\ninformation (THD, 53\ninformation gathering.\nSee reconnaissance\n\nintrusion prevention systems (IPSs) 553\n\nInformation Systems Security Assessment\nFramework (ISSAF), 16\ninitialization vector (IV) attacks, 190\ninjection-based vulnerabilities\ncommand injection, 241-242\nHTML injection, 241\nSQL injection, 228\nblind, 237\nBoolean technique, 233, 237\ncategories of, 232-234\ndatabase fingerprinting, 234-235\nerror-based technique, 233\nexamples of, 228-232\nmitigations, 240\nout-of-band technique, 233, 237-238\nstored procedures, 239-240\ntime-delay technique, 233, 239\nUNION operator technique, 233,\n235-236\ninsecure code practices\ncode signing, lack of, 270\nerror-handling errors, 266\nhard-coded credentials, 266\nhidden elements, 270\nrace conditions, 266-267\nsource code comments, 265-266\nunprotected APIs, 267-270\nInsecure Direct Object Reference\nvulnerabilities, 251-252\nINSERT INTO statement, 228\ninsider threats, 10\ninspection, packet, 90\nInstall-SSP script, 351\nIntegrity Impact (I) metrics, 37\nintentionally vulnerable systems, 224-227\nInternet Engineering Task Force. See\nIETF (Internet Engineering Task\nForce)\nInternet Message Address Protocol\n(IMAP), 159\ninterrogation, 136\nintrusion prevention systems (IPSs), 46",
    "Page_101": "554\n\nInvoke-Credentiallnjection script\n\nInvoke-CredentialInjection script, 351\n\nInvoke-DIIInjection script, 351\n\nInvoke-Mimikatz script, 352\n\nInvoke-NinjaCopy script, 352\n\nInvoke-Portscan script, 352\n\nInvoke-ReflectivePEInjection script, 351\n\nInvoke-ReverseDnsLookup script, 352\n\nInvoke-Shellcode script, 351\n\nInvoke-TokenManipulation script, 351\n\nInvoke-WmiCommand script, 351\n\nTodine, 441\n\niOS security, 323-325\n\nIoT (Internet of Things), threats to,\n8-9\n\nipconfig command, 343\n\nIPSs (intrusion prevention systems),\n46\n\nISSAF (Information Systems Security\nAssessment Framework), 16\n\nIV (initialization vector) attacks, 190\n\nJ\n\njail, 309\n\nJapan Computer Emergency Response\nTeam JPCERT), 113\n\nJavaScript-based keyloggers, 307\n\njohn --list=formats command, 420-421\n\njohn -show hashes command, 423\n\nJohn the Ripper, 420-425\n\nJohnny, 425\n\nJPCERT (Japan Computer Emergency\nResponse Team), 113\n\nJTAG debugging, 326-327\n\nJWT JSON Web Token), 223\n\nK\n\nKali Linux, 224, 366\nKaminsky, Dan, 441\nKARMA attacks, 197\nKennedy, Dave, 11-12\nKerberoast, 301\nKerberos\n\nexploits, 250\nKerberos Delegation, 172\nKRBTGT (Kerberos TGT) password\nhash, 170\nvulnerabilities, 169-172\nkernel-based keyloggers, 307\nkey list command, 96-97\nkey management, 57\nkey reinstallation attack (KRACK),\n196-197\nkeyloggers, 306-307\nkeys add command, 386\nkeys add shodan_api command, 98\nkeys list command, 386-387\nKRACK (key reinstallation attack),\n196-197\nKRBTGT (Kerberos TGT) password\nhash, 170\n\nL\n\nlabs, 16-17\nrecovery, 19\nrequirements and guidelines, 18\ntools, 18-19\nweb application, 224-227\nlanguages\nPython, 461\nRuby, 461-462\nLanman, 80-81\nlateral movement, 347\npost-exploitation scanning, 347-348\nremote access protocols, 348-349\nIcd command, 343\nLDAP (Lightweight Directory Access\nProtocol)\nclear-test credentials in, 300-301\nvulnerabilities, 169-172\nlegal concepts, 41\ncontracts, 41-42\nMSAs (master service agreements), 42\nNDAs (nondisclosure agreements), 43\nSOWSs (statements of work), 42",
    "Page_102": "legislation. See regulations\nLFI (local file inclusion) vulnerabilities,\n264\nlib directory, 318\nlib folder, 319\nLightweight Directory Access Protocol.\nSee LDAP (Lightweight Directory\nAccess Protocol)\nlikeness, social engineering and, 137\nLink-Local Multicast Name Resolution.\nSee LLMNR (Link-Local\nMulticast Name Resolution)\nLinux\ndistributions, 224, 365\nBlackArch Linux, 224, 367-368\nCAINE (Computer Aided\nInvestigative Environment), 369\nKali Linux, 224, 366\nParrot, 224, 367\nSecurity Onion, 369-370\nSELinux (Security Enhanced Linux),\n293\nLXC (Linux Containers), 310\npermissions, 286-291\nlist audit command, 417-419\nLLMNR (Link-Local Multicast Name\nResolution), 148-150\nlocal file inclusion (LFI) vulnerabilities,\n264\nlocal host vulnerabilities, 281. See also\nprivilege escalation\ninsecure service and protocol configu-\nrations, 281-284\nmobile device security, 314-316\nAndroid, 316-323\nApple iOS, 323-325\nphysical security attacks, 326-327\nlocal privilege escalation. See privilege\nescalation\nLocal Security Authority Subsystem\nService (LSASS) credentials,\n301-302\n\nMETA-INF file 555\n\nlocate command, 423\n\nlockpicking, 327\n\nLocky, 8\n\nIpwd command, 343\n\nls command, 343, 350\n\nLSASS (Local Security Authority\nSubsystem Service) credentials,\n301-302\n\nLuhn, Hans Peter, 55\n\nLuhn algorithm, 55\n\nLXC (Linux Containers), 310\n\nM\n\nMAC authentication (auth) bypass,\n179-180\n\nmagnetic credit card stripes, 56\n\nMAIL command (SMTP), 161\n\nMaltego, 381-382\n\nmalvertising, 127-128\n\nManagement Frame Protection (MFP),\n189\n\nManagement Information Base (MIB),\n158\n\nMANIFEST:MF file, 317\n\nman-in-the-browser attacks, 249\n\nman-in-the-middle attacks. See MITM\n(man-in-the-middle) attacks\n\nMasscan, 78-79\n\nmaster service agreements (MSAs), 42\n\nMASVS (Mobile AppSec Verification\nStandard) Anti-Reversing\nControls, 315\n\nMDS algorithm, 166\n\nmeasurements, 494-495\n\nMedusa, 430-431\n\nmemory-injection-based keyloggers, 307\n\nmerchants, 54\n\nmessages (SMB)\n\nSMB_COM_NEGOTIATE, 80\nSMB_COM_SESSION_SETUP_\n\nANDX, 80-81\n\nMETA-INF file, 317",
    "Page_103": "556\n\nMetasploit\n\nMetasploit, 90-91, 115, 154-155,\n442-449\nMetasploit Unleashed course, 344\nMeterpreter, 299, 343-344, 446-449\nRDP connections, creating, 348-349\nMetasploitable2, 225\nMetasploitable3, 225\nMeterpreter, 299, 343-344, 446-449\nmethodologies, penetration testing, 13-16\nmethodology section (reports), 494\nmetrics, 34-37, 494-495\nMFA (multifactor authentication), 243\nMFP (Management Frame Protection),\n189\nMIB (Management Information Base),\n158\nMicrosoft\nMOM (Microsoft Operations\nManager), 354\nMS17-010 security bulletin, 8\nMSRPC (Microsoft Remote Procedure\nCall), 82\nOffice, 309\nmigrate command, 343\nMimikatz, 169-172, 302, 432\nmips file, 319\nmitigation\nrisk, 48-49\nSQL injection, 240\nXSS (cross-site scripting) vulnerabili-\nties, 258-259\nMITM (man-in-the-middle) attacks, 249\nARP cache poisoning, 173-175\nARP spoofing, 173-175\ndowngrade attacks, 175\nKARMA, 197\nsession hijacking, 193\nMITRE iMAS, 325\nMobile AppSec Verification Standard\n(MASVS) Anti-Reversing\nControls, 315\nmobile device security, 314-316\n\nAndroid, 316-323\nApple iOS, 323-325\nOWASP Mobile Security Project, 314\nMobiSec Live Environment Mobile\nTesting Framework, 325\nmodding, 315\nModified Base Metrics, 36\nmodules\nPowerSploit, 351-352\nRecon-ng\nhackertarget, 96\nshow modules command, 92-95\nMOM (Microsoft Operations Manager),\n354\nMoore, H. D., 442\nmotivation techniques, social engineering,\n137\nMount-VolumeShadowCopy script, 352\nMove-Item command, 349\nMS17-010 security bulletin, 8\nMSAs (master service agreements), 42\nmsfconsole command, 90-91, 442\nmsfdb init command, 443\nMSRPC (Microsoft Remote Procedure\nCall), 82\nmultifactor authentication (MFA), 243\nmultilateral NDAs (nondisclosure\nagreements), 43\nMutiny Fuzzing Framework, 459\n\nN\nNAC (network access control), 46,\n179-180\nname resolution, 148\nLLMNR (Link-Local Multicast Name\nResolution), 148-150\nNetBIOS, 148-150\nNational Cybersecurity and\nCommunications Integration\nCenter (NCCIC), 113\nNational Institute of Standards and\nTechnology (NIST), 15, 57, 113",
    "Page_104": "National Security Agency (NSA), 439\nNCCIC (National Cybersecurity and\nCommunications Integration\nCenter), 113\nNerack, 430-431\nNDAs (nondisclosure agreements), 43\nneed-to-know, 499\nNessus scanner, 106-108, 403-404\n-NET Common Language Runtime, 309\nNetBIOS, 148-150\nNetcat, 338-342\nNetdump, 284\nNetdump-server, 284\nnetstat command, 105\nnetwork access control. See NAC\n(network access control)\nnetwork diagrams, 41\nnetwork infrastructure tests, 11\nnetwork share enumeration, 82\nNetwork Time Protocol (NTP), 178\nnetwork-based vulnerabilities, 148\nDDoS (distributed denial-of-service)\namplification, 178-179\nreflected, 178\nDHCP (Dynamic Host Control\nProtocol)\nspoofing, 183-185\nstarvation attacks, 183-185\nDNS cache poisoning, 155-157\nDoS (denial-of-service), 176-177\nFTP (File Transfer Protocol), 166-168\nKerberos, 169-172\nLDAP (Lightweight Directory Access\nProtocol), 169-172\nman-in-the-browser attacks, 249\nMITM (man-in-the-middle) attacks,\n249\nARP cache poisoning, 173-175\nARP spoofing, 173-175\ndowngrade attacks, 175\nKARMA, 197\nsession hijacking, 193\n\nwireless and RF-based 557\n\nNAC (network access control) bypass,\n179-180\nname resolution and SMB attacks, 148\nLLMNR (Link-Local Multicast\nName Resolution), 148-150\nNetBIOS, 148-150\nSMB (Server Message Block),\n151-155\nnetwork topology, 110-111\npass-the-hash attacks, 168-169,\n302-303\nroute manipulation attacks, 175-176\nSMTP (Simple Mail Transfer Protocol)\ncommands, 160-163\nknown SMTP server exploits,\n163-166\nopen relay, 160\nTCP port numbers, 159\nSNMP (Simple Network Management\nProtocol), 157-159\nVLAN hopping, 181-183\nwireless and RF-based\ncredential harvesting, 199-200\ndeauthentication attacks, 186-189\nevil twin attacks, 185-186\nfragmentation attacks, 197-198\nIV (initialization vector) attacks, 190\nKARMA attacks, 197\nKRACK (key reinstallation attack),\n196-197\nPNL (preferred network list) attacks,\n189\nRFID (radio-frequency identifica-\ntion) attacks, 200\nrogue access points, 185\nsignal jamming, 189\nwar driving, 190\nWEP (Wired Equivalent Privacy)\nattacks, 190-192\nWPA (Wi-Fi Protected Access)\nattacks, 192-196\nWPS (Wi-Fi Protected Setup), 197",
    "Page_105": "558\n\nNew York Department of Financial Services Cybersecurity Regulation\n\nNew York Department of Financial\n\nServices Cybersecurity Regulation,\n\n51, 52\nNew-ElevatedPersistenceOption script,\n351\nNew-NetFirewallRule command, 350\nNew-UserPersistenceOption script,\n351\nNew-VolumeShadowCopy script, 352\nNfs, 284\nNikto, 84, 410-413, 488-489\nNIST (National Institute of Standards\nand Technology), 15, 57, 113\nNmap, 155, 391-393\nenumeration\ngroup, 81-82\nhost, 78-79\nnetwork share, 82\nservice, 85\nuser, 80-81\nweb page/web application, 83-84\nscans\nping, 77-78\nTCP connect, 73-74\nTCP FIN, 76-77\nUDP, 74-75\nscripts\nhttp-enum, 83-84\nsmb-enum-groups, 81-82\nsmb-enum-processes, 85\nsmb-enum-shares, 82\nsmb-enum-users.nse, 80-81\nsmtp-open-relay, 160\nSNMP-related, 158-159\nZenmap, 393-395\nnmap command\n-sF option, 76-77\n-sS option, 71-72\n-sT option, 73-74\n-sU option, 74-75\nNmap Scripting Engine (NSE), 69\nnodes (Dradis)\n\ncreating, 481-483\norganizing, 486-488\nplugin.output, 486\nno-execute (NX) bit feature, 298\nnondisclosure agreements (NDAs), 43\nnonethical hacking, 6-7\nnontraditional assets, vulnerability scans\nfor, 111-112\nNotary, 314\nNotPetya, 8\nNowSecure App Testing:323\nNSA (National Security Agency),\n439\nNSE (Nmap Scripting Engine), 69\nhttp-enum script, 83-84\nsmb-enum-groups script, 81-82\nsmb-enum-processes script, 85\nsmb-enum-shares script, 82\nsmb-enum-users.nse script, 80-81\nsmtp-open-relay script, 160\nSNMP-related scripts, 158-159\nNslookup, 90, 156-157, 371-372\nNTLM (NT LAN Manager), 80-81, 168,\n302-303\nNTP (Network Time Protocol), 178\nNX (no-execute) bit feature, 298\nNyeta ransomware, 354\n\noO\n\nOASP Mobile Security Testing\nGuidelines, 16\n\nOBEX (Object Exchange), 199\n\nObjdump, 455-457\n\nObject Exchange (OBEX), 199\n\noffensive controls, 49\n\nOffensive Security Example penetration\ntest report, 497\n\noffline brute-force attacks, 243\n\nOllyDbg, 452-453\n\none-click attacks, 260-261\n\nonline brute-force attacks, 243\n\nopen relay (SMTP), 160",
    "Page_106": "Open Source Intelligence. See OSINT\n(Open Source Intelligence)\ngathering\n\nOpen Source Security Testing\nMethodology Manual\n(OSSTMM), 15-16\n\nOpen Web Application Security\nProject. See OWASP (Open Web\nApplication Security Project)\n\nOpenAPI, 40, 268\n\nOpenSCAP, 314\n\nOpenSSL, POODLE (Padding Oracle on\nDowngraded Legacy Encryption)\nvulnerability, 175\n\nOpenVAS, 401-403\n\nOpenVz, 311\n\noperators, UNION, 233, 235-236\n\nOPTIONS method (HTTP), 217\n\norganized crime, 9-10\n\noriginal folder, 318\n\noscap-docker, 314\n\nOSINT (Open Source Intelligence)\ngathering, 90\n\ndefined, 90\ntools, 370\nCensys, 389-390\nDig, 371-372\nExifTool, 374-375\nFOCA (Fingerprinting\nOrganizations with Collected\nArchives), 374\nHost, 371-372\nMaltego, 381-382\nNslookup, 371-372\nRecon-ng, 382-389\nShodan API, 378-380\nTheharvester, 376-378\nWhois, 372-373\n\nOSSTMM (Open Source Security\nTesting Methodology Manual),\n15-16\n\nOut-CompressedDIl script, 351\n\npassive reconnaissance 559\n\nOut-EncodedCommand script, 351\nOut-EncryptedScript script, 351\nOut-Minidump script, 352\nout-of-band SQL injection, 233, 237-238\noutput file processing (Dradis), 485-486\nOverTheWire Wargames, 225\nOWASP (Open Web Application Security\nProject), 11, 226\nAuthentication Cheat Sheet, 222, 246\nClickjacking Defense Cheat Sheet, 261\nEnterprise Security API (ESAPI), 240\niGoat, 325\nMobile Security Project, 314\nMutillidae II, 225\nREST Security Cheat Sheet, 269\nRisk Rating Methodology, 495\nSeraphimDroid, 323\nZAP (Zed Attack Proxy), 41, 251,\n413-414\nOzymanDNS and sods, 441\n\nP\n\nPacketforge-ng, 197-198\npackets\ncapture, 215\ncrafting, 85-87\ninspection and eavesdropping, 90\nPadding Oracle on Downgraded\nLegacy Encryption (POODLE)\nvulnerability, 175\nPALADIN, 457\nPANs (primary account numbers), 54\nparameter pollution, 250-251\nParrot, 224, 367\npassive reconnaissance, 87-88, 370\nCensys, 389-390\ndefined, 70-71\nDig, 371-372\ndomain enumeration, 88-91\nExifTool, 374-375\nFOCA (Fingerprinting Organizations\nwith Collected Archives), 374",
    "Page_107": "passive reconnaissance\n\nHost, 371-372\nMaltego, 381-382\nNslookup, 90, 156-157, 371-372\nOSINT (Open Source Intelligence)\ngathering, 90\npacket inspection and eavesdropping,\n90\nRecon-ng, 90-102, 382-389\nhackertarget module, 96\nhelp menu, 92\nkey list command, 96-97\nkeys add command, 386\nkeys list command, 96-97,\n386-387\nlaunching, 91\nmain menu and splash page, 91\nsearches, 95\nShodan API, 96-102\nshow info command, 387-388\nshow modules command, 92-95,\n383-386\nsupport resources, 389\nuse command, 387-389\nShodan API, 96-102, 378-380\nTheharvester, 376-378\nvulnerability scans, 103\nauthenticated, 105\nchallenges of, 109-112\ncompliance, 109-110\ndiscovery, 106\nfull, 106-108\nhow it works, 103-104\nresults analysis, 112-113\nstealth, 108-109\nsupport resources, 113-115\nunauthenticated, 104-105\nvulnerability management, 115-116\nWhois, 372-373\npassive vulnerability scanners, 108. See\nalso scans\npass-the-hash attacks, 168-169, 302-303\n\npassword crackers\n\nCain and Abel, 424-425\n\nCeWL, 431-432\n\nHashcat, 425-427\n\nHydra, 428-429\n\nJohn the Ripper, 420-425\n\nJohnny, 425\n\nMedusa, 430-431\n\nMimikatz, 432\n\nNerack, 430-431\n\nPatator, 432-433\n\nRainbowCrack, 429-430\npasswords\n\nDradis Framework, 479-480\n\nmanagement, 56\n\nPatator, 432-433\n\npath traversals, 262-263\n\npayment brands, 54\n\nPayment Card Industry Data Security\nStandard. See PCI DSS (Payment\nCard Industry Data Security\nStandard)\n\nPCI DSS (Payment Card Industry Data\nSecurity Standard), 13-14, 53-56,\n491-493\n\nPCI forensic investigators (PFIs), 54\n\nPCI SSC (Payment Card Industry\nSecurity Standards Council), 53\n\nPeach, 459\n\nPearson Test Prep software, 505\n\nexam customization, 507-508\nexam updates, 508\n\noffline access, 506-507\nonline access, 505\n\nPremium Edition, 508-509\n\nPearsonIT Certification.com, 506\n\npenetration testing, defined, 6-7\n\nPenetration Testing Execution Standard\n(PTES), 13, 16\n\nPenetration Testing Framework, 14\n\npenetration testing labs. See labs\n\npenetration testing methodologies, 10,\n13-16",
    "Page_108": "POODLE (Padding Oracle on Downgraded Legacy Encryption) vulnerability 561\n\nreasons for following, 10\nweb application tests, 11\n\npenetration testing planning. See planning\n\nand preparation\npenetration testing reports. See reports\npenetration testing tools. See tools\npermission escalation. See privilege\nescalation\nPermissions Calculator website, 290\npersistence, 337, 433\nblind shells, creating, 338-344\nC2 (command and control) utilities,\n344-345\ncustom daemons and processes,\ncreating, 346\nreverse shells, creating, 338-344\nscheduled tasks, creating, 346\ntools, 433-434\nusers, creating, 346\nPeruggia, 225\nPFIs (PCI forensic investigators), 54\npharming, 126-127\nphishing, 126\nSMS, 134-135\nspear, 128-134\nvoice, 135\nwhaling, 135\nphysical facility tests, 11\nphysical security attacks, 326-327\nPiessens, Frank, 196\nPietraszek, Tadeusz, 441\npiggybacking, 327\nping scans, 77-78\nping sweeps, 77\npivoting, 347\npost-exploitation scanning, 347-348\nremote access protocols, 348-349\nplanning and preparation\ncompliance-based assessment, 50\nfinancial sector regulations, 50-52\nhealthcare sector regulations, 52-53\nkey technical elements, 56-57\n\nlimitations of, 57-58\nPCI DSS (Payment Card Industry\nData Security Standard), 53-56\ncorporate policies, 43-44\nexport restrictions, 43\nimportance of, 29\nlegal concepts, 41\ncontracts, 41-42\nMSAs (master service agreements), 42\nNDAs (nondisclosure agreements), 43\nSOWs (statements of work), 42\npre-engagement documentation\nbudget, 32-33\ncommunication escalation path,\n31-32\nconfidentiality of findings, 32\ndisclaimers, 38-39\nimpact analysis and remediation\ntimelines, 34-38\npoint-in-time assessment, 33\nrules of engagement, 30\ntarget audience, 29-30\ntechnical constraints, 39\nrisk management, 47-50\nscoping\nassessment types, 45\nimportance of, 44\nscope creep, 44\nspecial considerations, 45-46\ntarget selection, 46-47\nstrategy, 47\nsupport resources, 40-41\nplugin.output node (Dradis), 486\nPNL (preferred network list) attacks,\n189\npoint-in-time assessments, 33\npolicies\ncorporate, 43-44\nWindows Group Policy, 305-306\nPOODLE (Padding Oracle on\nDowngraded Legacy Encryption)\nvulnerability, 175",
    "Page_109": "562\n\nPOPS (Post Office Protocol v3) port numbers\n\nPOP3 (Post Office Protocol v3) port\nnumbers, 159\nport numbers, 159\nport scans, Nmap, 391-393\nhalf-open, 71-72\nping, 77-78\nSYN, 71-72\nTCP connect, 73-74\nTCP FIN, 76-77\nUDP, 74-75\nZenmap, 393-395\nPOST method (HTTP), 217\nPost Office Protocol v3 (POP3) port\nnumbers, 159\npost-engagement activities, 474-475.\nSee also reports\npost-exploitation techniques\nblind shells, creating, 338-344\nC2 (command and control) utilities,\n344-345\ncleanup process, 356\ncustom daemons and processes,\ncreating, 346\nlateral movement, 347\npost-exploitation scanning, 347-348\nremote access protocols, 348-349\npersistence, 337\nreverse shells, creating, 338-344\nscheduled tasks, creating, 346\nusers, creating, 346\nWindows legitimate utilities, 349\nEmpire, 353-354\nPowerShell, 349-350\nPowerSploit, 351-353\nPSExec, 355-356\nSysinternals, 355-356\nWMI (Windows Management\nInstrumentation), 354-355\nPowerShell, 349-350, 433, 462\nPowerSploit, 351-353, 434\nPowerUp script, 352\nPowerView script, 352\n\nPR (Privilege Required) metrics, 37\npre-engagement documentation\nbudget, 32-33\ncommunication escalation path, 31-32\nconfidentiality of findings, 32\ndisclaimers, 38-39\nimpact analysis and remediation\ntimelines, 34-38\npoint-in-time assessment, 33\nrules of engagement, 30\ntarget audience, 29-30\ntechnical constraints, 39\npreferred network list (PNL) attacks,\n189\npretexting, 136\nprimary account numbers (PANS), 54\nprivilege escalation, 285-286\ninsecure SUDO implementations,\n294-298\nLinux permissions, 286-291\nret2libe (“return-to-libe”) attacks, 298\nUnix programs, 291-293\nWindows privileges\nclear-test credentials in LDAP,\n300-301\ncontainer security, 310-314\nCPassword, 299\nDLL (dynamic link library) hijack-\ning, 303-304\nexploitable services, 304-305\nGroup Policy, 305-306\ninsecure file/folder permissions, 305\nKerberoast, 301\nkeyloggers, 306-307\nLSASS (Local Security Authority\nSubsystem Service) credentials,\n301-302\nSAM (Security Account Manager)\ndatabase, 302-303\nsandbox escape, 308-310\nscheduled tasks, 307-308\nVM (virtual machine) escape, 310",
    "Page_110": "Privilege Required (PR) metrics, 37\n\nPRNGs (pseudorandom number\ngenerators), 247\n\nProcDump, 301-302\n\nprocedures, stored, 239-240\n\nprocesses, creating, 346\n\nProfessional Edition (Dradis), 479\n\nProject Summary screen (Dradis), 481\n\nprotocol configurations, insecurity in,\n281-284\n\nproxies (HTTP)\n\ndefined, 214\nZAP, 214\n\nProxychains, 439\n\nps command, 343\n\npseudorandom number generators\n(PRNGs), 247\n\nPSExec, 355-356\n\nPsExec tool (Sysinternals), 355\n\nPsFile tool (Sysinternals), 355\n\nPsGetSid tool (Sysinternals), 355\n\nPsInfo tool (Sysinternals), 355\n\nPsKill tool (Sysinternals), 355\n\nPsList tool (Sysinternals), 355\n\nPsLoggedOn tool (Sysinternals), 355\n\nPsLogList tool (Sysinternals), 355\n\nPsPassword tool (Sysinternals), 355\n\nPsPing tool (Sysinternals), 355\n\nPsService tool (Sysinternals), 355\n\nPsShutdownPsSuspend tool\n(Sysinternals), 355\n\npsudp, 441\n\nPTES (Penetration Testing Execution\nStandard), 13, 16\n\nPUT method (HTTP), 217\n\npwd command, 343\n\nPython, 461\n\nQ\n\nQSAs (qualified security assessors), 54\nqualified security assessors (QSAs), 54\nQualys scanner, 404\n\nred teams 563\n\nquery throttling, 111\nQUIT command (SMTP), 161\n\nR\nrace conditions, 266-267\nRadamsa, 459\nradio-frequency identification (RFID)\nattacks, 200\nrainbow tables, 244, 429\nRainbowCrack, 429-430\nransomware\nNyeta, 354\nWannaCry, 8\nRapid7, 404\nRC (Report Confidence), 36\nRCPT command (SMTP), 160\nrerack, 429-430\nRDP (Remote Desktop Protocol), 348,\n433\nReader (Adobe), 309\nReaver, 197\nrecommendations for remediation,\nreporting, 495-497\nreconnaissance. See active\nreconnaissance; passive\nreconnaissance\nRecon-ng, 90-102, 382-389\nhackertarget module, 96\nhelp menu, 92\nkey list command, 96-97\nkeys add command, 386\nkeys list command, 386-387\nlaunching, 91\nmain menu and splash page, 91\nsearches, 95\nShodan API, 96-102\nshow info command, 387-388\nshow modules command, 92-95,\n383-386\nsupport resources, 389\nuse command, 387-389\nred teams, 46",
    "Page_111": "564\n\nredirect attacks\n\nredirect attacks, 249\nreflected DDoS (distributed denial-\nof-service) attacks, 178\nreflected XSS (cross-site scripting)\nattacks, 253-254\nregulations\nfinancial sector, 50-52\nhealthcare sector, 52-53\nPCI DSS (Payment Card Industry\nData Security Standard), 53-56\nRemediation Level (RL), 36\nremediation timelines, 34-38\nremote access protocols, 348-349\nRemote Desktop Protocol (RDP), 348,\n433\nremote file inclusion (RFI) vulnerabilities,\n264-265\nRemove-Comments script, 351\nRemove-VolumeShadowCopy script, 352\nReport Confidence (RC), 36\nreporting/html module, 102\nreports\nclassifying, 499\ncommon elements of, 490\nexecutive summary, 493\nfindings and recommendations,\n495-497\nmethodology, 494\nmetrics and measurements, 494-495\ncommunications, 500-501\ndistribution, 499-500\nDradis Framework\nChoose a Tool dropdown, 484-485\ndata import, 483\nimported scans, viewing, 488-490\nlaunching, 479\nlogin screen, 480\nnode organization, 486-488\nnode/subnode creation, 481-483\noutput file processing, 485-486\npassword creation, 479-480\nplugin.output node, 486\n\nProject Summary screen, 481\nUpload Manager screen, 484\nUpload Output from Tool option,\n483-484\nversions, 478-479\nhandling, 499-500\nOffensive Security Example penetra-\ntion test report, 497\nPCI DSS reporting guidelines,\n491-493\nwriting\nbest practices, 475, 476-478\nimportance of, 475-476\nRepresentational State Transfer (REST),\n267\nrequest for proposal (RFP), 44\nrequests (HTTP), 215-218\nres directory, 318\nresource command, 343\nresources, support, 40-41\nCAPEC (Common Attack Pattern\nEnumeration and Classification),\n114\nCVE (Common Vulnerabilities and\nExposures), 114-115\nCWE (Common Weakness\nEnumeration), 115\nJPCERT (Japan Computer Emergency\nResponse Team), 113\nNIST (National Institute of Standards\nand Technology), 113\nUS-CERT (U.S. Computer Emergency\nReadiness Team), 113\nresources.arsc directory, 318\nresponses\nHTTP (Hypertext Transfer Protocol),\n215-218\nport scans\nSYN scans, 71\nTCP connect scans, 73\nTCP FIN scans, 76\nUDP scans, 75",
    "Page_112": "REST (Representational State Transfer),\n267\nRESTful (REST) APIs, 269\nret2libe (“return-to-libc”) attacks, 298\nreverse shells, 238, 338-344\nRF-based attacks. See wireless network\nvulnerabilities\nRFI (remote file inclusion) vulnerabilities,\n264-265\nRFP (request for proposal), 44\nrisk, 47-50\nacceptance, 48\nappetite for risk, 49-50\navoidance, 49\nmitigation, 48-49\nRisk Rating Methodology (OWASP),\n495\nsharing, 49\ntolerance, 47-48\ntransfer, 49\nRL (Remediation Level), 36\nRlogin, 284\nRocket, 311\nrockyou wordlist, 424\nrogue access points, 185\nrogue DHCP servers, 183-185\nRoot Me, 225\nroute manipulation attacks, 175-176\nRSET command (SMTP), 161\nRsh, 284\nRuby, 461-462\nrules of engagement, 30\nrun command, 451\nRwhod, 284\n\nSs\n\nS (Scope) metrics, 37\n\nSAM (Security Account Manager)\ndatabase, 302-303\n\nSamba, 284\n\nSamurai Web Testing Framework, 225\n\nsandboxes, escaping, 308-310\n\nscarcity, social engineering and 565\n\nSANS Institute InfoSec Reading Room,\n493\nSANS Investigative Forensic Toolkit\n(SIFT) Workstation, 458\nSaved State Analysis, 302\nscans, 391-393\nNmap port scans\nhalf-open, 71-72\nping, 77-78\nSYN, 71-72\nTCP connect, 73-74\nTCP FIN, 76-77\nUDP, 74-75\npost-exploitation, 347-348\ntools, 18-19\nvulnerability, 103\nauthenticated, 105\nchallenges of, 109-112\ncompliance, 109-110\nDirbuster, 419\ndiscovery, 106\nfull, 106-108\nhow it works, 103-104\nmanagement, 115-116\nNessus, 403\nNexpose, 403-404\nNikto, 84, 410-413, 488-489\nOpenVAS, 401-403\nQualys, 404\nresults analysis, 112-113\nSQLmap, 404-410\nstealth, 108-109\nsupport resources, 113-115\nunauthenticated, 104-105\nW3AK 415-419\nZAP (Zed Attack Proxy), 41, 214,\n251, 413-414\nvulnerability scans, 400\nScapy, 85-87\nscapy command, 86\nscarcity, social engineering and,\n137",
    "Page_113": "566\n\nscheduled tasks\n\nscheduled tasks\ncreating, 346\nprivilege escalation and, 307-308\n\nScope (S) metrics, 37\n\nscoping. See also planning and\n\npreparation\n\nassessment types, 45\nimportance of, 44\nscope creep, 44\nspecial considerations, 45-46\ntarget selection, 46-47\n\nscreenshot command, 448\n\nscripts\nAdd-Persistence, 351\ndocker-bench-security, 313\nFind-AVSignature, 351\nGet-GPPAutologon, 352\nGet-GPPPassword, 352\nGet-HttpStatus, 352\nGet-Keystrokes, 352\nGet-MicrophoneAudio, 352\nGet-SecurityPackages, 351\nGet-TimedScreenshot, 352\nGet-VaultCredential, 352\nGet-VolumeShadowCopy, 352\nhttp-enum, 83-84\nInstall-SSP, 351\nInvoke-CredentialInjection, 351\nInvoke-Dl Injection, 351\nInvoke-Mimikatz, 352\nInvoke-NinjaCopy, 352\nInvoke-Portscan, 352\nInvoke-ReflectivePEInjection, 351\nInvoke-ReverseDnsLookup, 352\nInvoke-Shellcode, 351\nInvoke-TokenManipulation, 351\nInvoke-WmiCommand, 351\nMount-VolumeShadowCopy, 352\nNew-ElevatedPersistenceOption, 351\nNew-UserPersistenceOption, 351\nNew-VolumeShadowCopy, 352\nOut-CompressedDII, 351\n\nOut-EncodedCommand, 351\nOut-EncryptedScript, 351\nOut-Minidump, 352\nPower Up, 352\nPowerView, 352\nRemove-Comments, 351\nRemove-VolumeShadowCopy, 352\nSet-CriticalProcess, 352\nSet-MasterBootRecord, 352\nsmb-enum-groups, 81-82\nsmb-enum-processes, 85\nsmb-enum-shares, 82\nsmb-enum-users.nse, 80-81\nsmtp-open-relay, 160\nSNMP-related, 158-159\nSDKs (software development kits), 40\nsearch command, 343\nsearches, Recon-ng, 95\nSearchSploit, 151-154, 163-166\nSEC (Securities and Exchange\nCommission), 52\nSecure Computing Mode (seccomp), 309\nSecure File Transfer Protocol (SFTP),\n166\nSecure SMTP (SSMTP) port number,\n159\nSecurities and Exchange Commission\n(SEC), 52\nSecurity Account Manager (SAM)\ndatabase, 302-303\nSecurity Enhanced Linux (SELinux), 293\nsecurity misconfigurations, 262\ncookie manipulation attacks, 263-264\ndirectory traversal vulnerabilities,\n262-263\nSecurity Onion, 369-370, 457\nSecurity Requirements metrics, 36\nSecurity Standards for the Protection\nof Electronic Protected Health\nInformation. See HIPAA Security\nRule\nSELECT statement, 228",
    "Page_114": "Select-String command, 349\nSELinux (Security Enhanced Linux), 293\nSendmail, 284\nsensors, egress, 327\nSeraphimDroid, 323\nserial console debugging, 326\nServer Message Block (SMB), 8, 76,\n151-155\nservers, HTTP (Hypertext Transfer\nProtocol), 213\nservice dradis start command, 479\nservice providers, 54-55\nservice set identifiers (SSIDs), 46, 186\nservices\nenumeration, 85\ninsecure configurations of, 281-284\nsession hijacking, 245-249\nsession riding, 260-261\nsession sniffing, 249\nsessions\nHTTP (Hypertext Transfer Protocol),\n213\nweb, 221-224\nSET (Social-Engineer Toolkit), 11-12,\n129-134\nset LHOST command, 155\nset RHOST command, 155\nSet-CriticalProcess script, 352\nSet-MasterBootRecord script, 352\nsetoolkit command, 129\n-sF option (nmap command), 76-77\nSFI (software fault isolation), 309\nSFTP (Secure File Transfer Protocol),\n166\nSGID (set-group-ID)\nLinux, 289\nUnix, 291-293\nSHA-1 algorithm, 166\nSHA-2 algorithm, 166\nSHA-512 algorithm, 166\nThe Shadow Brokers, 8\nshared_prefs folder, 319\n\n \n  \n\nsmtp-open-relay script 567\n\nsharing risk, 49\nshell command, 343\nshells\nbash, 460-461\nblind, 338-344\nreverse, 238, 338-344\nShodan API, 96-102, 378-380\nshodan_hostname module, 100\nshoulder surfing, 137\nshow info command, 387-388\nshow modules command, 383-386\nshow options command, 155\nSIFT (SANS Investigative Forensic\nToolkit) Workstation, 458\nsignal jamming, 189\nsilver ticket attacks (Kerberos), 172\nSimple Network Management Protocol.\nSee SNMP (Simple Network\nManagement Protocol)\nSimple Object Access Protocol (SOAP),\n40, 267\nSkadi, 457\nSmali, 318\nsmalidea, 318\nSmart Install, 281\nSMB (Server Message Block), 8, 76,\n151-155\nSMB_COM_NEGOTIATE message, 80\nSMB_COM_SESSION_SETUP_ANDX\nmessage, 80-81\nsmb-enum-groups script, 81-82\nsmb-enum-processes script, 85\nsmb-enum-shares script, 82\nsmb-enum-users.nse script, 80-81\nSMS phishing, 134-135\nSMTP (Simple Mail Transfer Protocol)\ncommands, 160-163\nknown SMTP server exploits, 163-166\nopen relay, 160\nSMTPS (SMTP over SSL), 159\nTCP port numbers, 159\nsmtp-open-relay script, 160",
    "Page_115": "568\n\nSMTPS (SMTP over SSL)\n\nSMTPS (SMTP over SSL), 159\nsmtp-user-enum tool, 161-163\n-sn option (nmap command), 77-78\nsniffing, session, 249\nSNMP (Simple Network Management\nProtocol), 157-159\nSOAP (Simple Object Access Protocol),\n40, 267\nsocat, 345\nsocial engineering attacks, 11-12\ncharacteristics of, 125-126\nelicitation, 135\ninterrogation, 136\nmalvertising, 127-128\nmotivation techniques, 137\npharming, 126-127\nphishing, 126\nSMS, 134-135\nspear, 128-134\nvoice phishing, 135\nwhaling, 135\npretexting, 136\nSET (Social-Engineer Toolkit),\n129-134\nshoulder surfing, 137\nUSB key drop, 138\nsocial engineering tests, 11-12, 129-134\nsocial proof, in social engineering, 137\nSocial-Engineer Toolkit. See SET\n(Social-Engineer Toolkit)\nSocial-Engineer Toolkit (SET), 11-12\nsoftware. See tools\nsoftware assurance tools, 458-459\nsoftware development kits (SDKs), 40\nsoftware fault isolation (SFI), 309\nSonarQube, 458\nsource code comments, exploits in,\n265-266\nSOWs (statements of work), 42\nspear phishing, 128-134\nSpecial Publication 800-57 (NIST), 57\nSpecial Publication 800-115 (NIST), 15\n\nspoofing\nARP, 173-175\nDHCP (Dynamic Host Control\nProtocol), 183-185\nSQL injection vulnerabilities, 228\nblind SQL injection, 237\nBoolean technique, 233, 237\ncategories of, 232-234\ndatabase fingerprinting, 234-235\nerror-based technique, 233\nexamples of, 228-232\nmitigations, 240\nout-of-band technique, 233, 237-238\nSQL statements, 228-232\nstored procedures, 239-240\ntime-delay technique, 233, 239\nUNION operator technique, 233,\n235-236\nSQLi. See SQL injection vulnerabilities\nSQLmap, 404-410\n-sS option (Nmap), 71-72\nSSIDs (service set identifiers), 46, 186\nSSLStrip, 174\nSSMTP (Secure SMTP) port number,\n159\n-sT option (nmap command), 73-74\nstack-smashing protection, 298\nSTARTTLS, 159, 160\nstarvation attacks (DHCP), 183-185\nstatements (SQL), 228-232\nstatements of work (SOWs), 42\nstate-sponsored attackers, 10\nstatic binary analysis, 316\nstealth scans, 108-109\nsticky bits, 288\nstored DOM-based attacks, 263-264\nstored procedures, 239-240\nstored XSS (cross-site scripting) attacks,\n255-256\nstudy plans (exam prep), 509\n-sU option (nmap command), 74-75\nsudo command, 286-287, 294-298",
    "Page_116": "SUID (set-user-ID)\nLinux, 289\nUnix, 291-293\nSun Tzu, 9\nsupport resources, 40-41\nCAPEC (Common Attack Pattern\nEnumeration and Classification),\n114\nCVE (Common Vulnerabilities and\nExposures), 114-115\nCWE (Common Weakness\nEnumeration), 115\nintentionally vulnerable systems,\n224-227\nJPCERT (Japan Computer Emergency\nResponse Team), 113\nNIST (National Institute of Standards\nand Technology), 113\nUS-CERT (U.S. Computer Emergency\nReadiness Team), 113\nSwagger, 40, 268\nSYN flood attacks, 176\nSYN scans, 71-72\nsysinfo command, 449\nSysinternals, 302, 355-356\nsystem cleanup, 356\nsystem diagrams, 41\nSYSTEM privileges, 304\n\nT\n\ntables, rainbow, 244, 429\ntailgating, 327\ntarget audience, identification of, 29-30\ntarget selection, 46-47\ntasks, scheduled\ncreating, 346\nprivilege escalation, 307-308\nTCP (Transmission Control Protocol)\nNmap scans\nTCP connect, 73-74\nTCP FIN, 76-77\nport numbers, 159\n\ntools 569\n\nTCPDUMBP, 90, 215, 282-284\nteams\nblue, 46\nred, 46\ntechnical constraints, 39\nTelnet, 281\ntemporal groups, 34-37\ntests\ngray-box, 13\nnetwork infrastructure, 11\nphysical facility, 11\nsocial engineering, 11-12\nwhite-box, 12-13\nwireless network, 11\nTheharvester, 376-378\ntheoretical vulnerabilities, 38\nthreat actors, 9-10\nthreats. See attacks\ntime of check to time of use (TOCTOU)\nattacks, 266-267\ntime-delay SQL injection, 233, 239\ntimeline, remediation, 34-38\nTimes, Tim, 90-91\nTOCTOU (time of check to time of use),\n266-267\ntolerance, risk, 47-48\ntools, 18-19, 313. See also commands;\nscripts\nADIA (Appliance for Digital\nInvestigation and Analysis), 457\nAFL (American Fuzzy Lop), 459\nAircrack-ng suite, 186-189, 191-196\nAireplay-ng, 188, 191, 194-195\nAirmon-ng, 186-187, 191, 194\nAirodump-ng, 188, 191, 194-195\nAnchore, 313\nAndroick, 323\nApktool, 322\nApple Remote Desktop, 433\nAqua Security, 313\nBane, 313\nbash, 460-461",
    "Page_117": "tools\n\nBeEF, 449-450\nBurp, 214\nCain and Abel, 424-425\nCAINE (Computer Aided Investigative\nEnvironment), 457\nCensys, 389-390\nCeWL, 431-432\nClair, 313\nCydia Substrate, 315\nDagda, 313\nDEFT (Digital Evidence & Forensics\nToolkit), 457\nDeNiSe, 441\nDev-Sec.io, 313\nDig, 371-372\nDirbuster, 419\ndns2tcp, 441\nDNScapy, 441\nDNScat, 441\nDNScat2, 345, 441\nDNSdumpster, 88\nDNSRecon, 67-69\ndocker-bench-security, 313\ndocker-explorer, 314\nDradis Framework\nChoose a Tool dropdown, 484-485\ndata import, 483\nimported scans, viewing, 488-490\nlaunching, 479\nlogin screen, 480\nnode organization, 486-488\nnode/subnode creation, 481-483\noutput file processing, 485-486\npassword creation, 479-480\nplugin.output node, 486\nProject Summary screen, 481\nUpload Manager screen, 484\nUpload Output from Tool option,\n483-484\nversions, 478-479\nDropboxC2 (DBC2), 345\nedb debugger, 452-454\n\nEmpire, 171, 353-354, 434\nEncryption, 439-440\nEnum4linux, 395-400\nEttercap, 199\nExif Tool, 374-375\nFeederbot and Moto, 442\nFindbugs, 458\nFindsecbugs, 458\nFOCA (Fingerprinting Organizations\nwith Collected Archives), 374\nFrida, 315\nGDB (GNU Project Debugger),\n450-452\nHashcat, 425-427\nHeyoka, 441\nHost, 371-372\nHydra, 428-429\nIDA, 454-455\niGoat, 325\niMAS, 325\nImmunity, 454\nTodine, 441\nJohn the Ripper, 420-425\nJohnny, 425\nKerberoast, 301\nkeyloggers, 306-307\nLanman, 80-81\nLinux distributions, 224, 365\nBlackArch Linux, 224, 367-368\nCAINE (Computer Aided\nInvestigative Environment), 369\nKali Linux, 224, 366\nParrot, 224, 367\nSecurity Onion, 369-370\nMaltego, 381-382\nMedusa, 430-431\nMetasploit, 90-91, 115, 442-449\nMetasploit Unleashed course, 344\nMeterpreter, 299, 343-344,\n446-449\nRDP connections, creating, 348-349\nMimikatz, 169-172, 432",
    "Page_118": "MobiSec Live Environment Mobile\nTesting Framework, 325\nMutiny Fuzzing Framework, 459\nNerack, 430-431\nNessus, 106-108, 403-404\nNetcat, 338-342\nNikto, 84, 410-413, 488-489\nNmap. See Nmap\nNotary, 314\nNslookup, 90, 156-157, 371-372\nNTLM, 80-81\nObjdump, 455-457\nOllyDbg, 452-453\nOpenVAS, 401-403\noscap-docker, 314\nOzymanDNS and sods, 441\nPacketforge-ng, 197-198\nPALADIN, 457\nPatator, 432-433\nPeach, 459\nPearson Test Prep software, 505\nexam customization, 507-508\nexam updates, 508\noffline access, 506-507\nonline access, 505\nPremium Edition, 508-509\nPowerShell, 349-350, 433, 462\nPowerSploit, 351-353, 434\nProcDump, 301\nProxychains, 439\nPSExec, 355-356\npsudp, 441\nQualys scanner, 404\nRadamsa, 459\nRainbowCrack, 429-430\nRDP (Remote Desktop Protocol), 433\nReaver, 197\nRecon-ng, 90-102, 382-389\nhackertarget module, 96\nhelp menu, 92\nkey list command, 96-97\nkeys add command, 386\n\ntools 571\n\nkeys list command, 386-387\nlaunching, 91\nmain menu and splash page, 91\nsearches, 95\nShodan API, 96-102\nshow info command, 387-388\nshow modules command, 92-95,\n383-386\nsupport resources, 389\nuse command, 387-389\nSecurity Onion, 457\nShodan API, 96-102, 378-380\nSIFT (SANS Investigative Forensic\nToolkit) Workstation, 458\nSkadi, 457\nsmtp-user-enum, 161-163\nsocat, 345\nSonarQube, 458\nSQLmap, 404-410\nSSLStrip, 174\nSysinternals, 355-356\ntcpdump, 90, 215, 282-284\nTheharvester, 376-378\nTor, 438-439\n‘TrevorC2, 345\nTry-SQL Editor, 229\nTshark, 284\n‘Twittor, 345\nuse cases for, 365\nVeil, 434-437\nvmss2core, 301\nVNC, 433\nW3AF scanner, 415-419\nW3AFusage, 419\nWebGoat, 225, 231, 254\nWhois, 372-373\nWindows Debugger, 452\nWireshark, 90, 216\nWMI (Windows Management\nInstrumentation), 354-355\nWMImplant, 345\nwsc2, 345",
    "Page_119": "572\n\ntools\n\nX server forwarding, 433\nXPosed, 315\nZAP (Zed Attack Proxy), 41, 214, 251,\n413-414\nZenmap, 393-395\nTor, 438-439\nTRACE method (HTTP), 217\ntransfer of risk, 49\nTrevorC2, 345\nTry2Hack, 225\nTry-SQL Editor, 229\nTshark, 284\ntunneling, DNS (Domain Name System),\n440-442\n‘Twittor, 345\n\nU\n\nUDP (User Datagram Protocol), Nmap\nUDP scans, 74-75\n\nUI (User Interaction) metrics, 37\n\nunauthenticated scans, 104-105\n\nuniform resource locators (URLs),\n219-220\n\nunilateral NDAs (nondisclosure\nagreements), 43\n\nUNION operator, 233, 235-236\n\nUnix, privilege escalation in, 291-293\n\nunprotected APIs, 267-270\n\nUnstructured Supplementary Service\nData (USSD), 323\n\nUpdate Products button (Pearson Test\nPrep software), 508\n\nUPDATE statement, 228\n\nupdating Pearson Test Prep software,\n508\n\nupload command, 343\n\nUpload Manager screen (Dradis), 484\n\nUpload Output from Tool option\n(Dradis), 483-484\n\nurgency, in social engineering, 137\n\nURLs (uniform resource locators),\n219-220\n\nUSB key drops, 138\n\nUS-CERT (U.S. Computer Emergency\nReadiness Team), 113\n\nuse cases, 365\n\nuse command, 387-389\n\nuse exploit/windows/smb/ms17_010_\neternalblue command, 155\n\nuser enumeration, 80-81\n\nUser Interaction (UI) metrics, 37\n\nuseradd command, 295\n\nusermod command, 294-295\n\nusers, creating, 346\n\nUSSD (Unstructured Supplementary\nService Data), 323\n\nutilities. See tools\n\nVv\n\nVanhoef, Mathy, 196\n\nVeil, 434-437\n\nverbose error handling, 266\n\nVicnum, 225\n\nvisudo command, 296\n\nVLANs (virtual LANs), hopping,\n\n181-183\n\nVMs (virtual machines)\ncontainers compared to, 311-312\ndumping memory from, 301\nescaping, 310\n\n.vmsn file extension, 301\n\n.vinss file extension, 301\n\nvmss2core, 301-302\n\nVMware Snapshot, 302\n\nVNC, 348, 433\n\nvoice phishing, 135\n\nVolatility Foundation, 302\n\nVolatility Framework, 301\n\nVRFY command (SMTP), 161\n\nvulnerability management, 115-116\nchaining analysis, 37-38\nimpact analysis, 34-37\ntheoretical vulnerabilities, 38\n\nvulnerability scans, 103, 400",
    "Page_120": "authenticated, 105\n\nchallenges of, 109-112\n\ncompliance, 109-110\n\nDirbuster, 419\n\ndiscovery, 106\n\nfull, 106-108\n\nhow it works, 103-104\n\nNessus, 403-404\n\nNikto, 84, 410-413, 488-489\n\nOpenVAS, 401-403\n\nQualys, 404\n\nresults analysis, 112-113\n\nSQLmap, 404-410\n\nstealth, 108-109\n\nsupport resources, 113-115\n\ntools, 18-19\n\nunauthenticated, 104-105\n\nvulnerability management, 115-116\n\nW3AK, 415-419\n\nZAP (Zed Attack Proxy), 41, 214, 251,\n413-414\n\nWw\nW3AF scanner, 415-419\nW3AFusage, 419\nW3Schools, 218, 229\nWADL (Web Application Description\nLanguage), 40, 268\nWAFs (web application firewalls), 46\nWannaCry, 8\nwar driving, 190\nWassenaar Arrangement, 439\nweak cryptographic algorithms, 243-244\nWeb Application Description Language\n(WADL), 40, 268\nweb applications\nauthentication-based vulnerabilities\ncredential brute forcing, 243-245\ndefault credential exploits, 249-250\nKerberos exploits, 250\nredirect attacks, 249\nsession hijacking, 245-249\n\nweb applications 573\n\nauthorization-based vulnerabilities\nInsecure Direct Object Reference\nvulnerabilities, 251-252\nparameter pollution, 250-251\nclickjacking, 261\ncommand injection vulnerabilities,\n241-242\nCSRF (cross-site request forgery),\n260-261\nenumeration, 83-84\nfile inclusion vulnerabilities\nLFI (local file inclusion), 264\nRFI (remote file inclusion), 264-265\nHTML injection vulnerabilities, 241\nHTTP (Hypertext Transfer Protocol),\n213-221\nclients, 213\nproxies, 214\nrequest/response model, 215-218\nservers, 213\nsessions, 213\nURLs (uniform resource locators),\n219-220\ninsecure code practices\ncode signing, lack of, 270\nerror-handling errors, 266\nhard-coded credentials, 266\nhidden elements, 270\nrace conditions, 266-267\nsource code comments, 265-266\nunprotected APIs, 267-270\nlabs for, 224-227\nsecurity misconfigurations, 262\ncookie manipulation attacks,\n263-264\ndirectory traversal vulnerabilities,\n262-263\nSQL injection vulnerabilities, 228\nblind SQL injection, 237\nBoolean technique, 233, 237\ncategories of, 232-234\ndatabase fingerprinting, 234-235",
    "Page_121": "web applications\n\nerror-based technique, 233\nexamples of, 228-232\nmitigations, 240\nout-of-band technique, 233, 237-238\nstored procedures, 239-240\ntime-delay technique, 233, 239\nUNION operator technique, 233,\n235-236\ntests, 11\nWAFs (web application firewalls), 46\nweb sessions, 221-224\nXSS (cross-site scripting) vulnerabili-\nties, 252-253\nDOM -based XSS attacks, 256-257\nevasion techniques, 257-258\nmitigations, 258-259\nreflected XSS attacks, 253-254\nstored XSS attacks, 255-256\nweb browsers, 309\nweb form-grabbing keyloggers, 307\nweb page enumeration, 83-84\nWeb Security Dojo, 225, 227\nWeb Services Description Language\n(WSDL), 40, 268\nweb sessions, 221-224\nwebcam_list command, 344\nwebcam_snap command, 344\nWebGoat, 225, 231, 254\nWEP (Wired Equivalent Privacy) attacks,\n190-192\nwhaling, 135\nwhite lists, 46\nwhite-box tests, 12-13, 47\nWhois, 372-373\nWi-Fi Protected Access (WPA) attacks,\n192-196\nWi-Fi Protected Setup (WPS), 197\nWiGLE, 190\nWindows\nDebugger, 452\nlegitimate utilities for post-exploitation\ntasks, 349\n\nEmpire, 353-354\nPowerShell, 349-350\nPowerSploit, 351-353\nPSExec, 355-356\nSysinternals, 355-356\nWMI (Windows Management\nInstrumentation), 354-355\nprivilege escalation\nclear-test credentials in LDAP,\n300-301\ncontainer security, 310-314\nCPassword, 299\nDLL (dynamic link library)\nhijacking, 303-304\nexploitable services, 304-305\nGroup Policy, 305-306\ninsecure file/folder permissions, 305\nKerberoast, 301\nkeyloggers, 306-307\nLSASS (Local Security Authority\nSubsystem Service) credentials,\n301-302\nSAM (Security Account Manager)\ndatabase, 302-303\nsandbox escape, 308-310\nscheduled tasks, 307-308\nVM (virtual machine) escape, 310\nSysinternals, 302\nWinRM (Windows Remote\nManagement), 354\nWMI (Windows Management\nInstrumentation), 172, 354-355\nWinRM (Windows Remote\nManagement), 354\nWired Equivalent Privacy (WEP),\n190-192, 243\nwireless adapters, 189\nwireless network tests, 459\nwireless network vulnerabilities\ncredential harvesting, 199-200\ndeauthentication attacks, 186-189\nevil twin attacks, 185-186",
    "Page_122": "fragmentation attacks, 197-198\nIV (initialization vector) attacks, 190\nKARMA attacks, 197\nKRACK (key reinstallation attack),\n196-197\nnetwork tests, 11\nPNL (preferred network list) attacks,\n189\nRFID (radio-frequency identification)\nattacks, 200\nrogue access points, 185\nsignal jamming, 189\nwar driving, 190\nWEP (Wired Equivalent Privacy)\nattacks, 190-192\nWPA (Wi-Fi Protected Access) attacks,\n192-196\nWPS (Wi-Fi Protected Setup), 197\nWireshark, 90, 216\nWMI (Windows Management\nInstrumentation), 172, 354-355\nWMI mplant, 345\nwordlists\ncreating with CeWL, 43 1-432\ndefined, 423\nrockyou, 424\nworkgroups, 150\nWPA (Wi-Fi Protected Access) attacks,\n192-196\nWPS (Wi-Fi Protected Setup), 197\n“Writing a Penetration Testing Report”\nwhitepaper, 493\n\nZygote 575\n\nwriting reports\nbest practices, 475, 476-478\nimportance of, 475-476\nwsc2, 345\nWSDL (Web Services Description\nLanguage), 40, 268\n\nXx\n\nX server forwarding, 348, 433\n\nx86 file, 319\n\nx86_64 file, 319\n\nXN (eXecute Never), 324\n\nXPosed, 315\n\nXSS (cross-site scripting) vulnerabilities,\n\n252-253\n\nDOM -based XSS attacks, 256-257\nevasion techniques, 257-259\nreflected XSS attacks, 253-254\nstored XSS attacks, 255-256\n\nY\n\nYppasswdd, 284\nYpserv, 284\nYpxfrd, 284\n\nZz\n\nZAP (Zed Attack Proxy), 41, 214, 251,\n413-414\n\nZenmap, 393-395\n\nzero-day attacks, 8\n\nZygote, 319-320"
}
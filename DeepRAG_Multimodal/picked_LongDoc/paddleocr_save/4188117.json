{
    "Page_1": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirinr\nConcurrent Robin Hood\nHashing\nSupervisor: Barak A. Pearlmutter",
    "Page_2": "IRISH RESEARCH COUNCIL\nMotivations\n· Make improvements on a 10 year old state of the art.\nliterature.\nContributions\n· First linearisable concurrent variant of Robin Hood Hashing\n· Strong application of new K-cAS developments [Arbel-Raviv,,\nBrown; 2016]\n· Competitive performance compared to state of the art\nconcurrent hash tables.",
    "Page_3": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nGeneral talk structure\n· Hash table and Robin Hood background\n· Challenges with concurrent Robin Hood\n· What are the options?\n· Solution\n· Correctness/Progress\n·Evaluation",
    "Page_4": "IRISHRESEARCHCOUNCIL\nHash Tables\n· Constant time O(1) set/map\nstructures\n Set operations:\n1. Contains(Key)\n2. Add(Key)\n3. Remove(Key)\n· No need for sorting of keys, unlike tree-based\nsets/maps\n· Require a hash function for keys\n Applications: Search, Object representation in\nVMs/interpretors, caches...",
    "Page_5": "IRISH RESEARCH COUNCIL\nHash Tables\nDivided into two camps: Open vs Closed Addressing.\nOpen Addressing.\n· Items are stored in individual buckets only.\n· If bucket is already taken find a new one: Collision\nalgorithm.\nClosed Addressing.\n· Items are stored at original bucket only.\n· Typically in a linked list structure.",
    "Page_6": "IRISHRESEARCHCOUNCIL\nAn Chomhairle um Thaighde in Eirinr\nRobin Hood Hashing\n(Open Addressing)",
    "Page_7": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood [Celis ;86]",
    "Page_8": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nand give to the poor.",
    "Page_9": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nand give to the poor.\nSearch: Linear probing with\nculling.",
    "Page_10": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nand give to the poor.\nSearch: Linear probing with\nculling.\nInsertion: Linear probing with\nconditional recursive\ndisplacement.",
    "Page_11": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nand give to the poor.\nSearch: Linear probing with\nculling.\nInsertion: Linear probing with\nconditional recursive\ndisplacement.\nRemoval: Backward shifting.\nMore on that later.",
    "Page_12": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirini\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nDefinition: The number of buckets\nand give to the poor.\naway an entry is from its ideal\nbucket - Distance From Bucket\n(DFB)\nSearch: Linear probing with\nculling.\nInsertion: Linear probing with\nconditional recursive\ndisplacement.\nRemoval: Backward shifting.\nMore on that later.",
    "Page_13": "IRISH RESEARCH COUNCIL\nnChomhairleumThaighdeinEirini\nRobin Hood [Celis ;86]\nMotto: Steal from the rich\nDefinition: The number of buckets\nand give to the poor.\naway an entry is from its ideal\nbucket - Distance From Bucket\n(DFB)\nSearch: Linear probing with\nculling.\nInsertion: Linear probing with If relocated item has bigger DFB\nconditional recursive\nthan than current, kick current out,\ndisplacement.\ntake spot, and recursively insert\ncurrent further down the table.\nRemoval: Backward shifting.\nMore on that later.\n<>",
    "Page_14": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nLinear Probing vs Robin Hood\nInitial Table, inserting V.\nXoY1 Z1 W1{",
    "Page_15": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nLinear Probing vs Robin Hood\nInitial Table, inserting V.\nKey:\nXo Y1 Z1 W1\n· Moved item\n Inserted\nitem\nLinear Probing Table\nXo Y Z1 W",
    "Page_16": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nLinear Probing vs Robin Hood\nInitial Table, inserting V.\nKey:\nXo Y1 Z1 W1\n· Moved item\nInserted\nitem\nLinear Probing Table\nRobin Hood Table\nXoY1\n[Z1 W\nZ2\nW\nV",
    "Page_17": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nLinear Probing vs Robin Hood\nInitial Table, inserting V.\nKey:\nXo Y1 Z1 W1\n· Moved item\nInserted\nitem\nLinear Probing Table\nRobin Hood Table\nXo\nY，\nZ,\nW\nW\nLess work\n Less distance variance",
    "Page_18": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood Search",
    "Page_19": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood Search\nLinear probe as normal.",
    "Page_20": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood Search\nLinear probe as normal.\nWhen you see someone not\nas far away as you: Stop.",
    "Page_21": "IRISHRESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood Search\nLinear probe as normal.\nXo Y1 V2 Z2 W2\nWhen you see someone not\nas far away as you: Stop.",
    "Page_22": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hood Search\nLinear probe as normal.\nY,V2\nZ2W\n→U1\nWhen you see someone not\nXo Y1 V2 Z2 W2\nas far away as you: Stop.",
    "Page_23": "IRISH RESEARCH COUNCIL\nnChomhairleumThaighdeinEirinr\nRobin Hood Search\nLinear probe as normal.\nYV2\nZ2W\nX\nWhen you see someone not\nXo\nV2\nZ2W2\nY\nas far away as you: Stop.\nU\nXo\nY1V2 Z2W2",
    "Page_24": "IRISH RESEARCH COUNCIL\nRobin Hood Search\nLinear probe as normal.\nYi\nZ2W\nV\nU\nWhen you see someone not\nXo\nY1\nV2\nZ2W\nas far away as you: Stop.\nU\nY1\nV2\nZ2W2\nXo\nYil\n[V2\n2Z2W2",
    "Page_25": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nRobin Hoodbenefits",
    "Page_26": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nRobin Hood benefits\n1. Fast, predictable performance:\n Optimised for reads - 2.6 probes per successful\nsearch.\n· log(n) on failed search.\n· Doesn't degenerate over time (poisoning).",
    "Page_27": "IRISH RESEARCH COUNCIL\nRobin Hood benefits\n1. Fast, predictable performance:\nsearch.\n· log(n) on failed search.\n· Doesn't degenerate over time (poisoning).\n2. Relatively simple:\n· No linked list or pointer manipulation",
    "Page_28": "IRISH RESEARCH COUNCIL\nRobin Hood benefits\n1. Fast, predictable performance:\nsearch.\n· log(n) on failed search.\n· Doesn't degenerate over time (poisoning).\n2. Relatively simple:\n· No linked list or pointer manipulation.\n3. Cache efficient.\n· Flat data, low probes.\n· No dynamic allocation.\n· Probes are generally on a single cache\n<>\nline.",
    "Page_29": "IRISH RESEARCH COUNCIL\nChomhairleumThaighdeinEirini\nStandard solution:\nShardedlocks\nXoY1 V2 Z2W2· ··\nS\nAo B1 C2 D2C",
    "Page_30": "IRISH RESEARCH COUNCIL\nChomhairleumThaighdeinEirinr\nStandard solution:\nShardedlocks\nC2D2Q\nXo| Y, V2 Z2\nW.\nB\n· Could grab multiple locks\n· Could result in deadlock, if allowed to wrap around.",
    "Page_31": "IRISHRESEARCHCOUNCIL\nChomhairleumThaighdeinEirinr\nStandard Solution:\nShardedlocks\nD\nY\nB,\nC\nC\nX\n● Could grab multiple locks\n· Could result in deadlock, if allowed to wrap around.\n· Not very clean for our case: Need extra phantom segment to\nstop deadlock.\nHacky. Slow. Lots of contention.",
    "Page_32": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirinr\nContention: Remove",
    "Page_33": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirini\nContention: Remove\nFirst part is normal search.",
    "Page_34": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nContention: Remove\nFirst part is normal search.\nWhen you find the entry\ndelete it, move everyone\nback by 1.",
    "Page_35": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nContention: Remove\nFirst part is normal search.\nWhen you find the entry\ndelete it, move everyone\nback by 1.\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\nNull.",
    "Page_36": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nContention: Remove\nFirst part is normal search.\nInitial table.\nWhen you find the entry\ndelete it, move everyone\nVZ2W\nback by 1.\nWe want to delete Y.\nStopping condition: The\nentry you're moving back\nhas a distance of O or it's a\nNull.",
    "Page_37": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nContention: Remove\nFirst part is normal search.\nInitial table.\nWhen you find the entry\ndelete it, move everyone\nZ2W\nVl\nback by 1.\nWe want to delete Y.\nStopping condition: The\nentry you're moving back\nY deleted.\nhas a distance of o or it's a\nNull.\nXo\nV1 ZiW",
    "Page_38": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirinr\nContention: Remove\nFirst part is normal search.\nInitial table.\nWhen you find the entry\ndelete it, move everyone\nZ2 W\nback by 1.\nWe want to delete Y.\nStopping condition: The\nentry you're moving back\nY deleted.\nhas a distance of O or it's a\nNull.\nXo\nV1 ZiW\nGreat source of contention.",
    "Page_39": "Problems with creating\nIRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nConcurrent Robin Hood",
    "Page_40": "Problems with creating\nIRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nConcurrent Robin Hood\n· Lots of moving parts. Performance problem",
    "Page_41": "Problems with creating\nIRISHRESEARCHCOUNCIL\nConcurrent Robin Hood\n· Lots of moving parts. Performance problem.\n· An insert can trigger a global table reorganisation.",
    "Page_42": "Problems with creating\nIRISH RESEARCHCOUNCIL\nConcurrent Robin Hood\n· Lots of moving parts. Performance problem.\n· An insert can trigger a global table reorganisation.\n Cyclic lock grabbing. If locks are sharded, deadlock is\npossible.\n· Huge contention on Remove.\n<>",
    "Page_43": "Problems with creating\nIRISH RESEARCH COUNCIL\nConcurrent Robin Hood\n· Lots of moving parts. Performance problem.\n· An insert can trigger a global table reorganisation.\n Cyclic lock grabbing. If locks are sharded, deadlock is\npossible.\n· Huge contention on Remove.\nPossible Solutions\n· Bespoke non-blocking solution\n· Transactional Memory\n· K-cAS (Multi-word compare and\nswap)\n<>",
    "Page_44": "IRISHRESEARCHCOUNCIL\nIssues with bespoke\nnChomhairleumThaighdeinEirinr",
    "Page_45": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nIssues with bespoke\n1. Use of dynamic memory, ruins cache locality. Slow.",
    "Page_46": "IRISHRESEARCHCOUNCIL\nIssues with bespoke\n1. Use of dynamic memory, ruins cache locality. Slow.\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.",
    "Page_47": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirin\nIssues with bespoke\n1. Use of dynamic memory, ruins cache locality. Slow.\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.\n3. End up reimplementing K-cCAs. Why not just use K\nCAS?\n<>",
    "Page_48": "IRISH RESEARCH COUNCIL\nIssues with bespoke\n1. Use of dynamic memory, ruins cache locality. Slow.\n2. Horrendously complicated. Difficult to even to get\ninsertion working. Robin Hood invariant must hold all the\ntime.\n3. End up reimplementing K-cAs. Why not just use K-\nCAS?\nMethod Chosen: K-CAs\nK-cAs is a multi-word compare-and-swap\nprimitive. Each table operation is\ndescribed as one large K-CAS.\n<>",
    "Page_49": "IRISHRESEARCHCOUNCIL\nOur Solution:\nChomhairleumThaighdeinEirinr\nshardedtimestamps\nTo\nT\nXoY1V2 Z2W2· · (\nB1 C2 D2C\nSimilar to lock-base sharding. Groups of timestamps protect the\ntable.\nEach relocation operation increments the timestamp. Except\nrelocations can be done in bulk.",
    "Page_50": "IRISHRESEARCHCOUNCIL\nK-CASwithout\nnChomhairleumThaighdeinEirini\ntimestamps\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.",
    "Page_51": "IRISH RESEARCH COUNCIL\nK-CAswithout\nAnChomhairleumThaighdeinEirini\ntimestamps\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_52": "IRISH RESEARCH COUNCIL\nTry find V.\nK-CASwithout\numThaighdeinEirini\nVo\ntimestamps\nXo\nYiV2\n2Z2W2\nSay our K-CAS solution just\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_53": "IRISH RESEARCH COUNCIL\nTry find V.\nK-CAswithout\nChomhairleumThaighdeinEirini\nVo\ntimestamps\nY1\nW\nV.\nL2\nSay our K-CAS solution just\nW\nencapsulates every modifying\noperation {Add, Remove} into a\nK-CAS operation.\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_54": "IRISH RESEARCH COUNCIL\nK-CASwithout\nTry find V.\nChomhairleumThaighdeinEirinr\nVo\ntimestamps\nX\nY1\nW\nV\nL2\nSay our K-CAS solution just\nN\nencapsulates every modifying\noperation {Add, Remove} into a\nBefore check V get interrupted.\nK-CAS operation.\n>U\nXo\nY1 V2 Z2W2\nReaders of the table may\nmiss entries that are moved\nbackwards by remove.",
    "Page_55": "IRISH RESEARCH COUNCIL\nK-CAswithout\nTry find V.\nnChomhairleumThaighdeinEirini\nVo\ntimestamps\nY1\nW\nSay our K-CAS solution just\nencapsulates every modifying\nOperation {Add, Remove} into a\nBefore check V get interrupted.\nK-CAS operation.\nReaders of the table may\nZ2W2\nV\nmiss entries that are moved\nDelete Y. Move V back. Find Z, exit.\nbackwards by remove.\nV2\nX\nW",
    "Page_56": "IRISHRESEARCHCOUNCIL\nOur Solution: Example\nChomhairleumThaighdeinEirinr\n4\n5\nXo Y1 V2Z20. . ·\nAo B1 C2 D20\nGoing to delete Y from table, with concurrent reader.",
    "Page_57": "IRISHRESEARCHCOUNCIL\nOur Solution: Example\nChomhairleumThaighdeinEirinr\n4\n5\nXo Desc\ncV2\nN2\nAoB1C2 D2\n&V V\n&Z z\n&T45\n&Y\nV\n&T1\nY\nZ8\nS\n5\n6\nUgly little array is a deletion descriptor.\nMoves items. Increments two timestamps.",
    "Page_58": "IRISHRESEARCHCOUNCIL\nOur Solution: Example\nnChomhairleumThaighdeinEirinr\n5\n6\nN\nB1\nC2D2\nAo\nReader misses V, due to deletion of Y\nReader sees timestamp change, restarts operation.",
    "Page_59": "IRISHRESEARCHCOUNCIL\nOur Solution: Benefits\nnChomhairleumThaighdeinEirinr",
    "Page_60": "IRISHRESEARCHCOUNCIL\nOur Solution: Benefits\nnChomhairleumThaighdeinEirini\nRelatively simple design, close to the sequential\nalgorithm.",
    "Page_61": "IRISH RESEARCH COUNCIL\nOur Solution: Benefits\nnChomhairleumThaighdeinEirin\nRelatively simple design, close to the sequential\nalgorithm.\nNo dynamic memory, great cache\nperformance. Minimal memory overhead.\nSimilar amount of CAs operations as bespoke dynamic memory\nsolution.\n<>",
    "Page_62": "IRISH RESEARCH COUNCIL\nOur Solution: Benefits\nRelatively simple design, close to the sequential\nalgorithm.\nNo dynamic memory, great cache\nperformance. Minimal memory overhead.\nSimilar amount of CAs operations as bespoke dynamic memory\nsolution.\nUse of K-cAs allows for thread collaboration. Well defined non-\nblocking progress guarantees\nBulk relocation greatly reduces contention. Fast.\n<>",
    "Page_63": "IRISH RESEARCH COUNCIL\nOur Solution: Correctness\nAnChomhairleumThaighdeinEirini",
    "Page_64": "IRISH RESEARCH COUNCIL\nOur Solution: Correctness\nAnChomhairleumThaighdeinEirini\nSimple design means simple proof. Correctness is\ninformally argued.",
    "Page_65": "IRISHRESEARCHCOUNCIL\nOur Solution: Correctness\nSimple design means simple proof. Correctness is\ninformally argued.\nEvery modifying operation is a K-cAs operation. Cannot be\nseen midway.\nBefore any actions attempts to take effect they re-read\ntimestamps. If any discrepancies are seen, retry\noperation.\n<>",
    "Page_66": "IRISHRESEARCHCOUNCIL\nOur Solution: Progress\nnChomhairleumThaighdeinEirini",
    "Page_67": "IRISHRESEARCHCOUNCIL\nOur Solution: Progress\nAnChomhairleumThaighdeinEirini\nSolution is obstruction-free/lock-free. Obstruction-free\nContains, lock-free Add and Remove.",
    "Page_68": "IRISHRESEARCHCOUNCIL\nOur Solution: Progress\nSolution is obstruction-free/lock-free. Obstruction-free\nContains, lock-free Add and Remove.\nEvery operation checks timestamps before the operation\ncompletes. Timestamps are coarse so operations can impede\neach other.\nThe impeding of contains means potentially no Contains\nwill pass, but at least one Add or Remove will get through.\n<>",
    "Page_69": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirinr\nBenchmarking setup",
    "Page_70": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nBenchmarking setup\nHardware\n● 4 x Intel? Xeon? CPU E7-8890 v3, 18 cores each, 2\nthreads per core, 144 threads in total\n· HyperThreading avoided until the end\n PAPl used to measure various CPU artefacts\n· numact/ to control memory allocation",
    "Page_71": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nBenchmarking setup\nHardware\n● 4 x Intel? Xeon? CPU E7-8890 v3, 18 cores each, 2\nthreads per core, 144 threads in total\n· HyperThreading avoided until the end\n· PAPl used to measure various CPU artefacts\n· numact/ to control memory allocation\nSoftware\n· Microbenchmark measuring operations per\nmicrosecond\n· A number of strong performing concurrent hash tables\n· Four load factors of 20%, 40%, 60%, and 80%\n· Two read/write workloads of 1o% and 20%\n<>",
    "Page_72": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nTables - Explainer",
    "Page_73": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirini\nTables - Explainer\n· Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nseparate chaining.",
    "Page_74": "IRISHRESEARCHCOUNCIL\nAnChomhairleumThaighdeinEirinr\nTables - Explainer\n· Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nseparate chaining.\n Lock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.",
    "Page_75": "IRISH RESEARCH COUNCIL\nAnChomhairleumThaighdeinEirini\nTables - Explainer\n· Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nseparate chaining.\n· Lock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.\n· Separate Chaining [Maged Michael; 2003]: Per-bucket lock-free\nlinked lists.",
    "Page_76": "IRISH RESEARCH COUNCIL\nTables - Explainer\n· Hopscotch Hashing [Herlihy, Shavit, Tzafrir; 2008]: Flattened\nseparate chaining.\n· Lock-Free Linear Probing [Nielsen, Karlsson; 2016] : State\nsimplified Purcell, Harris Table.\n· Separate Chaining [Maged Michael; 2003]: Per-bucket lock-free\nlinked lists.\n· Lock-Elision Robin Hood. Serial algorithm with hardware\ntransactional lock-elision wrapper\n· K-CAS Robin Hood Hash. K-CAS with sharded timestamps",
    "Page_77": "IRISHRESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\nPerformance 20%/40%\n20% LF w update rate: 10%\n40% LF w update rate: 10%\n600\n600\nmicrosecond\nK-CAS RH\nK-CAS RH\nLocked HS\nLocked HS\n500\n500\nLock-Free LP\nLock-Free LP\nMaged Michael\nMaged Michael\no Transactional RH\n400\nTransactional RH\nTotal Ops / \nTotal Ops / \n300\n300\n200\n200\n100\n100\nper\n918\n36\n54\n72\n90\n108126\n144\n0\n918\n36\n54\n72\n90\n108\n126\n144\nThread Count\nThread Count\nTotal Operations \n20% LF w update rate: 20%\n40% LF w update rate: 20%\n450\n450\nK-CAS RH\nK-CAS RH\n400\n400\nLocked HS\nLocked HS\n350\nLock-Free LP\n350\nLock-Free LP\n Maged Michael \nMaged Michael \n300\no Transactional RH\nTransactional RH\nTotal Ops / μ\n250\n250\n200\n200\n150\n150\n100\n100\n50\n4918\n36\n54\n72\n90\n108126144\n4918\n36\n54\n72\n90\n108126144\nThread Count\nThread Count\nNumber of threads.",
    "Page_78": "IRISH RESEARCH COUNCIL\nAn Chomhairle um Thaighde in Eirinn\nPerformance 60%/80%\n60% LF w update rate: 10%\n80% LF w update rate: 10%\n600\n600\nmicrosecond\nK-CAS RH\nK-CAS RH\nLocked HS\nLocked HS\n500\n500\nLock-Free LP\nLock-Free LP\nMaged Michael\nMaged Michael\nO Transactional RH\n400\nTransactional RH\nTotal Ops / \nTotal Ops / \n300\n300\n200\n200\n100\n100\nper\n918\n36\n54\n72\n90\n108126\n144\n918\n36\n54\n72\n90\n108\n126\n144\nThread Count\nThread Count\nTotal Operations \n60% LF w update rate: 20%\n80% LF w update rate: 20%\n450\n450\nK-CAS RH\nK-CAS RH\n400\n400\nLocked HS\nLocked HS\n350\nLock-Free LP\n350\nLock-Free LP\n Maged Michael \nMaged Michael \n300\noTransactional RH\nTransactional RH\nTotal Ops / μ\n250\n250\n200\n200\n150\n150\n100\n100\n50\n4918\n36\n54\n72\n90\n108126144\n918\n36\n54\n72\n90\n108126144\nThread Count\nThread Count\nNumber of threads.",
    "Page_79": "Performance Summary",
    "Page_80": "Performance Summary\nRobin Hood scales best in almost all workloads.\nOtherwise very competitive with Hopscotch Hashing.\nComfortably ahead (10%) with 10% update load.\nMore competitive (5%) with 20% updates",
    "Page_81": "Performance Summary\nRobin Hood scales best in almost all workloads\nOtherwise very competitive with Hopscotch Hashing\nComfortably ahead (10%) with 10% update load.\nMore competitive (5%) with 20% updates\nGap narrows during Hyperthreading\nHyperthreading. Then it dies and never recovers.\n<>",
    "Page_82": "conclusion\n· First linearisable concurrent variant of Robin Hood Hashing\n· Strong application of new K-cAs developments.\n· Competitive performance compared to state of the art\nconcurrent hash tables.\nFuture Work\n· Extended Robin Hood work (different timestamp\nencodings/placements, cache aware, vectorised, various\nlock-based solutions)\n Yahoo benchmark (YCSB)\n<>",
    "Page_83": "IRISHRESEARCHCOUNCIL\nnChomhairleumThaighdeinEirini\nThankyou!\nQuestions and\nComments?"
}
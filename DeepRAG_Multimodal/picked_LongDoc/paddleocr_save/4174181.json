{
    "Page_1": "OMAR SANTOS\nRON TAYLOR\nCert\nGuide\nLearn, prepare, and practice for exam success\nCompTIA\nPenTest+\nSave 10%\non Exam\nVoucher\nPEARSON IT\nSee Inside\nCERTIFICATION\nFREE SAMPLE\nCHAPTER\nSHAREWITH\nOTHERS\n8+\nS\nm",
    "Page_2": "CompTlA? PenTest+\nCert Guide\nOmar Santos\n Ron Taylor",
    "Page_3": "CompTIAPenTest+ Cert Guide\nEditor-in-Chief\nOmarSantos\nMark Taub\nRon Taylor\nProduct Line Manager\nCopyright ? 2019 by Pearson Education, Inc.\nBrettBartow\nAllrights reserved. No part of this book shall be reproduced, stored in a retrieval system, or transmitted\nby any means, electronic, mechanical, photocopying, recording, or otherwise, without written permission\nAcquisitions Editor\nfrom the publisher. No patent liability is assumed with respect to the use of the information contained\n Paul Carlstroem\n herein. Although every precaution has been taken in the preparation of this book,the publisher and\n author assume no responsibility for errors or omissions. Nor is any liability assumed for damages\nManaging Editor\nresulting from the use of the information contained herein.\nSandra Schroeder\nISBN-13: 978-0-7897-6035-7\nISBN-10: 0-7897-6035-5\nDevelopment Editor\nLibrary of Congress Control Number: 2018956261\nChristopher Cleveland \n0118\nProject Editor\nTrademarks\nMandie Frank\nAll terms mentioned in this book that are known to be trademarks or service marks have been appropriately\ncapitalized. Pearson IT Certification cannot attest to the accuracy of this information. Use of a term in this\nCopy Editor\n book should not be regarded as affecting the validity of any trademark or service mark.\nKitty Wilson\nTechnical Editors\nBOOK IS NOT SPONSORED OR ENDORSED BY OR AFFILIATED WITH THE MICROSOFT\nCORPORATION.\nChris McCoy\nBenjamin Taylor\nWarning and Disclaimer\nThis book is designed to provide information about the CompTIA PenTest+ exam. Every effort has been\nEditorial Assistant\nVanessa Evans\n information provided is on an “as is\" basis. The author and the publisher shall have neither liability nor\nresponsibility to any person or entity with respect to any loss or damages arising from the information\nDesigner\n contained in this book or from the use of the supplemental online content or programs accompanying it.\nChuti Prasertsith\nMICROSOFT AND/ORITS RESPECTIVESUPPLIERS MAKE NOREPRESENTATIONS\nABOUT THESUITABILITY OF THE INFORMATION CONTAINEDIN THE DOCUMENTS\nComposition\nAND RELATED GRAPHICS PUBLISHED AS PART OF THE SERVICES FOR ANY\ncodemantra\nPURPOSE.ALL SUCH DOCUMENTS AND RELATED GRAPHICS ARE PROVIDED “AS\nIS\"WITHOUT WARRANTY OFANY KIND. MICROSOFT AND/OR ITS RESPECTIVE\nIndexer\nSUPPLIERS HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH REGARD\n Erika Millen\nTO THIS INFORMATION, INCLUDING ALL WARRANTIES AND CONDITIONS OF\nMERCHANTABILITY, WHETHER EXPRESS, IMPLIED OR STATUTORY, FITNESS FOR\nA PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL\nProofreader\nMICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS BE LIABLE FOR ANY SPECIAL,\nChristopher Morris\nINDIRECT ORCONSEQUENTIALDAMAGES ORANY DAMAGESWHATSOEVER\nRESULTING FROM LOSS OF USE, DATA OR PROFITS,WHETHER IN ANACTION OF\nCONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,ARISING OUT OF OR IN\nFROM THE SERVICES.\nTHE DOCUMENTSAND RELATED GRAPHICS CONTAINED HEREIN COULD\nINCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES\nARE PERIODICALLY ADDED TO THE INFORMATION HEREIN. MICROSOFT AND/OR\nITS RESPECTIVE SUPPLIERS MAY MAKE IMPROVEMENTS AND/OR CHANGES IN THE\nSCREENSHOTS MAYBEVIEWEDINFULLWITHINTHESOFTWARE VERSIONSPECIFIED.",
    "Page_4": "Contents at a Glance\nIntroduction   xxili\nCHAPTER 1\nCHAPTER2\nPlanning and Scoping a Penetration Testing Assessment 25\nCHAPTER 3\nInformation Gathering and Vulnerability Identification63\nCHAPTER 4\nSocial Engineering Attacks121\nCHAPTER5\nExploiting Wired and Wireless Networks143\nCHAPTER6\nExploiting Application-Based Vulnerabilities207\nCHAPTER 7\nExploiting Local Host and Physical Security Vulnerabilities277\nCHAPTER8\nPerforming Post-Exploitation Techniques 333\nCHAPTER 9Penetration Testing Tools 361\nCHAPTER 10Understanding How to Finalize a Penetration Test471\nCHAPTER 11Final Preparation505\nAPPENDIX A Answers to the “Do I Know This Already?\" Quizzes and\nQ&A Sections 511\nIndex 541",
    "Page_5": "V\nCompTIA? PenTest+ Cert Guide\nContents\nIntroduction   xxili\nChapter 1\nIntroduction to Ethical Hacking and Penetration Testing 3\n\"Do I Know This Already?\" Quiz 3\n Understanding Ethical Hacking and Penetration Testing  6\nWhat Is the Difference Between Ethical Hacking and Nonethical\nHacking? 6\nWhy Do We Need to Do Penetration Testing? 7\nUnderstanding the Current Threat Landscape\n7\nRansomware 8\nIoT8\nThreat Actors  9\nExploring Penetration Testing Methodologies  10\nWhy Do We Need to Follow a Methodology for Penetration\nTesting? 10\nPenetration Testing Methods  11\nSurveying Penetration Testing Methodologies  13\nBuilding Your Own Lab 16\nRequirements and Guidelines for Penetration Testing Labs 18\nWhat Tools Should You Use in Your Lab?18\nWhat if You Break Something? 19\nReview All Key Topics 20\nDefine Key Terms  20\nQ&A21\nChapter 2\nPlanning and Scoping a Penetration Testing Assessment 25\n\"Do I Know This Already?\" Quiz 25\nExplaining the Importance of the Planning and Preparation Phase 29\nUnderstanding the Target Audience  29\n Rules of Engagement  30\nCommunication Escalation Path\n131\nConfidentiality of Findings  32\nBudget  32\nPoint-in-Time Assessment 33",
    "Page_6": "Contents\nImpact Analysis and Remediation Timelines  34\nDisclaimers  38\nTechnical Constraints  39\nSupport Resources 40\nUnderstanding the Legal Concepts of Penetration Testing   41\nContracts  41\nWritten Autborization42\nSOW42\nMSA42\nNDA43\nExport Restrictions  43\nCorporate Policies  43\nLearning How to Scope a Penetration Testing Engagement Properly  4\nScope Creep 44\nTypes of Assessment  45\nSpecial Scoping Considerations  45\nTarget Selection   46\nStrategy  47\nRisk Acceptance, Tolerance, and Management 47\nUnderstanding Risk Management48\nRisk Acceptance   48\nRisk Mitigation  48\nRisk Transfer, Avoidance, and Sharing 49\nRisk Appetite and Tolerance  49\nLearning the Key Aspects of Compliance-Based Assessments 50\nRules for Completing Compliance-Based Assessments 50\nRegulations in the Financial Sector50\nRegulations in the Healtbcare Sector52\nPayment Card Industry Data Security Standard (PCI DSS)53\nKey Technical Elements in Regulations You Sbould Consider56\nLimitations When Performing Compliance-Based Assessments  57\nReview All Key Topics  58\nDefine Key Terms 59\nQ&A59",
    "Page_7": "CompTIA? PenTest+ Cert Guide\nChapter3\nInformation Gathering and Vulnerability Identification 63\n\"Do I Know This Already?\" Quiz 63\nUnderstanding Information Gathering and Reconnaissance  67\nUnderstanding Active Reconnaissance vs. Passive Reconnaissance  70\nUnderstanding Active Reconnaissance 71\nNmap Scan Types  73\nTCP Connect Scan (-sT)73\nUDP Scan (-sU)74\nTCP FIN Scan (-sF) 76\nPing scan (-sn)77\nExploring the Different Types of Enumeration  78\nHost Enumeration78\nUser Enumeration80\nGroup Enumeration81\nNetwork Share Enumeration82\nWebPageEnumeration/Web Application Enumeration83\nService Enumeration   85\nExploring Enumeration via Packet Crafting85\nUnderstanding Passive Reconnaissance 87\nDomain Enumeration  88\nPacket Inspection and Eavesdropping  90\nUnderstanding Open Source Intelligence (OSINT) Gathering 90\nExploring Reconnaissance with Recon-ng 90\nUnderstanding the Art of Performing Vulnerability Scans  103\nHow a Typical Automated Vulnerability Scanner Works\n6103\nUnderstanding the Types of Vulnerability Scans  104\nUnautbenticated Scans 104\nAuthenticated Scans 105\nDiscovery Scans  106\nFull Scans  106\nStealth Scans 108\nCompliance Scans 109\nChallenges to Consider When Running a Vulnerability Scan  110\nConsidering tbe Best Time to Run a Scan110",
    "Page_8": "Contents\nVii\nDetermining Wbat Protocols Are in Use 110\nNetwork Topology 110\nBandwidthLimitations111\nQuery Throttling 111\nFragile Systems/Nontraditional Assets111\n Understanding How to Analyze Vulnerability Scan Results 112\nUS-CERT113\nThe CERT Division of Carnegie Mellon University 113\nNIST 114\nJPCERT 114\nCAPEC 114\nCVE114\nCWE115\nHow to Deal with a Vulnerability  115\nReview All Key Topics 116\nDefine Key Terms 117\nQ&A117\nChapter 4\nSocial Engineering Attacks 121\n\"Do I Know This Already?\" Quiz 121\nUnderstanding Social Engineering Attacks  125\nPhishing 126\nPharming 126\nMalvertising 127\nSpear Phishing\ng128\nSMS Phishing 134\nVoice Phishing 135\nWhaling 135\nElicitation, Interrogation, and Impersonation (Pretexting) 135\nSocial Engineering Motivation Techniques  137\nShoulder Surfing  137\nUSB Key Drop and Social Engineering  138\nReview All Key Topics  138\nDefine Key Terms 139\nQ&A139",
    "Page_9": "vii\nCompTIA? PenTest+ Cert Guide\nChapter 5\nExploiting Wired and Wireless Networks 143\n\"Do I Know This Already?\" Quiz 143\nExploiting Network-Based Vulnerabilities  148\nExploring Windows Name Resolution and SMB Attacks 148\nNetBIOSNameService and LLMNR148\nSMB Exploits  151\nDNS Cache Poisoning 155\nSNMP Exploits 157\nSMTP Exploits 159\nSMTP Open Relays 160\nUseful SMTP Commands 160\nUsing Known SMTP Server Exploits163\nFTP Exploits 166\nPass-the-Hash Attacks 168\nKerberos and LDAP-Based Attacks 169\nUnderstanding Man-in-the-Middle Attacks  173\nUnderstanding ARP Spoofing and ARP Cache Poisoning173\nDowngrade Attacks  175\nRoute Manipulation Attacks  175\nUnderstanding Denial-of-Service (DoS) and Distributed\nDenial-of-Service (DDoS) Attacks 176\nDirect DoS Attacks 176\nReflected DDoS Attacks 178\nAmplification DDoS Attacks178\nNetwork Access Control (NAC) Bypass 179\nVLAN Hopping  181\nDHCP Starvation Attacks and Rogue DHCP Servers 183\n Exploiting Wireless and RF-Based Attacks and Vulnerabilities  185\nInstalling Rogue Access Points  185\nEvil Twin Attacks 185\nDeauthentication Attacks 186\nAttacking the Preferred Network Lists 189\nJamming Wireless Signals and Causing Interference 189\nWar Driving  190",
    "Page_10": "Contents \nix\nInitialization Vector (IV) Attacks and Unsecured Wireless\nProtocols 190\nAttacking WEP 190\nAttacking WPA 192\nKRACKAttacks 196\nAttacking Wi-Fi Protected Setup (WPS)197\nKARMA Attacks 197\nFragmentation Attacks  197\nCredential Harvesting  199\n Bluejacking and Bluesnarfing 199\nRadio-Frequency Identification (RFID) Attacks 200\nReview All Key Topics  200\nDefine Key Terms 202\nQ&A202\nChapter 6\nExploiting Application-Based Vulnerabilities 207\n\"Do I Know This Already?\" Quiz 207\n Overview of Web Applications for Security Professionals  213\nThe HTTP Protocol 213\nUnderstanding Web Sessions  221\nHow to Build Your Own Web Application Lab 224\nUnderstanding Injection-Based Vulnerabilities  227\nExploiting SQL Injection Vulnerabilities  228\nA Brief Introduction to SQL228\nSQL Injection Categories  232\nFingerprinting a Database  234\nSurveying the UNION Exploitation Tecbnique 235\nUsing Booleans in SQL Injection Attacks  237\nUnderstanding Out-of-Band Exploitation237\nExploring the Time-Delay SQL Injection Tecbnique\n2239\nSurveying a Stored Procedure SQL Injection  239\nUnderstanding SQL Injection Mitigations  240\nHTML Injection Vulnerabilities  241\n Command Injection Vulnerabilities  241\nExploiting Authentication-Based Vulnerabilities 242",
    "Page_11": "CompTIA? PenTest+ Cert Guide\nExploring Credential Brute Forcing  243\nUnderstanding Session Hijacking  245\nUnderstanding Redirect Attacks  249\nTaking Advantage of Default Credentials  249\nExploiting Kerberos Vulnerabilities  250\nExploiting Authorization-Based Vulnerabilities250\nUnderstanding Parameter Pollution  250\nExploiting Insecure Direct Object Reference Vulnerabilities  251\nUnderstanding Cross-Site Scripting (XSS) Vulnerabilities 252\nReflected XSS Attacks 253\nStored XSS Attacks 255\nDOM-Based XSS Attacks256\nXSS Evasion Techniques  257\nXSS Mitigations  258\nUnderstanding Cross-Site Request Forgery Attacks  260\nUnderstanding Clickjacking  261\nExploiting Security Misconfigurations  262\nExploiting Directory Traversal Vulnerabilities 262\nUnderstanding Cookie Manipulation Attacks 263\nExploiting File Inclusion Vulnerabilities  264\nLocal File Inclusion Vulnerabilities  264\n Remote File Inclusion Vulnerabilities  264\nExploiting Insecure Code Practices  265\nComments in Source Code 265\nLack of Error Handling and Overly Verbose Error Handling 266\nHard-Coded Credentials  266\nRace Conditions  266\nUnprotected APIs 267\nHidden Elements 270\nLack of Code Signing  270\nReview All Key Topics  271\nDefine Key Terms 272\nQ&A273",
    "Page_12": "Contents \nxi\nChapter7\nExploiting Local Host and Physical Security Vulnerabilities 277\n\"Do I Know This Already?\" Quiz 277\nExploiting Local Host Vulnerabilities  281\nInsecure Service and Protocol Configurations  281\nLocal Privilege Escalation 285\nUnderstanding Linux Permissions  286\nUnderstanding SUID or SGID and Unix Programs  291\nInsecure SUDOImplementations294\nRet2libc Attacks 298\nWindows Privileges  299\nCPassword   299\nClear-Text Credentials in LDAP300\nKerberoasting 301\nCredentials in Local Security Autbority Subsystem Service (LSASS)301\nSAM Database 302\nUnderstanding Dynamic Link Library Hijacking303\nExploitable Services  304\nInsecure File and Folder Permissions 305\nUnderstanding Windows Group Policy  305\nKeyloggers  306\nScbeduled Tasks 307\nEscaping the Sandbox  308\nVirtual Macbine Escape  310\nUnderstanding Container Security\n310\nMobile Device Security  314\nUnderstanding Android Security  316\nUnderstanding Apple iOS Security   323\nUnderstanding Physical Security Attacks  326\nUnderstanding Physical Device Security  326\nProtecting Your Facilities Against Physical Security Attacks  327\nReview All Key Topics  328\nDefine Key Terms  329\nQ&A329",
    "Page_13": "xii\nCompTIA? PenTest+ Cert Guide\nChapter8\nPerforming Post-Exploitation Techniques 333\n\"Do I Know This Already?\" Quiz 333\nMaintaining Persistence After Compromising a System  337\nCreating Reverse and Bind Shells 338\nCommand and Control (C2) Utilities  344\nCreating and Manipulating Scheduled Jobs and Tasks  346\nCreating Custom Daemons, Processes, and Additional Backdoors 346\nCreating New Users  346\nUnderstanding How to Perform Lateral Movement 347\nPost-Exploitation Scanning   347\nUsing Remote Access Protocols 348\nUsing Windows Legitimate Utilities 349\nUsing PowerSbell for Post-Exploitation Tasks349\nUsing PowerSploit  351\nUsing the Windows Management Instrumentation for Post-Exploitation\nTasks354\nUsing Sysinternals and PSExec 355\nUnderstanding How to Cover Your Tracks and Clean Up Systems After a\nPenetration Testing Engagement 356\nReview All Key Topics  357\nDefine Key Terms 358\nQ&A358\nChapter 9\nPenetration Testing Tools361\n\"Do I Know This Already?\" Quiz 361\nUnderstanding the Different Use Cases of Penetration Testing Tools and\nHow to Analyze Their Output 365\nPenetration Testing-Focused Linux Distributions 365\nKali Linux366\nParrot 367\nBlackArch Linux367\nCAINE369\nSecurity Onion 369\nCommon Tools for Reconnaissance and Enumeration 370\nTools for Passive Reconnaissance370\nTools for Active Reconnaissance 390",
    "Page_14": "Contents\n!IX\nCommon Tools for Vulnerability Scanning 400\nCommon Tools for Credential Attacks420\nJobn the Ripper 420\nCain and Abel424\nHasbcat 425\nHydra428\nRainbowCrack 429\nMedusa and Ncrack430\nCeWL 431\nMimikatz 432\nPatator 432\nCommon Tools for Persistence 433\nCommon Tools for Evasion 434\nVeil 434\nTor438\nProxychbains 439\nEncryption  439\nEncapsulation and Tunneling Using DNS and Otber Protocols Like NTP440\nExploitation Frameworks 442\nMetasploit 442\nBeEF449\nCommon Decompilation, Disassembling, and Debugging Tools  450\nThe GNU Project Debuger (GDB)450\nWindows Debugger   452\nOllyDbg 452\nedb Debugger  452\nImmunity Debugger  454\nIDA454\nObjdump  455\nCommon Tools for Forensics 457\nCommon Tools for Software Assurance458\nFindbugs,Findsecbugs,and SonarQube458\nFuzzers and Fuzz Testing  458\nPeacb 459",
    "Page_15": "xiv\nCompTIA? PenTest+ Cert Guide\nMutiny Fuzzing Framework  459\nAmerican Fuzzy Lop459\nWireless Tools 459\n Leveraging Bash, Python, Ruby, and PowerShell in Penetration Testing\nEngagements  460\nIntroducing the Bash Shell  460\nA Brief Introduction to Python 461\nA Brief Introduction to Ruby 461\nA Brief Introduction to PowerShell  462\nReview All Key Topics  462\nDefine Key Terms  465\nQ&A465\nChapter 10Understanding How to Finalize a Penetration Test471\n\"Do I Know This Already?\" Quiz 471\nExplaining Post-Engagement Activities 474\nSurveying Report Writing Best Practices  475\nUnderstanding the Importance of a Quality Report  475\nDiscussing Best Practices of Writing a Penetration Testing Report 476\nKnowing Your Audience476\nAvoiding Cutting and Pasting  477\nRelating theFindings to theEnvironment477\nStarting the Report While You Are Testing  478\nExploring Tools for Collecting and Sharing Information  478\nUsing Dradis for Effctive Information Sharing and Reporting 478\nSteps in Using the Dradis Framework CE on Kali Linux 479\nExploring the Common Report Elements 490\nPCI Data Security Standard Reporting Guidelines  491\nExpanding on the Common Report Elements  493\nExecutive Summary 493\nMethodology   494\nFinding Metrics and Measurements494\nFindings and Recommendations for Remediation495",
    "Page_16": "Contents\nXV\nUnderstanding Report Handling and Communications Best Practices  499\nUnderstanding Best Practices in Report Handling 499\nCorrectly Classifying Report Contents 499\nControlling Distribution Metbod and Media499\nExplaining the Importance of Appropriate Communication  500\nReview All Key Topics  501\nDefine Key Terms 502\nQ&A502\nChapter 11 Final Preparation 505\nTools for Final Preparation\n1505\nPearson Cert Practice Test Engine and Questions on the Website  505\nAccessing thbe Pearson Test Prep Sofrware Online 506\nAccessing the Pearson Test Prep Softrware Offline 506\nCustomizing Your Exams 507\nUpdating Your Exams 508\nPremium Edition508\nChapter-Ending Review Tools  509\nSuggested Plan for Final Review/Study  509\nSummary  509\nAppendix A Answers to the “Do I Know This Already?\" Quizzes and\nQ&A Sections511\nIndex 541",
    "Page_17": "XVi\nCompTIA? PenTest+ Cert Guide\nAbout the Authors\nOmar Santos is a principal engineer in the Cisco Product Security Incident\nResponse Team (PSIRT) within Cisco's Security Research and Operations. He\nmentors and leads engineers and incident managers during the investigation and\nresolution of security vulnerabilities in all Cisco products, including cloud services.\n Omar has been working with information technology and cybersecurity since the\nmid-1990s. He has designed, implemented, and supported numerous secure\nnetworks for Fortune 100 and 500 companies and the U.S. government. Prior to\nhis current role, he was a technical leader within the Worldwide Security Practice\nand the Cisco Technical Assistance Center (TAC), where he taught, led, and\nmentored many engineers within both organizations.\nOmar is an active member of the security community, where he leads several indus-\n trywide initiatives and standards bodies. His active role helps businesses, academic\ninstitutions, state and local law enforcement agencies, and other participants that are\ndedicated to increasing the security of the critical infrastructure.\nOmar often delivers technical presentations at many cybersecurity conferences. He\nis the author of more than 20 books and video courses. You can follow Omar on any\nof the following:\n■ Personal website: omarsantos.io and theartofhacking.org\n■ Twitter: @santosomar\n■ LinkedIn: https://www.linkedin.com/in/santosomar\nRon Taylor has been in the information security field for almost 20 years, 10 of which\nwere spent in consulting. In 2008, he joined the Cisco Global Certification Team as\nan SME in information assurance. In 2012, he moved into a position with the Security\n Research & Operations group, where his focus was mostly on penetration testing of\n Cisco products and services. He was also involved in developing and presenting secu-\nrity training to internal development and test teams globally. In addition, he provided\nconsulting support to many product teams as an SME on product security testing. He\nthen spent some time as a consulting systems engineer specializing in Cisco's security\n product line. In his current role, he works in the Cisco Product Security Incident\n Response Team (PSIRT). He has held a number of industry certifications, including\nGPEN, GWEB, GCIA, GCIH, GWAPT, RHCE, CCSP, CCNA, CISSP, and MCSE.\n Ron is also a Cisco Security Blackbelt, SANS mentor, cofounder and president of the\n Raleigh BSides Security Conference, and an active member of the Packet Hacking \nVillage team at Defcon.\n You can follow Ron on any of the following:\n■ Twitter: @Gu5G0rman\n LinkedIn: www.linkedin.com/in/-RonTaylor",
    "Page_18": "Dedication\n!!IAX\nDedication\nI would like to dedicate this book to my lovely wife, Jeannette, and my two beautiful children,\nHannab and Derek, wbo bave inspired and supported me tbroughout the development of this book.\nI also dedicate this book to my father, Jose, and to the memory of my mother, Generosa. Without\ntheir knowledge, wisdom,and guidance, I would not bave tbe goals that I strive to acbieve today\nOmar\nThe most important thing in life is family:\nTo my wife of 17 years: Kathy, witbout your support and encouragement, I would not be where\nI am today.\nTo my kids, Kaitlyn, Alex, and Grace: You give me the strength and motivation to do wbat I do.\nTo my parents: It was your example that instilled in me the drive and work ethic that has gotten\nme this far.\n—Ron\nAcknowledgments\nThis book is a result of concerted efforts of various individuals whose help brought\nthis book to reality. We would like to thank the technical reviewers, Chris McCoy\nand Ben Taylor, for their significant contributions and expert guidance.\nWe would also like to express our gratitude to Chris Cleveland, Kitty Wilson,\nsupport throughout the development of this book.\nAbout the Technical Reviewers\nChris McCoy is a technical leader in the Cisco Advanced Security Initiatives\nGroup (ASIG). He has more than 20 years of experience in the networking and\nsecurity industry. He has a passion for computer security, finding flaws in mission-\ncritical systems, and designing mitigations to thwart motivated and resourceful adver-\nsaries. He was formerly with Spirent Communications and the U.S. Air Force. Chris\nis CCIE certified in the Routing & Switching and Service Provider tracks, which he\nhas held for more than 10 years. You can follow Chris on Twitter@chris_mccoy.\nBenjamin Taylor is a security researcher currently working in the Cisco Security and\nTrust Organization. He has worked in the security industry for more than 10 years.\nHis work spans numerous architectures and operating systems. His background and\nexperience include security evaluations, penetration testing, security architecture\nreviews, product security compliance, digital forensics, and reverse engineering.",
    "Page_19": "Xvili\nCompTIA?PenTest+ Cert Guide\nWe Want to Hear from You!\nAs the reader of this book, you are our most important critic and commentator\nWe value your opinion and want to know what we're doing right, what we could\n do better, what areas you'd like to see us publish in, and any other words of wisdom\n you're willing to pass our way.\nWe welcome your comments. You can email to let us know what you did or didn't\nlike about this book--as well as what we can do to make our books better.\nPlease note that we cannot belp you with tecbnical problems related to the topic of this book.\nWhen you write, please be sure to include this book's title and author as well as your\nname and email address. We will carefully review your comments and share them \nwith the author and editors who worked on the book.",
    "Page_20": "Credits \nxix\nCredits\nCover: GlebSStock/Shutterstock\nNIST Computer Security Resource Center defines the term Hacker\nSun Tzu, The Art of War\nHigh Level Organization of the Standard by The Penetration Testing Execution\nStandard\n PCI Security Standard council, Information Supplement: Penetration Testing\nGuidance\nPenetration Testing Framework 0.59 by VulnerabilityAssessment.co.uk\n Open Source Security Testing Methodology Manual (OSSTMM), Contemporary\n Security testing and analysis\nGLBA (12 U.S.C. § 1843(k))\nNY DFS Cybersecurity Regulation\nCovered Entities and Business Associates, The HIPAA Rules apply to covered\nentities and business associates.\n Payment Card Industry (PCI) Data Security Standard (DSS) and\nPayment Application Data Security Standard (PA-DSS), April 2016.\nElaine Barker, NIST Special Publication 800-57 Part 1 Revision 4\n Recommendation for Key Management Part 1: General, January 2016.\nFigure Credits\nFigure 2-1\n Screenshot of Gantt Chart @ 2018 Microsoft Corporation\nFigure 3-2 Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-4 Screenshot of Kali Linux @ 2018 Kali Linux\n Figure 3-6Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-8 Screenshot of Kali Linux @ 2018 Kali Linux\n Figure 3-10 Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-12 Screenshot of Kali Linux @ 2018 Kali Linux\n Figure 3-13 Screenshot of Kali Linux @ 2018 Kali Linux\n Figure 3-14Screenshot of Kali Linux ⊙ 2018 Kali Linux\nFigure 3-15Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-16 Screenshot of Kali Linux @ 2018 Kali Linux\n Figure 3-17 Screenshot of Kali Linux ⊙ 2018 Kali Linux\nFigure 3-18 Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-19 Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-20 Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-21Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-22Screenshot of Kali Linux @ 2018 Kali Linux",
    "Page_21": "CompTIA? PenTest+ Cert Guide\nXX\nFigure 3-23\n Screenshot of Google @ 2018 Google, LLC.\nFigure 3-24\n Screenshot of DNSdumpster  2018 Hacker Target Pty Ltd\nFigure 3-25\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-26\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-27\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-28\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 3-29\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-30\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-31\nScreenshot of Shodan ? 2013-2018 Shodan@\nFigure 3-32\nScreenshot of Shodan @ 2013-2018 Shodan@\nFigure 3-33\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 3-34\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-35\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 3-36\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-37\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 3-38\n Screenshot of Kali Linux  2018 Kali Linux\nFigure 3-39\nOmar Santos\nFigure 3-41\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 4-3\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-4\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-5\nScreenshot of Kali Linux @ 2018 Kali Linux\n Figure 4-6\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-7\nScreenshot of Kali Linux ? 2018 Kali Linux\n Figure 4-8\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-9\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-10\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 4-11\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 5-15\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 5-18\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 5-19\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 5-20\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 5-23\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 5-24\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 5-25\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 5-26\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 6-3\n Screenshot of Wireshark  The Wireshark team\nFigure 6-4\nScreenshot of Wireshark ? The Wireshark team\nFigure 6-7\nScreenshot of WebGoat  OWASP\nFigure 6-9\n Screenshot of W3school @ 1999-2018 by Refsnes Data\nFigure 6-11\nScreenshot of WebGoat ? OWASP\nFigure 6-12\nScreenshot of WebGoat  OWASP\nFigure 6-13\n Screenshot of WebGoat ? OWASP\nFigure 6-14 Screenshot of DVWA ⊙ 2014-2017 Dewhurst Security",
    "Page_22": "Credits\nXXi\nFigure 6-16\n Screenshot of DVWA ? 2014-2017 Dewhurst Security\nFigure 6-18\n Screenshot of Wireshark ? The Wireshark team\nFigure 6-21\n Screenshot of DVWA ? 2014-2017 Dewhurst Security\nFigure 6-22\n Screenshot of DVWA ? 2014-2017 Dewhurst Security\nFigure 6-23\n Screenshot of DVWA ? 2014-2017 Dewhurst Security\nFigure 6-24\n Screenshot of DVWA @ 2014-2017 Dewhurst Security\nFigure 6-25\n Screenshot of DVWA ? 2014-2017 Dewhurst Security\nFigure 7-5\nScreenshot of Unix Permission Calculator ? 2017 Dan's Tools\n Figure 7-6\nScreenshot of Unix Permission Calculator ? 2017 Dan's Tools\nFigure 7-7\nScreenshot of Visudo Command Man Page @ Visudo\nFigure 7-9\n Screenshot of Microsoft Excel @ 2018 Microsoft Corporation\nMobile Top 10 2016-Top 10 by OWASP\nFigure 7-13\n Screenshot of Android Studio @ Google, LLC.\nFigure 7-14\nScreenshot of Android Studio @ Google, LLC.\nFigure 7-15\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 8-4\nScreenshot of Kali Linux @ 2018 Kali Linux\nFigure 8-6\nScreenshot of Kali Linux @ 2018 Kali Linux\n Figure 9-1\nScreenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-2\nScreenshot of Parrot Linux  2013-2018 Lorenzo Faletra\nFigure 9-3\nScreenshot of BlackArch Linux @ 2013-2018 BlackArch Linux\n Figure 9-4\n Screenshot of BlackArch Linux @ 2013-2018 BlackArch Linux\n Figure 9-5\nScreenshot of Caine ? Caine\nFigure 9-6\nScreenshot of Security Onion  Security Onion Solutions, LLC\nFigure 9-7\nScreenshot of Shodan @ 2013-2018 Shodan@\n Figure 9-8\nScreenshot of Maltego ? Paterva\nFigure 9-9\n Screenshot of Maltego @ Paterva\nFigure 9-10\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-11\n Screenshot of Censys @ 2018 Censys\n Figure 9-12\n Screenshot of Zenmap @ Nmap\nFigure 9-13\n Screenshot of Zenmap ? Nmap\nCategory: Vulnerability Scanning Tools by OWASP\nFigure 9-14\nScreenshot of Greenbone ? 2017 Greenbone Networks\nFigure 9-15\nScreenshot of Greenbone ? 2017 Greenbone Networks\nFigure 9-16\nScreenshot of Greenbone ? 2017 Greenbone Networks\nFigure 9-17\nScreenshot of Greenbone ? 2017 Greenbone Networks\nOWASP Zed Attack Proxy Project by OWASP\nFigure 9-18\nScreenshot of OWASP ZAP ? OWASP\nFigure 9-19\nScreenshot of OWASP ZAP ? OWASP\nFigure 9-20\nScreenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-21\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 9-22\n Screenshot of Kali Linux  2018 Kali Linux\nFigure 9-23S\n Screenshot of Kali Linux ? 2018 Kali Linux",
    "Page_23": "xxii\nCompTIA? PenTest+ Cert Guide\nFigure 9-24\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-25\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-26\n Screenshot of the art of hacking @ 2018 Omar Santos\nFigure 9-27\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 9-28\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-29\n Screenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-30\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 9-31\nScreenshot of Kali Linux  2018 Kali Linux\nFigure 9-32\n Screenshot of Kali Linux  2018 Kali Linux\nFigure 9-33\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 9-34\nScreenshot of Kali Linux @ 2018 Kali Linux\nFigure 9-35\nScreenshot of BeEF Exploitation Framework ? Beef\nFigure 9-36\nScreenshot of OllyDbg @ 2000-2014 Oleh Yuschuk\nFigure 9-37\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 9-38\n Screenshot of IDA  2017 Hex-Rays SA.\nFigure 9-39\nScreenshot of IDA ? 2017 Hex-Rays SA.\n Figure 10-1\n Screenshot of Kali Linux ? 2018 Kali Linux\nFigure 10-2\nScreenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-3\nScreenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-4\n Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-5\nScreenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-6\nScreenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-7\n Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-8\nScreenshot of Kali Linux ? 2018 Kali Linux\nFigure 10-9 S\n Screenshot of Dradis @ 2012-2018 Dradis Framework\nFigure 10-10 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-11 Screenshot of Dradis ? 2012-2018 Dradis Framework\n Figure 10-12 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-13 Screenshot of Dradis @ 2012-2018 Dradis Framework\nFigure 10-14 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-15 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-16 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-17 Screenshot of Dradis @ 2012-2018 Dradis Framework\nFigure 10-18 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-19 Screenshot of Dradis ? 2012-2018 Dradis Framework\nFigure 10-21 Screenshot of SQLMap ? 2006-2018 by Bernardo Damele\nAssumpcao Guimaraes\nFigure 10-22 Screenshot of SQLMap ? 2006-2018 by Bernardo Damele\nAssumpcao Guimaraes ISO 31000\nChapter Opener images: Charlie Edwards/Gettyimages",
    "Page_24": "Introduction\nIXX\nIntroduction\nCompTIA Pen Test+ is a security penetration testing certification that focuses on\nperformance-based and multiple-choice questions, as well as simulations that require\na candidate to demonstrate the hands-on ability to complete a penetration testing\nengagement. PenTest+ candidates must demonstrate their skills in planning and\nscoping a penetration testing engagement. Candidates are also required to know how\nto mitigate security weaknesses and vulnerabilities, as well as how to exploit them.\nCompTIA PenTest+ is an intermediate-level cybersecurity career certification. His-\ntorically, the only intermediate-level cybersecurity certification was the CompTIA\nCybersecurity Analyst (CySA+). Today, PenTest+ provides an alternate path from\nthose who want to specialize in security penetration testing (ethical hacking).\nCompTIA PenTest+ and CySA+ can be taken in any order. Either exam typically\nfollows the skills learned in Security+. The main difference between CySA+ and\nPen Test+ is that CySA+ focuses on defensive security (including incident detection\nand response), whereas PenTest+ focuses on offensive security (ethical hacking or\npenetration testing).\nNOTE  CompTIA PenTest+ is a globally recognized certification that demonstrates\nthe holder's knowledge and skills across a broad range of security topics.\nThe Goals of the CompTlA PenTest+ Certification\nThe CompTIA PenTest+ certification was created and is managed by one of the most\nprestigious organizations in the world and has a number of stated goals. Although not\ncritical for passing the exam, having knowledge of the organization and of these goals\nis helpful in understanding the motivation behind the creation of the exam.\nSponsoring Bodies\nThe Computing Technology Industry Association (CompTIA) is a vendor-neutral\nIT certification body that is recognized worldwide. CompTIA has been in existence\nfor more than 20 years. It develops certificate programs for IT support, networking,\nsecurity, Linux, cloud, and mobility. CompTIA is a nonprofit trade association.\nPen Test+ is one of a number of security-related certifications offered by CompTIA.\nOther certifications offered by this organization include the following:\n■ CompTIA Security+\n CompTIA Cybersecurity Analyst (CySA+)\n CompTIA Advanced Security Practitioner (CASP)",
    "Page_25": "xxiv\nCompTIA? PenTest+ Cert Guide\nCompTIA offers certifications in other focus areas, including the following:\n■ CompTIA IT Fundamentals\n■ CompTIA A+\n■ CompTIA Network+\n■ CompTIA Cloud Essentials\n■ CompTIA Cloud+\n■ CompTIA Linux+\n■ CompTIA Server+\n■ CompTIA Project+\n■ CompTIA CTT+\nStatedGoals\nThe goal of CompTIA in its administration of the PenTest+ certification is to pro-\nvide a reliable instrument to measure an individual's knowledge of cybersecurity\npenetration testing (ethical hacking). This knowledge is not limited to technical\n skills alone but extends to all aspects of a successful penetration testing engagement.\nThe Exam Objectives (Domains)\nThe CompTIA PenTest+ exam is broken down into five major domains. This book\ncovers all the domains and the subtopics included in them. The following table lists\nthe breakdown of the domains represented in the exam:\nDomain\nPercentage of\nRepresentation in Exam\n1.0 Planning and Scoping\n15%\n2.0 Information Gathering and Vulnerability Identification\n22%\n3.0 Attacks and Exploits\n30%\n sn n ots\n17%\n 5.0 Reporting and Communication\n16%\nTotal 100%\n1.0 Planning and Scoping\nThe Planning and Scoping domain, which is covered in Chapter 2, discusses the\nimportance of good planning and scoping in a penetration testing or ethical hacking",
    "Page_26": "Introduction\nXXV\nengagement. Comprising 15 % of the exam, it covers several key legal concepts and\nthe different aspects of compliance-based assessment. It Covers topics including the\nfollowing:\n Explain the importance of planning for an engagement.\n■ Explain key legal concepts.\n■ Explain the importance of scoping an engagement properly.\n■ Explain the key aspects of compliance-based assessments.\n2.0 Information Gathering and Vulnerability Identification\nThe Information Gathering and Vulnerability Identification domain, which is cov.\nered in Chapter 3, starts out by discussing in general what reconnaissance is and\nthe difference between passive and active reconnaissance methods. It touches on\nsome of the common tools and techniques used. From there it covers the process of\nvulnerability scanning and how vulnerability scanning tools work, including how to\nanalyze vulnerability scanning results to provide useful deliverables and the process\nof leveraging the gathered information in the exploitation phase. Finally, it discusses\nsome of the common challenges to consider when performing vulnerability scans.\nThis domain accounts for 22% of the exam. Topics include the following:\n Given a scenario, conduct information gathering using appropriate techniques.\n Given a scenario, perform a vulnerability scan.\n Given a scenario, analyze vulnerability scan results.\n Explain the process of leveraging information to prepare for exploitation.\n■ Explain weaknesses related to specialized systems.\n3.0 Attacks and Exploits\nThe Attacks and Exploits domain is covered throughout Chapters 4 through 8\nThese chapters include topics such as social engineering attacks, exploitation of\nwired and wireless networks, application-based vulnerabilities, local host and physi-\ncal security vulnerabilities, and post-exploitation techniques. It encompasses 30% of\nthe exam. Topics include the following:\n Compare and contrast social engineering attacks.\n Given a scenario, exploit network-based vulnerabilities.\n Given a scenario, exploit wireless and RF-based vulnerabilities.\n Given a scenario, exploit application-based vulnerabilities.",
    "Page_27": "xXVi\nCompTIA? PenTest+ Cert Guide\n■ Given a scenario, exploit local host vulnerabilities.\nSummarize physical security attacks related to facilities\n■ Given a scenario, perform post-exploitation techniques.\n4.0 Penetration Testing Tools\nThe Penetration Testing Tools domain is covered in Chapter 9. In this chapter, you\nwill learn different use cases for penetration testing tools. You will also learn how to\nanalyze the output of some of the most popular penetration testing tools to make\ninformed assessments. At the end of the chapter, you will learn how to leverage the\nbash shell, Python, Ruby, and PowerShell to perform basic scripting. This domain\naccounts for 17% of the exam. The topics include the following:\n Given a scenario, use Nmap to conduct information gathering exercises.\n■ Compare and contrast various use cases of tools.\n■ Given a scenario, analyze tool output or data related to a penetration test.\n Given a scenario, analyze a basic script (limited to bash, Python, Ruby, and\nPowerShell).\n5.0 Reporting and Communication\nThe Reporting and Communication domain is covered in Chapter 10, which starts\nout by discussing post-engagement activities, such as cleanup of any tools or shells\nleft on systems that were part of the test. From there it covers report writing best\npractices, including the common report elements as well as findings and recommen-\ndations. Finally, it touches on report handling and proper communication best prac-\ntices. This domain makes up 16% of the exam. Topics include the following:\n■ Given a scenario, use report writing and handling best practices.\n Explain post-report delivery activities.\n■ Given a scenario, recommend mitigation strategies for discovered\nvulnerabilities.\n■ Explain the importance of communication during the penetration testing\nprocess.\nSteps to Earning the PenTest+ Certification\nTo earn the PenTest+ certification, a test candidate must meet certain prerequisites\nand follow specific procedures. Test candidates must qualify for and sign up for\nthe exam.",
    "Page_28": "Introduction\nXXVii\nRecommended Experience\nThere are no prerequisites for the PenTest+ certification. However, CompTIA\nrecommends that candidates possess Network+, Security+, or equivalent knowledge.\n NOTE Certifications such as Cisco CCNA CyberOps can help candidates and can\n be used as an alternative to Security+.\nCompTIA also recommends a minimum of three to four years of hands-on\ninformation security or related experience.\nSigning Up for the Exam\nThe steps required to sign up for the Pen Test+ exam are as follows:\n1. Create a Pearson Vue account at pearsonvue.com and schedule your exam.\n 2. Complete the examination agreement, attesting to the truth of your assertions\nregarding professional experience and legally committing to the adherence to\nthe testing policies.\n 3. Review the candidate background questions.\n4. Submit the examination fee.\nThe following website presents the CompTIA certification exam policies:\nhttps://certification.comptia.org/testing/test-policies.\nFacts About the PenTest+ Exam\nThe PenTest+ exam is a computer-based test that focuses on performance-based and\nmultiple-choice questions. There are no formal breaks, but you are allowed to bring\na snack and eat it at the back of the test room; however, any time used for breaks\ncounts toward 165 minutes allowed for the test. You must bring a government-\nissued identification card. No other forms of ID will be accepted. You may be\nrequired to submit to a palm vein scan.",
    "Page_29": "XXvii\nCompTIA? PenTest+ Cert Guide\nAbout the CompTIAPenTest+ Cert Guide\nThis book maps to the topic areas of the CompTIA PenTest+ exam and uses a\nnumber of features to help you understand the topics and prepare for the exam.\nObjectives and Methods\nThis book uses several key methodologies to help you discover the exam topics on\nwhich you need more review, to help you fully understand and remember those\ndetails, and to help you prove to yourself that you have retained your knowledge\n of those topics. This book does not try to help you pass the exam only by memo-\nrization; it seeks to help you truly learn and understand the topics. This book is\ndesigned to help you pass the PenTest+ exam by using the following methods:\n■ Helping you discover which exam topics you have not mastered\n■ Providing explanations and information to fil in your knowledge gaps\n■ Supplying exercises that enhance your ability to recall and deduce the answers\nto test questions\n■ Providing practice exercises on the topics and the testing process via test\nquestions on the companion website",
    "Page_30": "Introduction\n!XXX\nCustomizing Your Exams\nIn the exam settings screen, you can choose to take exams in one of three modes:\n■ Study mode: Allows you to fully customize your exams and review answers\nas you are taking the exam. This is typically the mode you would use first to\nassess your knowledge and identify information gaps.\n■ Practice Exam mode: Locks certain customization options, as it is presenting\na realistic exam experience. Use this mode when you are preparing to test your\nexam readiness.\n■ Flash Card mode: Strips out the answers and presents you with only the\nwant to challenge yourself to provide answers without the benefit of see-\ning multiple-choice options. This mode does not provide the detailed score\nreports that the other two modes do, so it will not be as helpful as the other\n modes at helping you identify knowledge gaps.",
    "Page_31": "XXxii\nCompTIA? PenTest+ Cert Guide\nIn addition to choosing among these three modes, you will be able to select the\nsource of your questions. You can choose to take exams that cover all the chapters, or\nyou can narrow your selection to just a single chapter or the chapters that make up\n specific parts in the book. All chapters are selected by default. If you want to narrow\nyour focus to individual chapters, simply deselect all the chapters and then select\nonly those on which you wish to focus in the Objectives area.\nYou can also select the exam banks on which to focus. Each exam bank comes\ncomplete with a full exam of questions that cover topics in every chapter. The two\nexams printed in the book are available to you, as are two additional exams of unique\nquestions. You can have the test engine serve up exams from all four banks or just\nfrom one individual bank by selecting the desired banks in the exam bank area.\nThere are several other customizations you can make to your exam from the exam\nsettings screen, such as the time of the exam, the number of questions served up,\nwhether to randomize questions and answers, whether to show the number of cor-\nrect answers for multiple-answer questions, and whether to serve up only specific\ntypes of questions. You can also create custom test banks by selecting only questions\nthat you have marked or questions on which you have added notes.\nUpdating Your Exams\nIf you are using the online version of the Pearson Test Prep software, you should\nalways have access to the latest version of the software as well as the exam data. If\nyou are using the Windows desktop version, every time you launch the software\nwhile connected to the Internet, it checks whether there are any updates to your\nexam data and automatically downloads any changes made since the last time you\nused the software.\nSometimes, due to many factors, the exam data may not fully download when you\nactivate your exam. If you find that figures or exhibits are missing, you may need to\nmanually update your exams. To update a particular exam you have already activated\nand downloaded, simply click the Tools tab and click the Update Products button.\nAgain, this is only an issue with the desktop Windows application.\nIf you wish to check for updates to the Pearson Test Prep exam engine software,\nWindows desktop version, simply click the Tools tab and click the Update\nApplication button. By doing so, you ensure that you are running the latest version\nof the software engine.",
    "Page_32": "This page intentionally left blank",
    "Page_33": "CHAPTER 7\nExploiting Local Host\nand Physical Security\nVulnerabilities\nIn this chapter you will learn about exploiting local host vulnerabilities, as well\nas physical security flaws. This chapter provides details on how to take advan-\ntage of insecure services and protocol configurations during a penetration test-\ning engagement. You will also learn how to perform local privilege escalation\nattacks as part of penetration testing. This chapter provides details to help you\ngain an understanding of Set-UID, Set-GID, and Unix programs, as well as\nret2libc attacks. This chapter also covers privilege escalation attacks against\nWindows systems and the security flaws of Android and Apple iOS mobile\ndevices. In this chapter you will also gain an understanding of physical security\n attacks such as piggybacking, tailgating,fence jumping, dumpster diving, lock\npicking, and badge cloning.\n\"Do I Know This Already?\" Quiz\nThe “Do I Know This Already?”\" quiz allows you to assess whether you should\nread this entire chapter thoroughly or jump to the “Exam Preparation Tasks\"\nsection. If you are in doubt about your answers to these questions or your own\nassessment of your knowledge of the topics, read the entire chapter. Table 7-1\nlists the major headings in this chapter and their corresponding “Do I Know\nThis Already?” quiz questions. You can find the answers in Appendix A,\n\"Answers to the ‘Do I Know This Already?' Quizzes and Q&A Sections.\"\nTable 7-1 “Do I Know This Already?\" Section-to-Question Mapping\nFoundation Topics Section\nQuestions\nExploiting Local Host Vulnerabilities\n1-8\nUnderstanding Physical Security Attacks\n9-10",
    "Page_34": "278\nCompTIA? PenTest+ Cert Guide\n CAUTIoN  The goal of self-assessment is to gauge your mastery of the topics in\n this chapter. If you do not know the answer to a question or are only partially sure\nof the answer, you should mark that question as incorrect for purposes of the self-\nassessment. Giving yourself credit for an answer you correctly guess skews your self-\n assessment results and might provide you with a false sense of security.\n1. Which of the following is not an insecure service or protocol?\na. Cisco Smart Install\nb. Telnet\nc. Finger\nd. Windows PowerSploit\n 2. Consider the following example:\nomar@ares:~$ ls -l topsecret.txt\n-rwxrwxr-- 1 omar omar 15 May 26 21:15 topsecret.txt\nWhat permissions does the user omar have in the topsecret.txt file?\na. Read only\nb. Write only\nc. Read, write, execute\nd. Write, execute\n 3. Which of the following is not true about sticky bits?\na. A restricted deletion flag, or sticky bit, is a single bit whose interpreta-\ntion depends on the file type.\nb. For directories, the sticky bit prevents unprivileged users from removing\nor renaming a file in the directory unless they own the file or the direc-\ntory; this is called the restricted deletion flag for the directory, and is\n commonly found on world-writable directories such as /tmp.\nc. If the sticky bit is set on a directory, files inside the directory cannot be\nrenamed or removed by the owner of the file, the owner of the directory,\nor the superuser (even though the modes of the directory might allow\nsuch an operation).\nd. For regular files on some older systems, the sticky bit saves the program's\ntext image on the swap device so it will load more quickly when run.",
    "Page_35": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n279\n4. Which of the following is a type of attack in which a subroutine return\naddress on a call stack is replaced by an address of a subroutine that is already\n present in the executable memory of the process?\na. Ret2libc\nb. ASLR bypass\nc. CPassword\nd. Sticky-bit attack\n 5. Which of the following is a component of Active Directory's Group\n Policy Preferences that allows administrators to set passwords via Group\nPolicy?\na. Ret2libc\nb. CPassword\nc. Sticky-bit\nd. GPO crack\n 6. Which of the following tools allows an attacker to dump the LSASS\n process from memory to disk?\na. John the Ripper\nb. SAMsploit\nc. Sysinternals ProcDump\nd. Windows PowerShell\n7. The SELinux and AppArmor security frameworks include enforcement\nrules that attempt to prevent which of the following attacks?\na. Lateral movement\nb. Sandbox escape\nc. Cross-site request forgery (CSRF)\nd. Cross-site scripting (XSS)",
    "Page_36": "280\nCompTIA? PenTest+ Cert Guide\n8. Which of the following is not one of the top mobile security threats and\nvulnerabilities?\na. Cross-site request forgery (CSRF)\nb. Insecure data storage\nc. Insecure communication\nd. Insecure authentication\n9. Which of the following is an attack in which the attacker tries to\nretrieve encryption keys from a running operating system after using a\n system reload?\na. Hot-boot\nb. Rowhammer\nc. Cold boot\nd. ASLR bypass\n10. Which of the following is the term for an unauthorized individual\nfollowing an authorized individual to enter a restricted building or\nfacility?\na. Lockpicking\nb. Dumpster diving\nc. Badge cloning\nd. Tailgating",
    "Page_37": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n281\nFoundation Topics\nExploiting Local Host Vulnerabilities\nThreat actors take advantage of numerous local host vulnerabilities to carry out dif-\nferent attacks. In this section, you will learn about exploits against local host vulner-\nabilities such as taking advantage of specific operating system flaws, escalating local\nprivileges, stealing credentials, installing key loggers, and abusing physical device\nsecurity. You will also learn about different virtual machine and container vulner-\nabilities, and you will learn about cold boot attacks, JTAG debugging, and different\nattacks that can be carried out over the serial console of a device.\nInsecure Service and Protocol Configurations\nKey\nTopic\nMany attacks materialize because unused or insecure protocols, services, and asso-\nciated ports, which are low-hanging fruit opportunities for attackers. In addition,\nmany organizations don't patch vulnerabilities for the services, protocols, and ports\nthey don't use—-despite the fact that vulnerabilities may still be present for months\nor evenyears.\nTIP A best practice is to clearly define and document the services, protocols, and\n ports that are necessary for business. An organization should ensure that all other ser-\n vices, protocols, and ports are disabled or removed. As a penetration tester, you should\nalways go after insecure protocols, services, and associated ports.\nSome protocols should never be used, such as Telnet and Cisco Smart Install. Telnet\nis a clear-text protocol that exposes the entire contents of any session to anyone who\ncan gain access to the traffic. Secure Shell (SSH) should be used instead. If a switch\nis running the Cisco Smart Install protocol, any unauthenticated attacker can modify\nthe configuration and fully compromise the switch.\nNOTE You can obtain more information about Smart Install and related features\nfrom the following Cisco security advisory: https://tools.cisco.com/security/center/\ncontent/CiscoSecurityAdvisory/cisco-sa-20180409-smi.\nOther protocols, like Telnet, transfer sensitive data in clear text. Examples of these\nclear-text protocols include SNMP (versions 1 and 2), HTTP, syslog, IMAP, POP3\nand FTP.",
    "Page_38": "282\nCompTIA? PenTest+ Cert Guide\n TIP In some cases, there is no secure alternative to otherwise insecure management\n protocols. In such a case, it is very important to understand what is at risk and what \nmitigation techniques could be implemented.\n All insecure protocols are subject to man-in-the-middle (MITM) attacks or to IP\ntraffic capture (sniffing). Example 7-1 shows how easy it is to capture a password \nfrom an FTP transaction by just sniffing the traffic using the Linux Tepdump tool.\nExample 7-1  Capturing Passwords and Sniffing Traffic from Clear-Text Protocols by\nUsing Tcpdump\nroot@kubel:~# tcpdump -nnxss 0 host 10.1.1.12\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on ensl60, link-type EN10MB (Ethernet), capture size 262144\nbytes\n22:50:23.958387 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [S], seq\n314242458, win 29200, options [mss 1460,sackOK,TS val 1523378506 ecr\nO,nop,wscale 7], length 0\n0x0000:\nE..<..@.@.....\n0x0010:\n0a01 010b c664 0015 12ba f59a 0000 0000\n.....d........\n0x0020:\na002 7210 acf1 0000 0204 05b4 0402 080a\n0x0030:\n5acc e94a 0000 0000 0103 0307\nZ..J........\n22:50:23.958455 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [S.], Seq\n4230935771, ack 314242459, win 28960, options [mss 1460,sackOK,TS val\n1523511322 ecr 1523378506,nop,wscale 7], length 0\n0x0000:\n4500 003c 0000 4000 4006 24a4 0a01 010b E..<..@.@.$.\n0x0010: 0a01 010c 0015 c664 fc2e f4db 12ba f59b\n.......d..\n0x0020: a012 7120 1647 0000 0204 05b4 0402 080a\n..q..G...\n0x0030：5\n5ace f01a 5acc e94a 0103 0307\nZ...Z..J....\n22:50:23.958524 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.]， ack\n4230935772, win 229, options [nop,nop,TS val 1523378506 ecr 1523511322],\nlength0\n0x0000:\n4500 0034 1cd1 4000 4006 07db 0a01 010c E..4..@.@.\n0x0010:\n0a01 010b c664 0015 12ba f59b fc2e f4dc\n0x0020:\n8010 00e5 10e4 0000 0101 080a 5acc e94a\n0x0030：\n5ace f01a\nZ...\n22:50:23.961422 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.]， seq\n4230935772:4230935792, ack 314242459, win 227, options [nop,nop,TS val\n1523511323 eCr 1523378506]， length 20: FTP: 220 (vsFTPd 3.0.3)\n0x0000:4500 0048 04c6 4000 4006 1fd2 0a01 010bE..H..@.@.\n0x0010:0a01 010c 0015 c664 fc2e f4dc 12ba f59b\n0x0020: 8018 00e3 1653 0000 0101 080a 5ace f01b\n.....S......Z...\n0x0030: 5aCC e94a 3232 3020 2876 7346 5450 6420 Z..J220.(vsFTPd.\n0x0040: 332e 302e 3329 0d0a\n3.0.3)..",
    "Page_39": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n283\n22:50:23.961485 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.]， ack\n4230935792, win 229, options [nop,nop,TS val 1523378507 ecr 1523511323],\nlength 0\n0x0000:\n4510 0034 1cd2 4000 4006 07ca 0a01 010c\nE..4..@.@..\n0x0010:\n0a01 010b c664 0015 12ba f59b fc2e f4f0\n0x0020：\n 8010 00e5 10ce 0000 0101 080a 5acc e94b\n..Z..K\n0x0030:\n5ace f01b\nZ...\n22:50:26.027005 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.]， seq\n314242459:314242470, ack 4230935792, win 229, options [nop,nop,TS val\n1523379024 ecr 1523511323], length 11: FTP: USER omar\n0x0000:\n 4510 003f 1cd3 4000 4006 07be 0a01 010c\nE..?..@.@..\n0x0010:\n0a01 010b c664 0015 12ba f59b fc2e f4f0\n0x0020:\n 8018 00e5 6a32 0000 0101 080a 5acc eb50\n...Z..P\n0x0030:\n5ace f01b 5553 4552 206f 6d61 720d 0a\nZ...USER.omar..\n22:50:26.027045 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [.]， ack\n314242470,\n， win 227, options [nop,nop,TS val 1523511839 ecr 1523379024],\nlength 0\n0x0000:\n4500 0034 04c7 4000 4006 1fe5 0a01 010b\nE..4..@.@.....\n0x0010:\n0a01 010c 0015 c664 fc2e f4f0 12ba f5a6\n.......d........\n0x0020:\n8010 00e3 163f 0000 0101 080a 5ace f21f\n.....?......Z...\n0x0030:\n5acc eb50\nZ..P\n22:50:26.027343 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags\n[P.]， seq\n4230935792:4230935826， ack 314242470， win 227， options\n[nop,nop,TS val\n1523511839 ecr 1523379024], length 34: FTP: 331 Please specify the\npassword.\n0x0000:\n4500 0056 04c8 4000 4006 1fc2 0a01 010b\nE..V..@.@......\n0x0010:\n0a01 010c 0015 c664 fc2e f4f0 12ba f5a6\n·····\n0x0020:\n8018 00e3 1661 0000 0101 080a 5ace f21f\n.....a......Z...\n0x0030:\n5acc eb50 3333 3120 506c 6561 7365 2073\nZ..P331.Please.S\n0x0040:\n7065 6369 6679 2074 6865 2070 6173 7377\npecify.the.\n0x0050:\n6f72 642e 0d0a\npassword...\n22:50:26.027393 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [.]， ack\n4230935826, win 229, options [nop,nop,TS val 1523379024 ecr 1523511839],\nlength 0\n0x0000:\n4510 0034 1cd4 4000 4006 07c8 0a01 010c\nE..4..@.@.....\n0x0010:\n0a01 010b c664 0015 12ba f5a6 fc2e f512\n..d.\n0x0020:\n8010 00e5 0c98 0000 0101 080a 5acc eb50\nZ..P\n0x0030:\n5ace f21f\nZ..·\n22:50:30.053380 IP 10.1.1.12.50788 > 10.1.1.11.21: Flags [P.]， seq\n314242470:314242485, ack 4230935826, win 229, options [nop,nop,TS val\n1523380030 eCr 1523511839], length 15: FTP: PASS badpassl\n0x0000:\n4510 0043 1cd5 4000 4006 07b8 0a01 010c\nE..C..@.@.\n0x0010:\n0a01 010b c664 0015 12ba f5a6 fc2e f512\n.d.\n0x0020:\n8018 00e5 c455 0000 0101 080a 5acc ef3e\n..Z..>\n0x0030:\n5ace f21f 5041 5353 2062 6164 7061 7373\nZ...PASS.badpass\n0x0040:\n310d 0a\n1..",
    "Page_40": "284\nCompTIA? PenTest+ Cert Guide\n22:50:30.085058 IP 10.1.1.11.21 > 10.1.1.12.50788: Flags [P.], seq\n4230935826:4230935849, ack 314242485, win 227, options [nop,nop,TS val\n1523512854 eCr 1523380030]， length 23: FTP: 230 Login successful.\n0x0000: 4500 004b 04c9 4000 4006 1fcc 0a01 010b E..K..@.@..\n0x0010: 0a01 010c 0015 c664 fc2e f512 12ba f5b5.......d........\n0x0020: 8018 00e3 1656 0000 0101 080a 5ace f616 .....V......Z...\n0x0030: 5acc ef3e 3233 3020 4c6f 6769 6e20 7375 Z..>230.Login.\n0x0040: 6363 6573 7366 756c 2e0d 0a\nsuccessful...\nIn Example 7-1 a host at IP address 10.1.1.12 initiates an FTP connection to an\nFTP server with IP address 10.1.1.11. In the packet capture, you can see the initial\npass 1), as demonstrated in the highlighted lines in Example 7-1. It is possible to use\nsimilar utilities, such as Tshark, to capture data from a live network (see https://\nThe following are also some of the services that are considered insecure:\n Rlogin: https://linux.die.net/man/1/rlogin\n Rsh: https://linux.die.net/man/1/rsh\n Finger: https:/linux.die.net/man/1/finger\nThe following services should be carefully implemented and not exposed to\nuntrusted networks:\nAuthd (or Identd): https://linux.die.net/man/3/ident\n Netdump: https://linux.die.net/man/8/netdump\n■ Netdump-server: https:/linux.die.net/man/8/netdump-server\n Nfs: https://linux.die.net/man/5/nfs\nRwhod: https://linux.die.net/man/8/rwhod\nSendmail: https://linux.die.net/man/8/sendmail.sendmail\nSamba: https://linux.die.net/man/7/samba\nYppasswdd: https://linux.die.net/man/8/yppasswdd\nYpserv: https:/linux.die.net/man/8/ypserv\nYpxfrd: https://linux.die.net/man/8/ypxfrd\nTIP RedHat provides a great resource that goes over Linux server security; see\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/\nhtml/Security_Guide/ch-server.html.",
    "Page_41": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n285\nLocal Privilege Escalation\nKey.\nTopic\nPrivilege escalation is the process of elevating the level of authority (privileges) of\na compromised user or a compromised application. This is done to further perform\nactions on the affected system or any other systems in the network, typically post-\nexploitation (that is, after gaining a foothold in the target system and exploiting a\nvulnerability).\nNOTE In Chapter 8, \"Performing Post-Exploitation Techniques,” you will learn\nabout additional post-exploitation methodologies and tactics.\nThe main focus of the post-exploitation phase is to maintain access to the compro-\nmised systems and move around in the network while remaining undetected. In\n many cases, privilege escalation is required to perform those tasks.\nIt is possible to perform privilege escalation in a few different ways. An attacker may\nbe able to compromise a system by logging in with a non-privileged account. Sub-\nsequently, the attacker can go from that unprivileged (or less privileged) account to\nanother account that has greater authority, as shown in Figure 7-1.\nuser: admin_user\nAttackergoesfrom a less-\nprivileged account\ntoanotheraccount thathas\ngreaterauthority\nuser: omar\nFIGURE 7-1 Privilege Escalation from One Account to Another\nIt is also posible to perform privilege escalation by “upgrading,” or elevating, the\nprivileges of the same account, as shown in Figure 7-2.\nuser: omar\nuser: omar\n(group: eng)\n(group: eng, admin) \nThe same account is used,but the attackermanipulates the\nsystem to increase the account privilege.\nFIGURE 7-2Privilege Escalation Using the Same Account",
    "Page_42": "286\nCompTIA? PenTest+ Cert Guide\n In Figure 7-2, the user (omar) belongs to the engineering group (eng) and does not\nhave administrative rights on the system. The attacker then exploits a vulnerabil-\nity and is able to manipulate the system to put the same user (omar) in the admin\ngroup, subsequently giving the user administrative rights on the system.\nUnderstanding Linux Permissions\nThis book assumes that you have familiarity with Linux and user accounts. As a\nrefresher, in some cases users must be able to accomplish tasks that require privileges\n(for example, when installing a program or adding another user). This is why sudo\n exists. Example 7-2 shows the first few lines and description of the sudo man page.\nExample 7-2The Linux sudo Command\nsudo, sudoedit - execute a command as another user\nSYNOPSIS\n△-丨 x-丨 X- 丨u-opns\nsudo -v [-Akns] [-a type] [-g group] [-h host] [-p prompt] [-u user]\nsudo -l [-AknS] [-a type] [-g group] [-h host] [-p prompt] [-U user]\n[-u user]  [command] \nsudo [-AbEHnPS] [-a type] [-C num]  [-c class] [-g group] [-h host]\n[-p prompt]  [-r role] [-t type][-u user]  [VAR=value] [-i | -s] [command]\n[sou u-] [dnoth b-]  [sseoo-] [umu -] [ad e-] [suyv-] atpaopns\n[-p prompt] [-u user] file ...\nDESCRIPTION\nsudo allows a permitted user to execute a command as the superuser\nor another user, as specified by the security policy. The invoking user's\nreal (not effective) user ID is used to determine the user name with which\nto query the security policy.\nandut pue satotrod Krrnoas rog aanaoantuote uthnid e siroddns opns\noutput logging.  Third parties can develop and distribute their own policy\ndefault security policy is sudoers, which is configured via the file /etc/\nsudoers, or via LDAP. See the Plugins section for more information.\nThe security policy determines what privileges, if any, a user has\nto run sudo. The policy may require that users authenticate themselves\nwith a password or another authentication mechanism. If authentication \nis required, sudo will exit if the user's password is not entered within\na configurable time limit. This limit is policy-specific; the default\nSecurity policies may support credential caching to allow the user\nto run sudo again for a period of time without requiring authentication.\nThe sudoers policy caches credentials for 15 minutes, unless overridden \nin sudoers(5). By running sudo with the -v option, a user can update the\ncached credentials without running a command.",
    "Page_43": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n287\nWhen invoked as sudoedit, the -e option (described below), is implied.\nSecurity policies may log successful and failed attempts to use sudo.\nIf an I/O plugin is configured, the running command's input and output may\nbe logged as well.\n<output omitted for brevity>.\n On Unix-based systems, you can use the chmod command to set permissions values\n on files and directories.\n NOTE  You can set permissions of a file or directory (folder) to a given user, a group\nKey.\nTopic\n of users, and others.\nWith Linux you can set three basic permissions:\n■Read (r)\nWrite (w)\n■Execute (x)\nYou can apply these permissions to any type of files or to directories. Example 7-3\nshows the permissions of a file called omar_file.txt. The user executes the Is -l com-\nmand, and in the portion of the output on the left, you see -rw-rw-r--, which indi-\n cates that the current user (omar) has read and write permissions.\nExample 7-3 Linux File Permissions\nomar@dionysus:~$ ls -l omar_file.txt\nrw-rw-r--\n 1 omar omar 15 May 26 23:45 omar_file.txt\nFigure 7-3 explains the Linux file permissions.\n- : file\nRead, write,and\n execute permissions\nd: directory\nI : link\nfor the group members\nowning the file.\nW\nW\n Read, write, and \n Read, write, and\nexecute permissions\n execute permissions\nfor the owner\nfor other users.\nof the file.\nFIGURE 7-3 Explaining Linux File Permissions",
    "Page_44": "288\nCompTIA? PenTest+ Cert Guide\nsd   o da  on q n e ao ss t \nof the file to be read, write, executable by using the chmod 0777 command.\nExample 7-4  Changing File Permissions\nKey\nTopic\nomar@dionysus:~$ chmod 0777 omar_file.txt\nomar@dionysus:~$ ls -l omar_file.txt\n-rwxrwxrwx 1 omar omar 15 May 26 23:45 omar_file.txt\nomar@dionysus:~$\nAs documented in the chmod man pages, the restricted deletion flag, or sticky bit, is\na single bit whose interpretation depends on the file type. For directories, the sticky\nbit prevents unprivileged users from removing or renaming a file in the directory\nunless they own the file or the directory; this is called the restricted deletion flag for\nthe directory, and it is commonly found on world-writable directories such as /tmp.\n For regular files on some older systems, the sticky bit saves the program's text image\non the swap device so it will load more quickly when run.\nTIP  The sticky bit is obsolete with files, but it is used for directories to indicate that\nfiles can be unlinked or renamed only by their owner or the superuser. Sticky bits\nwere used with files in very old Unix machines due to memory restrictions. If the\nsticky bit is set on a directory, files inside the directory may be renamed or removed\n only by the owner of the file, the owner of the directory, or the superuser (even\nthough the modes of the directory might allow such an operation); on some systems,\nany user who can write to a file can also delete it. This feature was added to keep an\n ordinary user from deleting another's files from the /tmp directory.\nThere are two ways that you can use the chmod command:\n■Symbolic (text) method\n■ Numeric method\nWhen you use the symbolic method, the structure includes who has access and the\n permission given. The indication of who has access to the file is as follows:\n■ u: The user that owns the file\n■ g: The group that the file belongs to\n o: The other users (that is, everyone else)\n a: All of the above (that is, use a instead of ugo)",
    "Page_45": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n289\nExample 7-5 shows how to remove the execute permissions for all users by using\nthe chmod a-x omar_file.txt command.\nExample 7-5  Symbolic Method Example\nOmar@dionysus:~$ ls -l omar_file.txt\n-rwxrwxrwx 1 omar omar 15 May 26 23:45 omar_file.txt\nomar@dionysus:~$ chmod a-x omar_file.txt\nomar@dionysus:~$ ls -l omar_file.txt\n1 omar omar 15 May 26 23:45 omar_file.txt\nomar@dionysus:~$\nThe chmod command allows you to use + to add permissions and - to remove per-\nmissions. The chmod commands clears the set-group-ID (SGID or setgid) bit of a\nregular file if the file's group ID does not match the user's effective group ID or one\nof the user's supplementary group IDs, unless the user has appropriate privileges.\nAdditional restrictions may cause the set-user-ID (SUID or setuid) and set-group-\nID bits of MODE or FILE to be ignored. This behavior depends on the policy and\nfunctionality of the underlying chmod system call. When in doubt, check the under-\nlying system behavior. This is clearly explained in the man page of the chmod com-\nmand (man chmod). In addition, the chmod command retains a directory's SUID\nand SGID bits unless you explicitly indicate otherwise.\nYou can also use numbers to edit the permissions of a file or directory (for the\nowner, group, and others), as well as the SUID, SGID, and sticky bits. Example 7-4\nshows the numeric method. The three-digit number specifies the permission, where\neach digit can be anything from O to 7. The first digit applies to permissions for\nthe owner, the second digit applies to permissions for the group, and the third digit\n applies to permissions for all others.\nFigure 7-4 demonstrates how the numeric method works.\nPermission\nBinary-to-decimal conversion\nW\nX\n000=0\n100=4\n001=1\n101=5\n010=2\n110=6\n011=3\n111=7\nFIGURE 7-4  Explaining the Linux File Permission Numeric Method",
    "Page_46": "290\nCompTIA? PenTest+ Cert Guide\nAs shown in Figure 7-4, a binary number 1 is put under each permission granted\nand a O under each permission not granted. On the right in Figure 7-4, the\nbinary-to-decimal conversion is done. This is why in Example 7-4, the numbers 777\nmake the file omar_file.txt world-writable (which means any user has read, write,\nand execute permissions).\nA great online tool that you can use to practice setting the different parameters of\nLinux permissions is the Permissions Calculator, at http://permissions-calculator.org\n(see Figure 7-5).\n口\norg\nUnixPermissionsCalculator\nOctalDecodeOctalSymbolicInfoCodeExamples\nPermission bits\nSelectthe\nSpecial\nGri\nOsetuid\nRead\nwrte\nCWite\nsetgid\nWrte\nSticky bit\nAbsoluteNotation(octal)\n0740\nCopyright 2008-18byDan'sTools\nFIGURE 7-5Permissions Calculator Online Tool\nThe Permissions Calculator website also provides several examples using PHP,\n d ssd     n  e s\nshown in Figure 7-6.",
    "Page_47": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n291\nOmar\n@☆：\nOctal\nCodeExamples\nCodeExamples\nChmod with PHP\nFormat\nhttp://php.net/manuallen/function.chmod.php.\ne?php\nchmodC/somedir/somefile,755）;//decimal;probably incorrect\nchmodC\"/somedir/somefile\",\ngo+rx);//string;incorrect\nchmodC/somedir/somefile,0755）;//octal;correct value ofmode\n?php\n//SGID bitset,Everything for\n/for other\nchmodC\"/somedir/somefile,02775）;\nChmod with Python\nFormat:\nos.chmod(path,mode)\nInpythonitspossibletouseoctalvaluesorusevaluesdefinedinthestatmodule.Formoreinfosee\nhttp://docs.python.org/library/os.htmlos.chmod.\nmportos\nFIGURE 7-6  Changing Permissions Programmatically\nUnderstanding SUID or SGID and Unix Programs\nKey.\nTopic\n A program or a script in which the owner is root (by setting its Set-UID bit) will\n execute with superuser (root) privileges. This introduces a security problem: If the\n system is compromised and that program is manipulated (as in the case of mono-\nlithic embedded devices), an attacker may be able to run additional executions as \nsuperuser (root).\nModern Unix and Linux-based systems ignore the SUID and SGID bits on shell\nscripts for this reason.",
    "Page_48": "292\nCompTIA? PenTest+ Cert Guide\nTIP An example of a SUID-based attack is the vulnerability that existed in the pro-\n gram /usr/lib/preserve (or /usr/lib/ex3.5preserve). This program, which is used by the\nvi and ex editors, automatically made a backup of the file being edited if the user was\nunexpectedly disconnected from the system before writing out changes to the file.\n The system wrote the changes to a temporary file in a special directory. The system\nalso sent an email to the user using /bin/mail with a notification that the file had been\nsaved. Because users could have been editing a file that was private or confidential,\nthe directory used by the older version of the Preserve program was not accessible by\nmost users on the system. Consequently, to let the Preserve program write into this \ndirectory and let the recovery program read from it, these programs were made\nSUID root.\nYou can find all the SUID and SGID files on your system by using the command\nshown in Example 7-6.\nExample 7-6 Finding All the SUID and SGID Files on a System\nomar@dionysus:~$ sudo find / \\( -perm -004000 -o -perm -002000 \\)\n-type f -print\n[sudo]  password for omar: **\nfind: '/proc/3491/task/3491/fdinfo/6'/usr/sbin/postqueue\n/usr/sbin/postdrop\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/policykit-1/polkit-agent-helper-1\n/usr/lib/x86_64-linux-gnu/utempter/utempter\n/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic\n/usr/lib/snapd/snap-confine\n/usr/lib/openssh/ssh-keysign\n/usr/bin/dotlock.mailutils\n/usr/bin/pkexec\n/usr/bin/chfn\n/usr/bin/screen\n/usr/bin/newgrp\n/usr/bin/crontab\n/usr/bin/at\n/usr/bin/chsh\n/usr/bin/ssh-agent\n/usr/bin/gpasswd\n/usr/bin/expiry",
    "Page_49": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n293\n/usr/bin/wall\n/usr/bin/sudo\n/usr/bin/bsd-write\n/usr/bin/mlocate\n /usr/bin/newgidmap\n/usr/bin/chage\n/usr/bin/newuidmap\nfind: '/proc/3491/fdinfo/5': No such file or directory\n/sbin/mount.cifs\n/ sbin/unix_chkpwd\n / sbin/pam_extrausers_chkpwd\n/sbin/mount.ecryptfs_private\n/bin/fusermount\n /bin/ping6\n/bin/mount\n/bin/umount\n/bin/ntfs-3g\n /bin/su\n/bin/ping\nIn Example 7-6, the find command starts in the root directory () and looks for all\nfiles that match mode 002000 (SGID) or mode 004000 (SUID). The -type f option\nlimits the search to files only.\nTIP  Security Enhanced Linux (SELinux) is a collection of kernel modifications and\nuser-space tools that are now part of several Linux distributions. It supports access\ncontrol security policies, including mandatory access controls. SELinux aims to pro-\nto accomplish such enforcement. Access can be constrained on variables such as\nwhich users and applications can access which resources. In addition, SELinux access\ncontrols are determined by a policy loaded on the system that cannot be changed\nby uneducated users or insecure applications. SELinux also allows you to configure\n more granular access control policies. For instance, SELinux lets you specify who can\nunlink, append only, or move a file instead of only being able to specify who can read,\nwrite, or execute a file. It also allows you to configure access to many other resources\n in addition to files. For example, it allows you to specify access to network resources\n and interprocess communication (IPC).",
    "Page_50": "294\nCompTIA? PenTest+ Cert Guide\nInsecure SUDo Implementations\nKey\nTopic\nSudo, which stands for “super user do,\" Is a Linux utility that allows a system admin-\nistrator to give certain users or groups of users the ability to run some or all com-\nmands as root or superuser. The Sudo utility operates on a per-command basis, and\nit is not a replacement for the shell. You can also use the Sudo utility to restrict the\ncommands a user can run on a per-host basis, to restrict logging of each command\nto have an audit trail of who did what, and to restrict the ability to use the same con-\nfiguration file on different systems.\nExample 7-7 shows the Linux command groups being used. The command shows\nthe group that the user omar belongs to. You can see in this example that sudo is one\nof the groups that the user omar belongs to.\nExample 7-7The groups Command\nomar@dionysus:~$ groups\nomar adm cdrom sudo dip plugdev lxd sambashare lpadmin\nAnother command you can use to see the groups a user belongs to is the id command,\nas shown in Example 7-8.\nExample 7-8The id Command\nomar@dionysus:~$ id\nuid=1000(omar） gid=1000(omar） groups=1000(omar),4(adm),24(cdrom),\n27(sudo),30(dip),46(plugdev),110(lxd),113(sambashare),117(lpadmin)\nExample 7-9 shows the same commands used when a different user (ron) is logged\nin. In this case, you can see that ron belongs only to the group ron.\nExample 7-9 The Groups to Which User ron Belongs\nron@dionysus:~$ groups\nron\nron@dionysus:~$ id\nuid=1001(ron） gid=1001(ron） groups=1001(ron)\nron@dionysus:~$\nCertain Linux systems call this group the “wheel\" group. If you want to add an exist-\ning user to the wheel (or sudo) group, you can use the usermod command with the",
    "Page_51": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n295\n-G option. You might also want to use the -a option, to avoid removing the user\nfrom other groups to which he or she belongs, as shown in Example 7-10.\nExample 7-10 The usermod Command\n$ sudo usermod -a -G wheel ron\n You can also add a user account to the wheel group as you create it, as shown in\nExample 7-11.\nExample 7-11Adding a User to the wheel Group at Creation\n$ sudo useradd -G wheel chris\nIn many different Linux systems, you can also use the visudo command. Figure 7-7\nshows the first few lines of the description of the visudo man page (man visudo).\nVISUDO(8)\nVISUDO(8)\nBSDSystemManager\nNAME\nvisudo-edit the sudoers file\nSYNOPSIS\nvisudo[-chqsV][-f sudoers][-xoutput_file]\nDESCRIPTION\nsudoersfileagainstmultiplesimultane\nneous edits,provides basic sanity checks,and checks\nfor parse errors.If the sudoers file is currently being edited you will receive ames-\nsage to tryagainlater.\nThereisa hard-codedlist of one or more editors that visudowill use set atcompile-time\nisset in sudoers,visudowill use any the editor defines byVISUAL or EDIToR.Note that\nplyby settingVISUAL or EDITOR.\nvisudoparses thesudoersfile after theeditandwillnotsave thechangesif thereisa\nisudowillp\nstatingtheline\ntoexitwithout\necauseif\neable\nhasbeen detected,thecursorwill be placedon theline where the\nerroroccurred(iftheeditor supportsthisfeature).\nManualpagevisudo(8)line 1(presshforhelporqtoquit)\nFIGURE 7-7The visudo Command Man Page",
    "Page_52": "296\nCompTIA? PenTest+ Cert Guide\nExample 7-12 shows the contents of the sudoers file after the visudo command is\ninvoked.\nExample 7-12 The Sudoers File\n# This file MUsT be edited with the 'visudo' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n# See the man page for details on how to write a sudoers file.\n#\nDefaults\nenv_reset\nDefaults\nmail_badpass\nDefaults\n secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/\nsbin:/usr/bin:/sbin:/bin:/snap/bin\"\n# Host alias specification\n# User alias specification\n# Cmnd alias specification\n# User privilege specification\nroot\nALL=(ALL:ALL） ALL\n# Members of the admin group may gain root privileges\n%admin ALL=(ALL) ALL\n# Allow members of group sudo to execute any command\n%sudo \nALL=(ALL:ALL） ALL\n# See sudoers(5) for more information on \"#include\" directives:\n#includedir /etc/sudoers.d\nThe first highlighted line in Example 7-12 means that the root user can execute\ncommands from ALL terminals, acting as ALL (that is, any) users, and can run the\nALL command (any commands). The second highlighted line specifies that mem-\nbers of the admin group may gain root privileges and can also execute commands\nfrom all terminals, acting as ALL (any) users, and can run the ALL command (any\ncommands). The third highlighted line specifies the same for any members of the\ngroup sudo.",
    "Page_53": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n297\nA huge mistake that some people make is to copy and paste the root privileges and\nassign them to a user, as shown in Example 7-13.\nExample 7-13 Improper Sudoers File Entry\nben\nALL=(ALL:ALL） ALL\nIn Example 7-13 the user ben has been assigned all the privileges of root. Attackers\ncan take advantage of misconfigured sudoers files, like this one, to cause severe neg-\noff the system or just execute certain commands that will be required for the user\nto do certain tasks. Example 7-14 shows a better setup than Example 7-13: Because\n ben only needs to be able to power off the system, he has only been given that sudo\ncapability.\nExample 7-14Allowing ben to Power Off the System\nben ALL= /sbin/poweroff\nAs demonstrated in Example 7-15, you can also create aliases for users (User_Alias),\nrun commands as other users (Runas_Alias), specify the host or network from which\nthey can log in (Host_Alias), and specify the command (Cmnd_Alias).\nExample 7-15 sudoers File Using Aliases\nUser_Alias\nCOOLGUYS = ben, chris, ron\nRunas_Alias\nLESSCooL = root， operator\nHost_Alias\nCOOLNET = 192.168.78.0/255.255.255.0\nCmnd_Alias\nPRINT = /usr/sbin/lpc, /usr/bin/lprm\nomar ALL=(LESSCOOL） ALL\n# The user omar can run any command from any terminal as any user in\nthe LEsscooL group (root or operator).\ntrina COOLNET=(ALL） ALL\n# The user trina may run any command from any machine in the CooLNET\nnetwork, as any user.\nben ALL=PRINT\n# The user ben may run lpc and lprm from any machine.",
    "Page_54": "298\nCompTIA?PenTest+Cert Guide\nIn Example 7-15 the alias COOLGUYS includes the users ben, chris, and ron. The\nalias LESSCOOL includes the users root and operator. The alias COOLNET\nincludes the network 192.168.78.0/24, and the command alias PRINT includes the\ncommands Ipc and lprm.\nTIP Sudo has been affected by several vulnerabilities that allow users to overwrite\nsystem configurations, run additional commands that should not be authorized,\namong other things. You can stay informed of any new vulnerabilities in Sudo at\nhttps://www.sudo.ws/security.html.\nRet2libcAttacks\nKey\nTopic\nA “return-to-libc\" (or ret2libc) attack typically starts with a buffer overflow. In this\ntype of attack, a subroutine return address on a call stack is replaced by an address of\na subroutine that is already present in the executable memory of the process. This is\ndone to potentially bypassing the no-execute (NX) bit feature and allow the attacker\nto inject his or her own code.\nOperating systems that support non-executable stack help protect against code\nexecution after a buffer overflow vulnerability is exploited. On the other hand, non-\nexecutable stack cannot prevent a ret2libc attack because in this attack, only exist-\ning executable code is used. Another technique, called stack-smashing protection, can\n prevent or obstruct code execution exploitation because it can detect the corruption\n of the stack and can potentially “flush out\" the compromised segment.\nA technique called ASCll armoring can be used to mitigate ret2libc attacks. When\nyou implement ASCII armoring, the address of every system library (such as libc)\ncontains a NULL byte (0x00) that you insert in the first 0x01010101 bytes of mem-\nory. This is typically a few pages more than 16 MB and is called the ASCll armor\nregion because every address up to (but not including) this value contains at least one\nNULL byte. When this methodology is implemented, an attacker cannot place code\ncontaining those addresses using string manipulation functions such as strcpyO.\nOf course, this technique doesn't protect the system if the attacker finds a way to\noverflow NULL bytes into the stack. A better approach is to use the address space\nlayout randomization (ASLR) technique, which mitigates the attack on 64-bit sys-\ntems. When you implement ASLR, the memory locations of functions are random.\nASLR is not very effective in 32-bit systems, though, because only 16 bits are avail-\nable for randomization, and an attacker can defeat such a system by using brute-\nforce attacks.",
    "Page_55": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n299\nWindows Privileges\nThe following sections cover several methodologies and attacks for performing\n privilege escalation in Windows systems.\nCPassword\nKey.\nTopic\nLegacy Windows operating systems were susceptible to CPassword attacks.\nCPassword was a component of Active Directory's Group Policy Prefer-\nences that allowed administrators to set passwords via Group Policy. Micro-\ncom/en-us/security-updates/securitybulletins/2014/ms14-025). Microsoft\nalso released a document explaining the vulnerability details, as well as well-\nknown mitigations (see https://support.microsoft.com/en-us/help/2962486/\n ms 14-025-vulnerability-in-group-policy-preferences-could-allow-elevati).\nIf administrators use CPassword to perform common tasks (such as changing the\nlocal administrator account), any user with basic read rights to the SYSVOL direc-\ntory can obtain the authentication key and crack it by using tools such as John the\nRipper and Hashcat.\nTIP A CPassword attack is also referred to as a GPP attack. To test and find vulner-\n no omssdo,  s proma e d asn  noa ss ae\nthe files in the SYSVOL directory and modify or remove any Group Policy Objects\n(GPOs) that reference them. A GPO is a virtual compilation of policy settings. Each\nGPO is configured with a unique name, such as a GUID. You can obtain more infor-\nmation about GPOs at https://msdn.microsoft.com/en-us/library/aa374162(v=vs.85)\n aspx. Microsoft has also published an article describing the SYSVOL implementation\nat https://social.technet.microsoft.com/wiki/contents/articles/24160.active-directory-\n back-to-basics-sysvol.aspx.\nYou can automatically decrypt passwords that are stored in the Group Policy\nPreferences by using Metasploit, and you can use the Meterpreter post-exploitation\nmodule to obtain and decrypt CPassword from files stored in the SYSVOL directory.\n In addition, a number of PowerShell scripts can be used to perform this type of\nattack, such as the ones at https://github.com/PowerShellMafia/PowerSploit/blob/\nmaster/Exfiltration/Get-GPPPassword.ps1.",
    "Page_56": "300\nCompTIA? PenTest+ Cert Guide\nKey.\nClear-Text Credentials inLDAP\nTopic\nUnfortunately, many organizations still configure their Windows domain control-\nlers to receive credentials in clear text over the network. One easy way to determine\nwhether a system is affected by sending credentials in the clear is to look for event\nIDs 2886 and 2887 in the Active Directory Service log. Example 7-16 shows an\nexample of Event 2886.\nExample 7-16Directory Service Event 2886\nLog Name: Directory Service\nSource: Microsoft-Windows-ActiveDirectory_DomainService\nDate: 6/12/2018 3:08:11 AM\nEvent ID: 2886\nTask Category: LDAP Interface\nLevel: Warning\nKeywords: Classic\nUser: hacker\nComputer: omar_workstation.sd.lan\nDescription:\nThe security of this directory server can be significantly enhanced\nby configuring the server to reject SASL (Negotiate, Kerberos,\nNTLM, or Digest） LDAP binds that do not request signing (integrity\nverification) and LDAP simple binds that are performed on a cleartext\n(non-SSL/TLS-encrypted) connection. Even if no clients are using such\nbinds, configuring the server to reject them will improve the security\nof this server.\nsimple binds over a non-SSL/TLS connection, and will stop working\nif this configuration change is made. To assist in identifying these\nclients, if such binds occur this directory server will log a summary\n o s     su i   \nare encouraged to configure those clients to not use such binds. Once no\nsuch events are observed for an extended period, it is recommended that\nyou configure the server to reject such binds.\nIf any domain controller has the 2886 event present, this indicates that LDAP sign-\ning is not being enforced by the domain controller, and it is possible to perform a\n simple (clear-text) LDAP bind over a non-encrypted connection.",
    "Page_57": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n301\nTIPThe tool at https://github.com/russelltomkins/Active-Directory/blob/master/\nQuery-InsecureLDAPBinds.ps1 can be used to query logs for insecure LDAP binds\n and clear-text passwords. Furthermore, the following post includes additional infor-\nmation about how such an attack could be performed: https://www.harmj0y.net/blog/\n powershell/kerberoasting-without-mimikatz.\nKerberoasting\nKey.\nTopic\nKerberoast is a series of tools for attacking Microsoft Kerberos implementations\nand Windows service accounts. The tool can be obtained from https://github.com/\nnidem/kerberoast.\nTIP The post https://www.blackhillsinfosec.com/a-toast-to-kerberoast/ provides\nstep-by-step instructions for remotely running a Kerberoast attack over an established\n Meterpreter session to a command and control server and cracking the ticket offline\nusing Hashcat.\n You will learn more about Meterpreter and Hashcat in Chapter 9, “Penetration\nTesting Tools.\"\nCredentials in Local Security Authority Subsystem Service (LSASS)\nKey\nTopic\nAnother attack commonly performed against Windows systems involves obtain-\ning user and application credentials from the Local Security Authority Subsystem\nService (LSASS). It is possible to dump the LSASS process from memory to disk\nby using tools such as Sysinternals ProcDump. Attackers have been successful using\nProcDump because it is a utility digitally signed by Microsoft. Therefore, this type\nof attack can evade many antivirus programs. ProcDump creates a minidump of\nthe target process. An attacker can then use tools such as Mimikatz to mine user\ncredentials\n TIP You can use the VMware tool vmss2core to dump memory from a suspended\nvirtual machine (VM). You can easily identify a suspended VM by the file extension\n.vmss. You can also use the VMware tool vmss2core to dump memory from\nsnapshotted VMs (*.vmsn). You can then use the Volatility Framework to extract the\n hashes. For more information about the Volatility Framework, see http://\nwww.volatilityfoundation.org.",
    "Page_58": "302\nCompTIA? PenTest+ Cert Guide\nThe following are additional resources related to the aforementioned attacks:\nProcDump and Windows Sysinternals: https://docs.microsoft.com/en-us/\nsysinternals/downloads/procdump\nMimikatz: http://blog.gentilkiwi.com/mimikatz\nThe Volatility Foundation: http://www.volatilityfoundation.org\nVmss2core: https://labs.vmware.com/flings/vmss2core\nVMware Snapshot and Saved State Analysis: http://volatility-labs.blogspot.be/\n2013/05/movp-i-13-vmware-snapshot-and-saved.html\nKey.\nSAM Database\nTopic\n Microsoft Active Directory plays an important role in many organizations. Active\nDirectory provides a directory service for managing and administering different\ndomain activities. Active Directory is based on a client/server architecture. Under-\nstanding how Active Directory works and the underlying architecture is very impor-\ntant for any pen tester tasked with testing Windows environments.\nOf course, one of the common tasks in a penetration testing engagement is to\nretrieve passwords from a Windows system and ultimately try to get domain admin-\nistrator access. In Chapter 5, “Exploiting Wired and Wireless Networks,” you\nlearned about the pass-the-hash attack technique and other attacks against Windows\nsystems. As a refresher, Windows stores password hashes in three places:\n■ The Security Account Manager (SAM) database\n■ The LSASS\n■ The Active Directory database\nAll versions of Windows store passwords as hashes, in a file called the Security\nAccounts Manager (SAM) database.\nNOTE  The SAM database stores only hashes the passwords. Windows itself does not\nknow what the passwords are.\nThe SAM database stores usernames and NT hashes in a % SystemRoot%/\nsystem32/config/SAM file. This file contains all the hash values for accounts that\nare local to the computer.\nMicrosoft created its own hash process for its Windows operating systems. This\nis where the NT LAN Manager (NTLM) comes into play. NTLM is a suite of",
    "Page_59": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n303\nMicrosoft security protocols that have been proven to be vulnerable and used by\n many penetration testers as well as threat actors to compromise machines. Because\n password hashes cannot be reversed, instead of trying to figure out a user's password,\nyou (or an attacker) can just use a password hash collected from a compromised\nsystem and then use the same hash to log in to another client or server system. This\ntechnique, called pass-tbe-bash, is illustrated in Figure 7-8.\nServer1\n①Attacker steals user hash\n② Attacker user hash \nfrom Server 1.\nfrom Server 1 to\nlog intoServer 2.\nhansolo:1010:aabb23430c9b98437128ea:bc32193819d9aa302b1:\nhansolo:1010:aabb23430c9b98437128ea:bc32193819d9aa302b1:\nAttacker\nFIGURE 7-8Pass-the-Hash Attack Example\nMicrosoft now uses Kerberos in Windows domains, but NTLM is still used when\nthe client is authenticating to a server in a different Active Directory forest that has\n a legacy NTLM trust instead of a transitive inter-forest trust. NTLM is also used\nwhen the client is authenticating to a server that doesn't belong to a domain and\nwhen Kerberos is blocked by a firewall or a similar device.\nUnderstanding Dynamic Link Library Hijacking\nKey\nTopic\nDynamic link libraries (DLLs) are common components in all versions of Windows.\nSome DLLs are loaded into applications when they start (if needed). DLLs inter-\nact with APIs and other operating system procedures. If you tamper with a system\nin order to control which DLL an application loads, you may be able to insert a\nmalicious DLL during the DLL loading process to compromise the system. An\napplication can decide the order of the directories to be searched for a DLL to load,\ndepending on the configuration of the system. The following list shows the order of \nthe Windows DLL search process:\nStep 1.\nWindows searches the working directory from which the application is\nloaded.\nStep 2.\nWindows searches the current directory (from which the user is working).",
    "Page_60": "304\nCompTIA? PenTest+ Cert Guide\nStep 3.\nWindows searches the system directory (typically \\Windows\\System32\\).\nThe GetSystemDirectory function is called to obtain this directory.\nStep 4.\nWindows searches the 16-bit system directory.\nStep 5.\nWindows searches the Windows directory. The GetWindowsDirectory\nfunction is called to obtain this directory.\nStep6.\nWindows searches directories that are listed in the PATH environment\nvariable.\nIn this process, the attack relies on a program making a decision to load a DLL from\nthe current directory (step 2). An attacker can manipulate that step and perform\na DLL hijacking attack. For instance, if the user is opening an Excel spreadsheet,\nMicrosoft Office attempts to load its DLL component from the location of that\ndocument file. An attacker can put a malicious DLL in that directory. Subsequently,\nMicrosoft Office can carelessly load the malicious DLL.\nTIP DLL hijack attacks are not as effective as they used to be. This is because\nMicrosoft has released several patches and features that help prevent these types of\n attacks. The following article explains some of the mitigations: https://docs.microsoft\n.com/en-us/windows/desktop/dlls/dynamic-link-library-search-order.\nKey\nExploitable Services\nTopic\nYou as a pen tester can take advantage of exploitable services such as the following:\n Unquoted service paths: If an executable (application binary) is enclosed\nin quotation marks (\"\"), Windows knows where to find it. On the contrary, if\nthe path where the application binary is located doesn't contain any quotation\nmarks, Windows will try to locate it and execute it inside every folder of this\n path until it finds the executable file. An attacker can abuse this functionality\nto try to elevate privileges if the service is running under SYSTEM privileges.\nA service is vulnerable if the path to the executable has a space in the filename\nand the filename is not wrapped in quotation marks; exploitation requires\nwrite permissions to the path before the quotation mark.\n Writable services: Administrators often configure Windows services that\nrun with SYSTEM privileges. This could lead to a security problem because\nan attacker may obtain permissions over the service or over the folder where",
    "Page_61": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n305\nthe binary of the service is stored (or both). Services configured this way are\nalso often found in third-party software (TPS) and may be used for privilege\nescalation.\nInsecure File and Folder Permissions\nKey\nTopic\nAn attacker can take advantage of unsecured and misconfigured file and folder per-\n missions. Files and folders in Windows can have read and write permissions. These\npermissions are established strictly to specific users or groups. In contrast, Unix and\nLinux-based systems grant file and folder permissions to the owner, the group owner,\n or everybody. Windows uses specific permissions to allow users to access folder con-\ntent. Windows does not use execute permissions on files. Windows uses the filename\nextension to determine whether a file (including a script file) can be run.\nTIP  For details on how Windows file security and access rights work, see https://\ndocs.microsoft.com/en-us/windows/desktop/fileio/file-security-and-access-rights.\nMicrosoft has also published a detailed document explaining Windows access\ncontrol lists at https://docs.microsoft.com/en-us/windows/desktop/secauthz/\naccess-control-lists.\nTable 7-2 compares the permissions between Unix/Linux systems and Windows.\nTable 7-2 A Comparison Between Permissions for Unix/Linux-Based Systems and\nWindows Systems\nUnix/Linux\nWindows\n Read and write permissions on a folder in Unix is the same as the read and write permissions\nin Windows.\nThe read and execute permissions on a file in Unix are the same as the read and execute\n permissions in Windows.\nWrite permission on a file\nModify permission on a file\n Execute permission on a folder\nList Folder Contents permission\n Read, write, and execute permissions on a file\nFull Control permission\n or folder\nUnderstanding Windows Group Policy\n In Windows, Group Policy is a centralized administration feature for systems\nbelonging to a Windows domain. This functionality allows you to create poli-\ncies in Active Directory and assign them to users or systems. You create policies to",
    "Page_62": "306\nCompTIA? PenTest+ Cert Guide\nconfigure specific settings and permissions within the Windows operating system.\nThe item inside Active Directory that contains these settings is called a Group\n Policy Object (GPO). GPOs can be used for user accounts, for client computer set-\n  n i    s n sd    s\nin such a way that they cannot be overridden by users.\nTIP  Microsoft provides a series of spreadsheets and other documentation to help\nmanage GPOs; see http://www.microsoft.com/en-us/download/details.aspx?id=25250.\nThese spreadsheets list the policy settings for computer and user configurations that\nare included in the Administrative template files delivered with the specified Win-\ndows operating system. You can configure these policy settings when you edit GPOs.\nA brief example of one of these spreadsheets is shown in Figure 7-9.\nFIGURE 7-9 Group Policy Settings Reference for Windows and Windows Server\nKey\nKeyloggers\nTopic\nAn attacker may use a keylogger to capture every key stroke of a user in a system\nand steal sensitive data (including credentials). There are two main types of\nkeyloggers: keylogging hardware devices and keylogging software. A hardware\n(physical) keylogger is usually a small device that can be placed between a user's\nkeyboard and the main system. Software keyloggers are dedicated programs\ndesigned to track and log user keystrokes.",
    "Page_63": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n307\n NOTE Keyloggers are legal in some countries and designed to allow employers to\noversee the use of their computers. However, recent regulations like GDPR have\nmade keyloggers a very sensitive and controversial topic. Threat actors use keyloggers\nfor the purpose of stealing passwords and other confidential information.\nThere are several categories of software-based keyloggers:\n■ Kernel-based keylogger: A program on the machine obtains root access to\n hide itself in the operating system and intercepts keystrokes that pass through\nthe kernel. This method is difficult both to write and to combat. Such keylog-\ngers reside at the kernel level, which makes them difficult to detect, especially\nfor user-mode applications that don't have root access. They are frequently\nimplemented as rootkits that subvert the operating system kernel to gain unau-\nthorized access to the hardware. This makes them very powerful. A keylogger\nusing this method can act as a keyboard device driver, for example, and thus\n gain access to any information typed on the keyboard as it goes to the\noperating system.\n■ API-based keylogger: With this type of keylogger, compromising APIs reside\n inside a running application. Different types of malware have taken advantage\nof Windows APIs, such as GetAsyncKeyStateO and GetForeground\nWindowO, to perform keylogging activities.\n■ Hypervisor-based keylogger: This type of keylogger is effective in virtual\nenvironments, where the hypervisor could be compromised to capture sensi-\ntive information.\n■ Web form-grabbing keylogger: Keyloggers can steal data from web form\nsubmissions by recording the web browsing on submit events.\n JavaScript-based keylogger: Malicious JavaScript tags can be injected into\na web application and then capture key events (for example, the onKeyUpO\nJavaScript function).\n Memory-injection-based keylogger: This type of keylogger tampers with\nthe memory tables associated with the browser and other system functions.\nScheduled Tasks\nKey\nTopic\nThreat actors can take advantage of the Windows Task Scheduler to bypass User\nAccount Control (UAC) if the user has access to its graphical interface. This is pos-\n sible because the security option runs with the system's highest privileges. When a\nWindows user creates a new task, the system typically doesn't require the user to",
    "Page_64": "308\nCompTIA?PenTest+Cert Guide\nauthenticate with an administrator account. You can also use this functionality for\npost-exploitation and persistence.\n NOTE  You can access the scheduled tasks of a Windows system by navigating to\nStart -> Programs -> Accessories -> System Tools -> Scheduled Tasks.\nKey\n Escaping the Sandbox\nTopic\nThe term sandbox can mean different things depending on to the field. In cyberse-\ncurity, a sandbox allows you to isolate running applications to minimize the risk of\nsoftware vulnerabilities spreading from one application to another. Figure 7-10 illus-\ntrates this sandboxing concept.\nAttack or \nVulnerability\nApplication Sandbox 1\nApplication Sandbox 2\nOperating System\nFIGURE 7-10 Sandboxes\nSandboxes can also be used to run untested or untrusted software from unverified or\nuntrusted third parties, suppliers, users, or websites. In addition, they can be used to\ntest malware without allowing the software to compromise the host system.\n TIP Sandbox implementations typically operate and provide a controlled set of \nresources for guest applications to run in. These resources include a “scratch space”\non disk and memory. Typically, network access is disallowed or highly restricted.\n In web development, a sandbox is a mirrored production environment that developers\n    n    e   n \nnies like Amazon, Google, and Microsoft, among others, provide sandboxing services.\n NOTE For the purpose of this book, we of course concentrate on sandboxes related\n to cybersecurity.",
    "Page_65": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n309\nThe following are examples of sandbox implementations:\n■ A jail: This implementation is commonly used in mobile devices where there is\nrestricted filesystem namespace and rule-based execution to not allow untrusted\napplications to run in the system. This is where the term jail-braking comes in.\nUsers may “jail-break\" their phones to be able to install games and other applica-\ntions. With a jail-broken phone, an attacker can more easily impersonate applica-\ntions and deliver malware to the user because a jail-broken device does not have\nthe security controls in place to prevent malware from running on the system.\n■ Rule-based execution in SELinux and AppArmor security frameworks:\nThis implementation restricts control over what processes are started, spawned\nby other applications, or allowed to inject code into the system. These imple-\nmentations can control what programs can read and write to the file system.\n Virtual machines: Virtual machines can be used to restrict a guest operating\nsystem to run sandboxed so that the applications do not run natively on the\nhost system and can only access host resources through the hypervisor.\n Sandboxing on native hosts: Security researchers may use sandboxing to ana-\nlyze malware behavior. Even commercial solutions such as Cisco's ThreatGrid\nuse sandbox environments that mimic or replicate the victim system to evalu-\nate how malware infects and compromises such a system.\n■ Secure Computing Mode (seccomp) and seccomp-bpf (seccomp\nextension): These are sandboxes built in the Linux kernel to only allow the\nwriteO, readO, exitO, and sigreturnO system calls.\n Software fault isolation (SFI): This implementation uses sandboxing methods\nin all store, read, and jump assembly instructions to isolated segments of memory.\n■ Web browsers: Browsers provide sandboxing capabilities to isolate extensions\nand plugins.\n■ HTML5: HTML5 has a sandbox attribute for use with iframes.\n■ Java virtual machines: These VMs include a sandbox to restrict the actions of\nuntrusted code, such as a Java applet.\n■ .NET Common Language Runtime: This implementation enforces restric-\ntions on untrusted code.\n Adobe Reader: This implementation runs PDF files in a sandbox to prevent\nthem from escaping the PDF viewer and tampering with the rest of the computer.\n Microsoft Office: Office has a sandbox mode to prevent unsafe macros from\nharming the system.",
    "Page_66": "310\nCompTIA? PenTest+ Cert Guide\n If an atacker finds a way to bypass (escape) the sandbox, he or she can then compro-\nmise other applications and potentially implement a full system compromise. Several\nsandbox escape vulnerabilities in the past have allowed attackers to do just that.\nKey.\nVirtual Machine Escape\nTopic\n In the previous section, you learned that VMs can be used to restrict a guest operat-\ning system to run sandboxed. This is because the applications do not run natively on\nthe host system and can only access host resources through the hypervisor.\nIf an attacker finds a way to escape the VM, he or she can then compromise other\nVMs and potentially compromise the hypervisor. This is catastrophic in cloud envi-\nronments, where multiple customers can be affected by these types of attacks. A VM\nescape attack is illustrated in Figure 7-11.\n① Attacker Compromises VM3.\n② Attacker exploits VM\nVM 1\nVM2\nVM3\nescape vulnerability and\ncompromises the\nhypervisor.\nHypervisor\n③3 Attacker compromises\nother VMs on the system.\nFIGURE 7-11VM EsCape\nUnderstanding ContainerSecurity\nA lot of people immediately think about Docker when they hear the word containers,\nbut there are other container technologies out there. Linux Containers (LXC) is a\nwell-known set of tools, templates, and library and language bindings for Linux con-\ntainers. It's pretty low level and very flexible, and it covers just about every contain-\nment feature supported by the upstream kernel.\n NOTE  You can learn more about LXC at https://linuxcontainers.org.\nDocker is really an extension of LXC's capabilities. A high-level API provides a\nlightweight virtualization solution to run different processes in isolation. Docker was\ndeveloped in the Go language and utilizes LXC, cgroups, and the Linux kernel itself.",
    "Page_67": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n311\n NOTE You can learn more about Docker at https://www.docker.com.\nAnother popular container technology or package is rkt (or Rocket). rkt aims to\nprovide a feature and capability that its creators call“\"secure-by-default.\" It includes\na number of security features such as support for SELinux, TPM measurement, and\nrunning app containers in hardware-isolated VMs.\nNOTE You can learn more about Rocket at https://github.com/rkt/rkt.\nCri-o is a lightweight container technology used and designed with Kubernetes. It\nprovides support for containers based on the Open Container Initiative specifica-\ntions (see https://www.opencontainers.org), a set of two specifications: the Runtime\nSpecification (runtime-spec) and the Image Specification (image-spec). The\nruntime-spec outlines how to run a filesystem bundle that is unpacked on disk.\nNOTE You can learn more about Cri-o at http://cri-o.io.\nAnother container package is called OpenVz. It is not as popular as Docker or\nRocket, but it is making the rounds.\n NOTE  You can learn more about OpenVz at https://openvz.org.\nWhat is a container? A container image is a lightweight, standalone, executable\npackage of a piece of software that includes everything you need to run it, including\ncode, the runtime, system tools, system libraries, and settings. Containers are avail-\nable for Linux, Mac OS X, and Windows applications.\n NOTE Containerized software will always run the same, regardless of the\nenvironment.\nContainers isolate software from its surroundings and help reduce conflicts between\nteams running different software on the same infrastructure.\nSo what is the difference between a container and a virtual machine? Figure 7-12\nprovides a comparison.",
    "Page_68": "312\nCompTIA? PenTest+ Cert Guide\nVirtual Machines\nContainers\nVM1\nVM2\nVM3\nApp\nApp\nApp\nGuest\n Guest\nGuest \nOS\nOS\nOS\nApp1\nApp2\nApp3\nApp4\nHypervisor \n Docker Engine\nHost Operating System\nHost Operating System\nHost Hardware\nHost Hardware\nFIGURE 7-12 VMs vs. Containers\n Figure 7-12 shows the architectural differences between container and VM environ-\nments. A VM generally includes an entire operating system along with the applica-\ntion. It also needs a hypervisor running along with it to control the VM. VMs tend\nto be pretty big in size, since they include whole operating systems. Because of this,\nthey take up several minutes to boot up the operating system and initialize the appli-\ncation they are hosting. Containers are much smaller; they perform much better\nthan VMs and can start almost instantly.\nOne of the biggest advantages of container technologies is that containers can be\ncreated much faster than VM instances. Their lightweight footprint means less over-\nhead in terms of performance and size. Containers increase developer productivity\nby removing cross-service dependencies and conflicts. Each container can be seen as\na different microservice, and you can very easily upgrade them independently.\nEach image of a container can be version controlled, so you can track different ver-\nsions of a container. Containers encapsulate all the relevant details, such as appli-\ncation dependencies and operating systems. This makes them extremely portable\nacross systems.\n Docker and container technologies are supported by all major cloud providers,\nincluding Amazon Web Services (AWS), Google Cloud Platform, and Microsoft\nAzure. In addition, Docker can be integrated with tools like Ansible, Chef, Pup-\npet, Jenkins, Kubernetes, OpenStack, Vagrant, and dozens of other tools and\ninfrastructures.",
    "Page_69": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n313\nKey..\nTIP  Of course, this is not a book about Docker and containers. However, if you have\nTopic\n never played with containers, you can easily download your favorite Linux distribu-\n tion and install Docker. For example, in Ubuntu or even Kali Linux, you can simply\ninstall Docker with the apt install docker.io command.\nSome of the most challenging issues with containers and DevOps are operational\nin nature. For example, due to the convenience and agility that containers bring to\nthe table, developers often pull Docker containers from community repositories and\nstores not knowing what vulnerabilities they are inheriting in those containers. Asset\ndiscovery and container vulnerability management are therefore very important.\nThe following are a few examples of tools and solutions that have been developed\nthroughout the years for container security:\n■ Anchore: Anchore is used to analyze container images for the presence of\nknown security vulnerabilities and against custom security policies. It has\nboth open source and commercial versions. You can obtain the open source\ncode and more information about it from https://github.com/anchore/\nanchore-engine.\n Aqua Security: This is a commercial tool for securing container-based appli-\ncations (see https://www.aquasec.com).\n Bane: This is an AppArmor profile generator for Docker containers. You can\ndownload it from https://github.com/genuinetools/bane.\n CIS Docker Benchmark: This tool provides an automated way to test con-\ntainers against well-known security best practices. You can download the CIS\nDocker Benchmark from https://github.com/dev-sec/cis-docker-benchmark.\n Dev-Sec.io: This tool allows you to automatically apply hardening best prac-\n■ Clair: This is an open source static analysis for Docker containers from\nCore-OS. You can download Clair from https://github.com/coreos/clair.\n Dagda: This is another tool for performing static analysis of known vulner-\nabilities. You can download Dagda from https://github.com/eliasgranderubio/\ndagda.\n■ docker-bench-security: This script, created by Docker, checks for common\nsecurity best practices when deploying Docker containers in production. You\ncan download this tool from https://github.com/docker/docker-bench-security.",
    "Page_70": "314\nCompTIA? PenTest+ Cert Guide\n■ docker-explorer: This tool was created by Google to help analyze offline\nDocker file systems. It can be useful when performing forensic analysis of\nDocker containers. You can download it from https://github.com/google/\ndocker-explorer.\n■ Notary: This open source project includes a server and a client for running\nand interacting with trusted containers. Notary is maintained by The Update\nFramework (TUF). You can obtain more information about Notary from\nhttps://github.com/theupdateframework/notary and information about TUF\nfrom https://theupdateframework.github.io.\n oscap-docker: OpenSCAP (created by RedHat) includes the oscap-docker\ntool, which is used to scan Docker containers and images. OpenSCAP and the\n oscap-docker tool can be downloaded from https://github.com/OpenSCAP/\nopenscap.\nKey.\nMobile Device Security\nTopic\nMobile device security is a hot topic today. Individuals and organizations are increas-\n ingly using mobile devices for personal use and to conduct official business. Because\nof this, the risk in mobile devices and applications continues to increase.\nThe OWASP organization created the Mobile Security Project to provide mobile\napplication and platform developers, as well as security professionals, resources\nto understand cybersecurity risks and to build and maintain secure mobile\napplications. The OWASP Mobile Security Project website can be accessed at\nhttps://www.owasp.org/index.php/OWASP_Mobile_Security_Project.\nOWASP often performs studies of the top mobile security threats and vulnerabilities.\nAccording to OWASP, the top 10 mobile security risks at the time of this writing are:\n■ Improper platform usage\n■ Insecure data storage\n■ Insecure communication\n■Insecure authentication\n■ Insufficient cryptography\n■ Insecure authorization\n■ Client code quality\n■ Code tampering\n■ Reverse engineering\n■ Extraneous functionality",
    "Page_71": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n315\nMobile applications (apps) run either directly on a mobile device, on a mobile device\nweb browser, or both. Mobile operating systems (such as Android and Apple iOS)\noffer software development kits (SDKs) for developing applications (such as those\nfor games, productivity, busines, and more). These mobile apps, referred to as native\napps, typically provide the fastest performance with the highest degree of reliability\nand adhere to platform-specific design principles.\nMobile web apps are basically websites designed to look and fe like native apps.\nThese apps are accessed by a user via a device's browser and are usually developed in\nHTML5 and responsive mobile frameworks. Another option, a hybrid app, executes\nlike a native app, but a majority of its processes rely on web technologies.\nA lot of attacks against mobile apps start with reverse engineering and then move\ninto tampering with the mobile app. Reverse engineering involves analyzing the\ncompiled app to extract information about its source code. The goal of reverse engi-\nneering is to understand the underlying code and architecture. Tampering is the\n process of changing a mobile app (either the compiled app or the running process)\n or its environment to affect its behavior. In order to perform good reverse engineer-\ning of mobile apps, you should become familiar with the mobile device processor\n psn a d a pe  anaxa de r \ndevelop a mobile app.\nModern apps often include controls that hinder dynamic analysis. Certificate pin-\nning and end-to-end (E2E) encryption sometimes prevent you from intercepting or\nmanipulating traffic with a proxy. Root detection could prevent an app from running\non a rooted device, preventing you from using advanced testing tools.\n NOTE  Mobile apps that implement the protections specified in the Mobile AppSec\nVerification Standard (MASVS) Anti-Reversing Controls should withstand reverse\n engineering to a certain degree. Details about MASVS can be accessed at\nhttps://www.owasp.org/images/6/61/MASVS_v0.9.4.pdf.\nThere are a few basic tampering techniques:\n Binary patching (\"modding\"): This involves changing the compiled app\n in binary executables or tampering with resources. Modern mobile operat-\n ing systems such as iOS and Android enforce code signing to mitigate binary\ntampering.\n Code injection: This allows you to explore and modify processes at runtime.\nSeveral tools, including Cydia Substrate (http://www.cydiasubstrate.com),\nFrida (https://www.frida.re), and XPosed (https://github.com/rovo89/\nXposedInstaller), give you direct access to process memory and important\n structures such as live objects instantiated by the app.",
    "Page_72": "316\nCompTIA? PenTest+ Cert Guide\n■ Static and dynamic binary analysis: This is done using disassemblers and\ndecompilers to translate an app's binary code or bytecode back into a more\nunderstandable format. By using these techniques on native binaries, you can\nobtain assembler code that matches the architecture for which the app was\ncompiled.\n■ Debugging and tracing: It is possible to identify and isolate problems in a\n program as part of the software development life cycle. The same tools used\nfor debugging are valuable to reverse engineers even when identifying bugs\nis not their primary goal. Debuggers enable program suspension at any point\n during runtime, inspection of the process's internal state, and even register and\nmemory modification.\nUnderstanding Android Security\nKey\nTopic\nAndroid is a Linux-based open source platform developed by Google as a mobile\noperating system. Android is not only used in mobile phones and tablets but also\nin wearable products, TVs, and many other smart devices. Android-based solutions\ncome with many pre-installed (\"stock\") apps and support installation of third-party\napps through the Google Play store and other marketplaces.\nAndroid's software stack is composed of several different layers (see https://source\nandroid.com/devices/architecture). Each layer defines interfaces and offers specific\nservices. At the lowest level, Android is based on a variation of the Linux kernel. On\ntop of the kernel, the Hardware Abstraction Layer (HAL) defines a standard inter-\nface for interacting with built-in hardware components. Several HAL implementa-\ntions are packaged into shared library modules that the Android system calls when\nrequired. This is how applications interact with the device's hardware (for instance,\nhow a phone uses the camera, microphone, and speakers).\nAndroid apps are usually written in Java and compiled to Dalvik bytecode, which\nis somewhat different from the traditional Java bytecode. The current version of\nAndroid executes this bytecode on the Android runtime (ART). ART is the succes-\n sor to Android's original runtime, the Dalvik virtual machine. The key difference\nbetween Dalvik and ART is the way the bytecode is executed (see https://source\nandroid.com/devices/tech/dalvik/).\nAndroid apps do not have direct access to hardware resources, and each app runs\nin its own sandbox (see https://source.android.com/security/app-sandbox). The\nAndroid runtime controls the maximum number of system resources allocated to\napps, preventing any one app from monopolizing too many resources.",
    "Page_73": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n317\n Even though the Android operating system is based on Linux, it doesn't implement\nuser accounts in the same way other Unix-like systems do. In Android, the multiuser\nsupport of the Linux kernel extends to sandbox apps: With a few exceptions, each\nand the rest of the operating system.\nTIP The file android_filesystem_config.h includes a list of the predefined users and\ngroups to which system processes are assigned. User IDs (UIDs) for other applica-\ntions are added as they are installed.\nAndroid apps interact with system services such as the Android Framework and\nrelated APIs. Most of these services are invoked via normal Java method calls and\nare translated to IPC calls to system services that are running in the background.\nExamples of system services include the following:\n■ Network connectivity, including Wi-Fi, Bluetooth, and NFC\n■ Cameras\n■ Geolocation (GPS)\n■ Device microphone\nThe framework also offers common security functions, such as cryptography.\nThe Android Package Kit (APK) file is an archive that contains the code and\nresources required to run the app it comes with. This file is identical to the original\nsigned app package created by the developer. The installed Android apps are typi-\ncally located at /data/app/[package-name].\nThe following are some key Android files:\n■AndroidManifest.xml: This file contains the definition of the app's package\nname, target, and minimum API version, app configuration, components, and\nuser-granted permissions.\n■ META-INF: This file contains the application's metadata and the following\nthree files:\n■ MANIFEST.MF: This file stores hashes of the app resources.\n CERT.RSA: This file stores the app's certificate(s).\n■ CERT.SF: This file lists resources and the hash of the corresponding\nlines in the MANIFEST.MF file.",
    "Page_74": "318\nCompTIA? PenTest+ Cert Guide\n■ assets: This directory contains app assets (files used within the Android app,\nsuch as XML files, JavaScript files, and pictures), which the AssetManager can\nretrieve.\n■ classes.dex: This directory contains classes compiled in the DEX file format\nthat the Dalvik virtual machine/Android runtime can proces. DEX is Java\nbytecode for the Dalvik virtual machine, and it is optimized for small devices.\n■ lib: This directory contains native compiled libraries that are part of the APK,\nsuch as the third-party libraries that are not part of the Android SDK\n■ res: This directory contains resources that haven't been compiled into\nresources.arsc.\n■ resources.arsc: This file contains precompiled resources, such as XML files\nfor layout.\nAndroidManifest.xml is encoded into binary XML format, which is not readable\nwith a text editor. However, you can unpack an Android app by using Apktool.\ndecodes the manifest file to text-based XML format and extracts the file resources.\nThe following are the typical decoded and extracted files:\n■ AndroidManifest.xml: This is the decoded manifest file, which can be opened\nand edited in a text editor.\n■ apktool.yml: This file contains information about the output of Apktool.\n■ original: This folder contains the MANIFEST.MF file, which stores informa-\ntion about the files contained in the JAR file.\n■ res: This directory contains the apps resources.\n smalidea: This is a Smali language plugin. Smali is a human-readable repre-\nsentation of the Dalvik executable. Every app also has a data directory for stor-\ning data created during runtime. Additional information about smalidea can be\nobtained from https://github.com/JesusFreke/smali/wiki/smalidea.\nis found in this directory.\n code_cache: This is the location of the file system's application-specific cache\ndirectory that is designed for storing cached code. On devices running Lol-\nlipop or later Android versions, the system deletes any files stored in this loca-\ntion when the app or the entire platform is upgraded.\n■ databases: This folder stores SQLite database files generated by the app at\nruntime (for example, user data files).",
    "Page_75": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n319\n■ files: This folder stores regular files created by the app.\n■ lib: This folder stores native libraries written in C/C++. These libraries can\nhave one of several file extensions, including .so and .dll (x86 support). This\nlibraries, including the following:\n armeabi: Compiled code for all ARM-based processors\n■ armeabi-v7a: Compiled code for all ARM-based processors, version 7\nand above only\n■ arm64-v8a: Compiled code for all 64-bit ARM-based processors,\nversion 8 and above only\n■ x86: Compiled code for x86 processors only\n x86_64: Compiled code for x86_64 processors only\n■ mips: Compiled code for MIPS processors\n■ shared_prefs: This folder contains an XML file that stores values saved via\nthe SharedPreferences APIs.\nAndroid leverages Linux user management to isolate apps. This approach is differ-\nent from user management in traditional Linux environments, where multiple apps\nare often run by the same user. Android creates a unique UID for each Android app\nand runs the app in a separate process. Consequently, each app can access its own\nresources only. This protection is enforced by the Linux kernel. Typically, apps are\nassigned UIDs in the range 10000 and 19999. An Android app receives a user name\nbased on its UID. For example, the app with UID 10188 receives the username\nu0_a188. If the permissions an app requested are granted, the corresponding group\nID is added to the app's process. For example, the user ID of the app in this exam-\nple is 10188. It belongs to the group ID 3003 (inet). That group is related to the\n android.permission.INTERNET permission in the application manifest.\nApps are executed in the Android Application Sandbox, which separates the app data\nand code execution from other apps on the device. This separation adds a layer of\nsecurity. Installation of a new app creates a new directory named after the app pack-\nage (for example, /data/data/[package-name]). This directory holds the app's data.\nLinux directory permissions are set such that the directory can be read from and\nwritten to only with the app's unique UID.\nThe process Zygote starts up during Android initialization. Zygote is a system ser-\nvice for launching apps. The Zygote process is a base process that contains all the\ncore libraries the app needs. Upon launch, Zygote opens the socket /dev/socket/",
    "Page_76": "320\nCompTIA? PenTest+ Cert Guide\nzygote and listens for connections from local clients. When it receives a connection,\nit forks a new process, which then loads and executes the app-specific code.\nIn Android, the lifetime of an app process is controlled by the operating system. A\nde s a e pes s a de e  p si ssnd x a\n doesn't yet have any other components running. Android may kill this process when\nthe process is no longer necessary or when it needs to reclaim memory to run more\nimportant apps. The decision to kill a process is primarily related to the state of the\nuser's interaction with the process.\nAndroid apps are made of several high-level components, including the following:\n■Activities\n■ Fragments\n■Intents\n■Broadcast receivers\n■ Content providers and services\nAll these lements are provided by the Android operating system, in the form of pre-\ndefined classes available through APIs.\nTIP  During development, an app is signed with an automatically generated certifi-\ncate. This certificate is inherently insecure and is for debugging only. Most stores\ndon't accept this kind of certificate for publishing; therefore, a certificate with more\nsecure features must be created. When an application is installed on the Android\ndevice, PackageManager ensures that it has been signed with the certificate included\nin the corresponding APK. If the certificate's public key matches the key used to sign\nany other APK on the device, the new APK may share a UID with the preexisting\nAPK. This facilitates interactions between applications from a single vendor. Alter-\nnatively, specifying security permissions for the Signature protection level is possible;\nthis restricts access to applications that have been signed with the same key.\nTo perform detailed analysis of Android applications, you can download Android\nStudio. It comes with the Android SDK, an emulator, and an app to manage the var-\nious SDK versions and framework components. Android Studio also comes with the\nAndroid Virtual Device (AVD) Manager application for creating emulator images.\nYou can download Android Studio from https://developer.android.com/studio.\nFigure 7-13 shows a screenshot of an application called OmarsApplication being\ndeveloped using Android Studio.",
    "Page_77": "321\nFIGURE7-13Android Studio\n For dynamic analysis, you need an Android device to run the target app. In prin-\nciple, however, you can do without a real Android device and test on the emulator.\nFigure 7-14 shows the Android emulator that comes with Android Studio.\nFIGURE7-14Android Emulator",
    "Page_78": "322\nCompTIA? PenTest+ Cert Guide\nTesting on a real device makes for a smoother process and a more realistic environ-\nment. However, emulators provide a lot of convenience and flexibility.\nDevelopers and users often root their real devices to get full control over the oper-\nating system and to bypass restrictions such as app sandboxing. These privileges in\n turn allow individuals to use techniques like code injection and function hooking\n more easily. Rooting is risky and can void the device warranty. You might end up\n\"bricking” a device (rendering it inoperable and unusable) if you run into problems\nwhen rooting the device. More importantly, rooting a device creates additional secu-\nrity risks because built-in exploit mitigations are often removed.\nTIP  You should not root a personal device on which you store your private informa-\ntion. It is recommended to use a cheap, dedicated test device instead.\nFigure 7-15 demonstrates how to use Apktool to decode and analyze the Android\napplication OmarsApplication.\nkto2aktdarlak\nInggresourcetable.\nalueresources...\nriginalfiles\nest.xmlapk\nandroid:\nastyle/\nsintent-filt\nnteatefiryeand\nandrold:label=\"cstring/titlettem\nFIGURE 7-15Using Apktool\nNoTE  The source code for this sample application can be accessed at\nhttps://github.com/The-Art-of-Hacking/art-of-hacking.",
    "Page_79": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities\n323\nA few tools and frameworks are designed to test Android-based systems and related\napplications:\n■ Androick: This collaborative research project allows any user to analyze an\nAndroid application. You can download Androick from https://github.com/\nFlo354/Androick.\n■ NowSecure App Testing: This is a mobile app security testing suite for\nAndroid and iOS mobile devices. There are two versions: a commercial\nedition and a community (free) edition. You can obtain more informa-\ntion about NowSecure from https://www.nowsecure.com/solutions/\nmobile-app-security-testing.\n■ OWASP SeraphimDroid: This privacy and device protection application\nfor Android devices helps users learn about risks and threats coming from\n other Android applications. SeraphimDroid is also an application firewall\nfor Android devices that blocks malicious SMS or MMS from being sent,\nUnstructured Supplementary Service Data (USSD) codes from being\nexecuted, or calls from being called without user permission and\nknowledge. You can obtain more information about SeraphimDroid from\nhttps://www.owasp.org/index.php/OWASP_SeraphimDroid_Project.\nUnderstanding Apple iOSSecurity\nKey.\nThe iOS operating system runs only in Apple mobile devices, including the iPhone,\nTopic\niPad, and iPods. Apple tvOS has inherited many architectural components and\nfeatures from iOS. iOS apps run in a restricted environment and are isolated from\neach other at the file system level. iOS apps are also significantly limited in terms of\nsystem API access compared to macOS and other operating systems. Apple restricts\nand controls access to the apps that are allowed to run on iOS devices. The Apple\nApp Store is the only official application distribution platform.\niOS apps are isolated from each other via the Apple sandbox and mandatory access\ncontrols defining the resources an app is allowed to access. iOS offers very few\nIPC options compared to Android, which significantly reduces the attack surface.\n Uniform hardware and tight hardware/software integration create another security\nadvantage.\nThe iOS security architecture consists of six core features:\n■ Hardware security\n■ Secure boot\n■ Code signing",
    "Page_80": "324\nCompTIA?PenTest+Cert Guide\n■ Sandbox\n■ Encryption and data protection\n■ General exploit mitigations\nEvery iOS device has two built-in Advanced Encryption Standard (AES) 256-bit\nkeys (GID and UID). These keys are included in the application processor and\nsecure enclave during manufacturing. There's no direct way to read these keys with\n software or debugging interfaces such as JTAG. The GID is a value shared by all\nprocessors in a class of devices that is used to prevent tampering with firmware files.\nThe UID is unique to each device and is used to protect the key hierarchy that's used\nfor device-level file system encryption. UIDs are not created during manufacturing,\nand not even Apple can restore the file encryption keys for a particular device.\nThe Apple secure boot chain consists of the kernel, the bootloader, the kernel exten-\nsions, and the baseband firmware. Apple has also implemented an elaborate DRM\nsystem to make sure that only Apple-approved code runs on Apple devices. FairPlay\nm eh s d a  pp se on pe s nrg o\ndeveloped as a DRM for multimedia content purchased through iTunes.\nThe App Sandbox is an iOS sandboxing technology. It is enforced at the kernel\nlevel and has been a core security feature since the first release of iOs. All third-\n party apps run under the same user (mobile), and only a few system applications\nand services run as root. Regular iOS apps are confined to a container that restricts\naccess to the app's own files and a very limited number of system APIs. Access to all\nresources (such as files, network sockets, IPCs, and shared memory) is controlled\nby the sandbox. In addition, iOS implements address space layout randomization\n(ASLR) and the eXecute Never (XN) bit to mitigate code execution attacks.\niOS developers cannot set device permissions directly; they do so by using APIs. The\nfollowing are a few examples of APIs and resources that require user permission:\n■ Contacts\n■Microphone\n■ Calendars\n■ Camera\n■Reminders\n■HomeKit\n■ Photos\n■HealthKit\n■Motion activity and fitness",
    "Page_81": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n325\n■ Speech recognition\n■ Location Services\n■Bluetooth\n■ Media library\n■Social media accounts\nThere are a few tools you can use to practice security testing on mobile devices. One\nof the most popular is the Damn Vulnerable iOS application, a project that provides an\niOS application to practice mobile attacks and security defenses. It has a set of challenges\nthat can be completed by an individual. Each challenge area corresponds to an in-depth\narticle designed to teach the fundamentals of mobile security on the iOS platform. The\nfollowing are examples of the challenges in the Damn Vulnerable iOS application:\n■ Insecure Data Storage\n■ Jailbreak Detection\n■Runtime Manipulation\n■ Transport Layer Security\n■ Client-Side Injection\n■ Broken Cryptography\n■ Binary Patching\n Side Channel Data Leakage\n■ Security Decisions via Untrusted Input\nA learning tool for iOS security that is very popular and maintained by OWASP is\niGoat. iGoat was inspired by the OWASP WebGoat project and has a similar con-\nceptual flow. iGoat is free software, released under the GPLv3 license. iGoat can be\ndownloaded from https://www.owasp.org/index.php/OWASP_iGoat_ Tool_Project.\nAnother tool is the MobiSec Live Environment Mobile Testing Framework. MobiSec\nis a live environment for testing mobile environments, including devices, applications,\nand supporting infrastructure. The purpose is to provide attackers and defenders the\n ability to test their mobile environments to identify design weaknesses and vulnerabili-\nties. MobiSec can be downloaded from https://sourceforge.net/projects/mobisec.\nMITRE started a collaborative research project focused on open source iOS secu-\nrity controls called iMAS. iMAS was created to protect iOS applications and data\nbeyond the Apple-provided security model and reduce the attack surface of iOS\nmobile devices and applications. The source code for iMAS is available on GitHub\nat https://github.com/project-imas.",
    "Page_82": "326\nCompTIA? PenTest+ Cert Guide\nUnderstanding Physical Security Attacks\nPhysical security is a very important element when defending an organization\nagainst any security risk. The following sections provide an overview of physical\n device security and facilities/building security concepts.\nKey.\nUnderstanding Physical Device Security\nTopic\nAttackers with physical access to a device can perform a large number of attacks\nOf course, device theft is one of the most common risks and the main reason it is\nimportant to encrypt workstations, laptops, and mobile devices as well as to enable\nremote wipe and remote recovery features. On the other hand, a few more sophisti-\ncated attacks and techniques can be carried out, including the following:\n■ Cold boot attacks: Cold boot is a type of side channel attack in which the\nattacker tries to retrieve encryption keys from a running operating system after\nusing a cold reboot (system reload). Cold boot attacks attempt to compromise\n the data remanence property of DRAM and SRAM to retrieve memory con-\ntents that could remain readable in the seconds to minutes after power has\nremovable media to boot a different operating system used to dump the con-\ntents of pre-boot physical memory to a file.\n Serial console debugging, reconnaissance, and tampering: Many organiza-\ntions use terminal servers (serial console servers) to allow remote access to the\nserial port of another device over a network. These devices provide remote\naccess to infrastructure devices (for example, routers, switches), servers, and\nindustrial control systems. They are also used to provide out-of-band access\nto network and power equipment for the purpose of recovery in the case of an\noutage. Many serial devices do not require authentication and instead assume\nthat if you are physically connected to a serial port, you probably are assumed\nto be allowed to configure and connect to the system. Clearly, this can be\nabused by any attacker to gain access to a victim system. Even if terminal serv-\ners may allow you to connect using a non-privileged account, attackers can use\nunprotected serial consoles for reconnaissance and debugging to then perform\nfurther attacks on the targeted system.\n■ JTAG debugging, reconnaissance, and tampering: JTAG is a hardware\naccess interface that allows a penetration tester to perform debugging of hard-\nware implementations. Debuggers can use JTAG access registers, memory\ncontents, and interrupts, and they can even pause or redirect software instruc-\ntion flows. JTAG can be an effective attack research tool because it allows\ndebugging software (such as OpenOCD) control over a JTAG interface.\nOpenOCD can be used to manipulate the JTAG's TAP controller and to send",
    "Page_83": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n327\n bits to a state machine with the goal of the chip being able to interpret them\nas valid commands. These types of tools allow you to debug firmware and soft-\nware in devices via the GNU Project Debugger (GDB) or even interact with\n other tools like IDA Pro and other disassemblers and debuggers.\nClearly, an attacker with physical access to the targeted system has an advantage.\nPhysical security to protect buildings and facilities is therefore crucial. In the next\nsection, you will learn details about different physical security threats and attacks\nagainst buildings and facilities.\nProtecting Your Facilities Against Physical Security Attacks\nKey\nNumerous types of attacks can be carried to infiltrate facilities and to steal sensitive\ninformation from an organization. The following are some of the most common\nof them:\n■ Piggybacking/tailgating: An unauthorized individual may follow an autho-\nrized individual to enter a restricted building or facility.\n■ Fence jumping: An unauthorized individual may jump a fence or a gate to\n enter a restricted building or facility.\n■ Dumpster diving: An unauthorized individual may search for and attempt to\ncollect sensitive information from the trash.\n1 Lockpicking: An unauthorized individual may manipulate or tamper with\nlock. Lock bypass is a technique used in lockpicking. Locks may be bypassed\nin many ways, including by using techniques such as simple loiding attempts\n(using a “credit card\" or similar items against self-closing “latch\" locks) and\nbypassing padlocks by shimming.\n Egress sensors: Attackers may tamper with egress sensors to open doors.\n■ Badge cloning: Attackers may clone the badges of employees and authorized\nindividuals to enter a restricted facility or a specific area in a building. One\nof the most common techniques is to clone radio-frequency identification\n(RFID) tags (refer to Chapter 5).\nExam Preparation Tasks\nAs mentioned in the section “How to Use This Book\" in the Introduction, you have\na couple of choices for exam preparation: the exercises here, Chapter 11,“Final Prep-\naration,” and the exam simulation questions in the Pearson Test Prep software online.",
    "Page_84": "328\nCompTIA? PenTest+ Cert Guide\nReview All Key Topics\n Review the most important topics in this chapter, noted with the Key Topics icon in \nthe outer margin of the page. Table 7-3 lists these key topics and the page number\n on which each is found.\nKey\nTable 7-3 Key Topics for Chapter 7\nTopic\nKey Topic\nDescription\nPage\nElement\nNumber\n Summary\nUnderstanding insecure service and protocol configurations\n281\nSummary\nUnderstanding local privilege escalation\n285\nSummary\nUnderstanding Linux permissions\n286\nSummary\n Changing Linux permissions and understanding sticky bits\n288\n Summary\nUnderstanding SUID or SGID and Unix programs\n291\nSummary\nIdentifying insecure Sudo implementations\n294\nSummary\nUnderstanding ret2libc attacks\n298\nSummary\nDefining CPassword\n299\nSummary\nAbusing and obtaining clear-text LDAP credentials\n300\nSummary\nUnderstanding Kerberoasting\n301\nSummary\nCompromising credentials in Local Security Authority Subsystem\n301\nService (LSASS) implementations \nSummary\nUnderstanding and attacking the Windows SAM database\n302\n Summary\nUnderstanding dynamic link library (DLL) hijacking\n303\n Summary\nAbusing exploitable services\n304\nSummary\nExploiting insecure file and folder permissions\n305\nSummary\n Defining and understanding keyloggers\n306\n Summary\n Defining and understanding scheduled tasks\n307\nSummary\nUnderstanding sandbox escape attacks\n308\nSummary\nUnderstanding virtual machine (VM) escape attacks\n310\nSummary\n Identifying container security challenges\n313\nSummary\nUnderstanding the top mobile security threats and vulnerabilities \n314\nSummary\nUnderstanding Android security\n316\nSummary\nUnderstanding Apple iOS security\n323\nSummary\nUnderstanding cold boot attacks, serial console, and JTAG\n326\n debugging reconnaissance and tampering\nSummary\nUnderstanding physical security attacks\n327",
    "Page_85": "Chapter 7: Exploiting Local Host and Physical Security Vulnerabilities \n329\nDefine Key Terms\nDefine the following key terms from this chapter and check your answers in the\nglossary:\npiggybacking, tailgating, fence jumping, dumpster diving, lockpicking,\nlock bypa,JTAG, sandbox, keylogger, Group Policy Object (GPO),\nKerberoast, CPassword, Ret2libc\nQ&A\nThe answers to these questions appear in Appendix A. For more practice with exam\nformat questions, use the Pearson Test Prep software online.\n1. Which of the following involves an unauthorized individual searching and\nattempting to collect sensitive information from the trash?\na. Piggybacking\nb. Fence jumping\nc. Dumpster diving\nd. Lockpicking\n2. Which of the following is a technique that is executed using disassemblers and\ndecompilers to translate an app's binary code or bytecode back into a more or\nless understandable format?\na. Static and dynamic binary analysis\n b. Static and dynamic source code analysis\nc. Binary patching, or “modding”\nd. Binary code injection\n 3. Which of the following is a sandbox built in the Linux kernel to only allow the\nwriteO, readO, exitO, and sigreturnO system calls?\na. SUDI\nb. Seccomp\nc. SELinux\nd. Linux-jail",
    "Page_86": "330\nCompTIA? PenTest+ Cert Guide\n4. Which of the following statements is not true?\na. Modern web browsers provide sandboxing capabilities to isolate exten-\nsions and plugins.\nb. HTML5 has a sandbox attribute for use with iframes.\nc. Java virtual machines include a sandbox to restrict the actions of\nuntrusted code, such as a Java applet.\nd. Microsoft's .NET Common Language Runtime cannot enforce restric-\ntions on untrusted code.\n5. Which of the following can attackers use to capture every keystroke of a user\nin a system and steal sensitive data (including credentials)?\na. RATs\nb. Keybinders\nc. Keyloggers\nd. Ransomware\n6. Which of the following functionalities can an attacker abuse to try to elevate\n privileges if the service is running under SYSTEM privileges?\na. Unquoted service paths\nb. Unquoted PowerShell scripts\nc. Writable SYSTEM services using the GetSystemDirectory function\nd. Cross-site scripting (XSS)\n7. Which of the following is not a place where Windows stores password hashes?\na. SAM database\nb. LSASS\nc. PowerShell hash store\nd. AD database\n8. Which of the following is an open source tool that allows an attacker to\n perform pass-the-hash and pass-the-ticket attacks?\na. SAM Stealer\nb. Mimikatz\nc. Kerberoast\nd. Hashcrack",
    "Page_87": "This page intentionally left blank",
    "Page_88": "A\nkey list command, 96-97\nAC (Attack Complexity) metrics, 37\nlaunching, 91\nacceptance of risk, 48\nmain menu and splash page, 91\nAccess Vector (AV) metrics, 37\nsearches, 95\n Shodan API, 96-102\naccount data, elements of, 55\nshow modules command, 92-95\nacquirers, 54\nActivate Exam button (Pearson Test\nZenmap, 393-395\n Prep software), 507\nadapters, wireless, 189\nActivate New Product button (Pearson\nAdd-Persistence script, 351\nTest Prep software), 506\nAddress Resolution Protocol. See ARP\nactive reconnaissance\n(Address Resolution Protocol)\ndefined, 70-71\naddress space layout randomization\nEnum4linux, 395-400\n(ASLR), 298, 324\nenumeration\nADIA (Appliance for Digital\ndefined, 71\nInvestigation and Analysis), 457\ngroup, 81-82\nAdobe Reader, 309\n Advanced Encryption Standard (AES),\nhost, 78-79\nnetwork share, 82\n324\npacket crafting, 85-87\nadvertisements, malvertising, 127-128\nservice, 85\nAES (Advanced Encryption Standard),\n324\nuser, 80-81\nweb page/web application, 83-84\nAFL (American Fuzzy Lop), 459\nNikto scans, 84\nAircrack-ng suite, 186-189, 191-196\nNmap port scans, 391-393\nAireplay-ng, 188, 191, 194-195\nhalf-open, 71-72\nAirmon-ng, 186-187, 191, 194\nping, 77-78\nAirodump-ng, 188, 191, 194-195\nSYN, 71-72\nalgorithms\nTCP connect, 73-74\ncryptographic, 243-244\nTCP FIN, 76-77\nLuhn, 55\nUDP, 74-75\nALTER DATABASE statement,\nRecon-ng, 90-102\n228\nhackertarget module, 96\nALTER TABLE statement, 228\nhelp menu, 92\n American Fuzzy Lop (AFL), 459",
    "Page_89": "542\namplification DDoS (distributed denial-of-service) attacks\namplification DDoS (distributed denial-\nASCII armor region, 298\nof-service) attacks, 178-179\nASCII armoring, 298\nAnchore, 313\nASLR (address space layout\nAndersson, Bjorn, 441\nrandomization), 298, 324\nAndroick, 323\nassets directory, 318\nAndroid\nASVs (approved scanning vendors), 54\nandroid_filesystem_config.h file, 317\nAttack Complexity (AC) metrics, 37\nAndroidManifest.xml file, 317\nattacks, 7-8. See also evasion techniques;\nAPK (Android Package Kit), 317\n privilege escalation\nAVD (Android Virtual Device)\nauthentication-based vulnerabilities\nManager, 320\ncredential brute forcing, 243-245\nsecurity, 316-323\ndefault credential exploits, 249-250\n APIs (application programming\nKerberos exploits, 250\ninterfaces), 40\nredirect attacks, 249\nAPI-based keyloggers, 307\n session hijacking, 245-249\ndocumentation, 40\nauthorization-based vulnerabilities\n ESAPI (Enterprise Security API), 240\nInsecure Direct Object Reference\nRESTful (REST), 269\nvulnerabilities, 251-252\nShodan, 96-102, 378-380\n parameter pollution, 250-251\nunprotected, 267-270\nclickjacking, 261\nAPK (Android Package Kit), 317\n command injection, 241-242\nApktool, 322\ncredential, 420\napktool.yml file, 318\nCain and Abel, 424-425\nappetite for risk, 49-50\nCeWL,431-432\nApple\nHashcat, 425-427\niOS security, 323-325\nHydra, 428-429\nRemote Desktop, 348, 433\n John the Ripper, 420-425\nAppliance for Digital Investigation and\n Johnny, 425\nAnalysis (ADIA), 457\nMedusa, 430-431\napplication-based vulnerabilities, 207\nMimikatz, 432\n approved scanning vendors (ASVs), 54\nNcrack, 430-431\nAPs (access points), rogue, 185\nPatator, 432-433\nAqua Security, 313\nRainbowCrack, 429-430\narm64-v8a folder, 319\n CSRF (cross-site request forgery),\narmeabi folder, 319\n260-261\narmeabi-v7a folder, 319\ncurrent threat landscape, 7-9\narmoring, ASCII, 298\nDDoS (distributed denial-of-service),\nARP (Address Resolution Protocol)\n8-9\ncache poisoning, 173-175\nexploitation frameworks\nspoofing, 173-175\nBeEF, 449-450\nArt of Hacking GitHub repository, 225,\nMetasploit, 442-449\n346,390, 395,410, 454\nfile inclusion vulnerabilities",
    "Page_90": "SQL injection\n543\nLFI (local file inclusion), 264\n SMB (Server Message Block),\nRFI (remote file inclusion), 264-265\n151-155,157-159\nHTML injection, 241\nSMTP (Simple Mail Transfer\ninsecure code practices\nProtocol), 159-166\n code signing, lack of, 270\nVLAN hopping, 181-183\nerror-handling errors, 266\nphysical, 326-327\nhard-coded credentials, 266\nransomware\nhidden elements, 270\nNyeta, 354\nrace conditions, 266-267\nWannaCry, 8\nsource code comments, 265-266\nret2libc (\"return-to-libc\"), 298\nunprotected APIs, 267-270\n security misconfigurations, 262\ninsecure service and protocol\n cookie manipulation attacks,\nconfigurations, 281-284\n263-264\nto IoT devices, 8-9\n directory traversal vulnerabilities,\nmobile device security, 314-316\n262-263\nAndroid, 316-323\nsocial engineering, 11-12\nApple iOS, 323-325\ncharacteristics of, 125-126\n OWASP Mobile Security Project,\nelicitation, 135\n314\ninterrogation, 136\n network-based vulnerabilities\nmalvertising, 127-128\nDDoS (distributed denial-of-service),\n motivation techniques, 137\n178-179\npharming, 126-127\nDHCP (Dynamic Host Control\nphishing, 126\nProtocol), 183-185\n pretexting, 136\nDNS cache poisoning, 155-157\nSET (Social-Engineer Toolkit),\nDoS (denial-of-service), 176-177\n129-134\n FTP (File Transfer Protocol),\nshoulder surfing, 137\n166-168\nSMS phishing, 134-135\nKerberos, 169-172\nspear phishing, 128-134\n LDAP (Lightweight Directory\nUSB key drop, 138\nAccess Protocol), 169-172\nvoice phishing, 135\nman-in-the-browser attacks, 249\nwhaling, 135\nMITM (man-in-the-middle) attacks,\nSQL injection, 228\n173-175,193\nblind, 237\n NAC (network access control)\nBoolean technique, 233, 237\nbypass, 179-180\ncategories of, 232-234\n name resolution and SMB attacks,\ndatabase fingerprinting, 234-235\n148-155\nerror-based technique, 233\npass-the-hash attacks, 168-169,\nexamples of, 228-232\n302-303\nmitigations, 240\nroute manipulation attacks,\nout-of-band technique, 233, 237-238\n175-176\nstored procedures, 239-240",
    "Page_91": "544\nSQL injection\ntime-delay technique, 233, 239\ncredential brute forcing, 243-245\nUNION operator technique, 233,\ndefault credential exploits, 249-250\n235-236\nKerberos, 169-172\nthreat actors, 9-10\nKerberos exploits, 250\nwireless and RF-based\nredirect attacks, 249\ncredential harvesting, 199-200\nsession hijacking, 245-249\ndeauthentication attacks, 186-189\nauthority, in social engineering, 137\nevil twin attacks, 185-186\nauthorization-based vulnerabilities\nfragmentation attacks, 197-198\n Insecure Direct Object Reference\nIV (initialization vector) attacks,\nvulnerabilities, 251-252\n190\nparameter pollution, 250-251\nKARMA attacks, 197\nAV (Access Vector) metrics, 37\nKRACK (key reinstallation attack),\nAvailability Impact (A) metrics, 37\n196-197\n AVD (Android Virtual Device) Manager,\n PNL (preferred network list) attacks,\n320\n189\navoidance of risk, 49\n RFID (radio-frequency\nidentification) attacks, 200\n rogue access points, 185\nbackdoors, 238, 346\nsignal jamming, 189\nbacktracking, 262-263\nwar driving, 190\nbadge cloning, 327\nWEP (Wired Equivalent Privacy)\n bandwidth limitations, vulnerability\nattacks, 190-192\nscanning and, 111\nWPA (Wi-Fi Protected Access)\nBane, 313\nattacks, 192-196\nbase groups, 34-37\nWPS (Wi-Fi Protected Setup),\nbash, 460-461\n197\n basic service set identifiers (BSSIDs), 188\nXSS (cross-site scripting)\nBeEF, 449-450\nvulnerabilities, 252-253\nBGP hijacking attacks, 175\nDOM-based XSS attacks, 256-257\nBienaime, Pierre, 441\nevasion techniques, 257-259\nbilateral NDAs (nondisclosure\nreflected XSS attacks, 253-254\nagreements), 43\nstored XSS attacks, 255-256\nbinary patching, 315\nzero-day, 8\n Black Hills Information Security, 90-91\naudience for reports, identifying, 476-477\nblack lists, 46\nAUTH command (SMTP), 161\nBlackArch Linux, 224, 367-368\nAuthd,284\nblack-box tests, 12, 47\nauthenticated scans, 105\nblind shells, creating, 338-344\nauthentication\nblind SQL injection, 237\nAuthentication Cheat Sheet (OWASP),\nBlowfish, 166\n222,246\nblue teams, 46\nvulnerabilities\nBluejacking, 199-200",
    "Page_92": "commands\n545\nBluesnarfing, 199-200\nChoose a Tool dropdown (Dradis),\nBooleans, SQL injection with, 233, 237\n484-485\nBorn, Kenton, 441\nCID codes, 56\nbotnets, 177\nCIFS (Common Internet File System),\n Bourne-Again shell (bash), 460-461\n172\nBreach Notification Rule, 52\nCIS Docker Benchmark, 313\nBSSIDs (basic service set identifiers), 188\nCisco ETA (Encrypted Traffc Analytics),\nbudget, planning, 32-33\n440\nBurp Suite, 41, 214\nCisco Smart Install, 281\nBursztein, Elie, 138\nClair, 313\nbusiness associates, 53\nclasses.dex directory, 318\nbWAPP, 225\nclassification, report, 499\ncleanup process, 356\nC\nclearev command, 343\nC (Confidentiality Impact) metrics, 37\nclear-test credentials in LDAP, 300-301\nC2 (command and control) utilities,\nclickjacking, 261\n344-345\n Clickjacking Defense Cheat Sheet\ncache file, 318\n(OWASP), 261\ncache poisoning\n clients, HTTP (Hypertext Transfer\nProtocol), 213\nARP (Address Resolution Protocol),\n173-175\ncode injection, 315\n code practices, insecurity in\nDNS (Domain Name System),\n155-157\ncode signing, lack of, 270\nCain and Abel, 424-425\nerror-handling errors, 266\nhard-coded credentials, 266\nCAINE (Computer Aided Investigative\nEnvironment), 369, 457\nhidden elements, 270\nCAPEC (Common Attack Pattern\nrace conditions, 266-267\nEnumeration and Classification),\nsource code comments, 265-266\n114\nunprotected APIs, 267-270\ncard security codes, 56\ncode_cache file, 318\ncardholder data environment, 55\ncold boot attacks, 326\ncat command, 343\nCollignon, Nicolas, 441\nCAV2 codes, 56\ncommand and control. See C2 (command\ncd command, 343, 350\nand control) utilities\nCensys, 389-390\ncommand injection vulnerabilities,\nCERT.RSA file, 317\n241-242\ncommands. See also scripts; tools\nCERT.SF file, 317\nCeWL,431-432\naireplay-ng, 188, 191, 194-195\nCFTC (Commodity Futures Trading\nairmon-ng, 186-187, 191, 194\nCommission), 52\nairodump-ng, 191, 194\nchaining analysis, 37-38\ncat, 343\nchmod command, 287-289\ncd, 343,350",
    "Page_93": "546\ncommands\nchmod, 287-289\n-sF option, 76-77\nclearev, 343\n-sn option, 77-78\ncontinue, 451\n-sS option, 71-72\nCopy-Item, 349\n-sT option, 73-74\ndig, 90,371-372\n-sU option, 74-75\ndownload, 343\nnslookup, 90, 156-157, 371-372\nedit, 343\nps, 343\nexecute, 343\npwd, 343\nfind, 292-293\nresource, 343\nGet-ChildItem, 349\nrun, 451\nGet-Command, 350\nscapy, 86\nGet-Content, 350\nscreenshot, 448\nGet-HotFix, 350\nsearch, 343\nGet-Location, 350\nSelect-String, 349\nGet-NetFirewallRule, 350\nservice dradis start, 479\nGet-Process, 350\nset LHOST, 155\nGet-Service, 350\nset RHOST, 155\ngetsystem, 449\nsetoollkit, 129\ngetuid, 343\nshell, 343\ngroups, 294\nshow info, 387-388\nhashdump, 343, 448\nshow modules, 383-386\nhost, 371-372\nshow options, 155\nid, 294\nSMTP (Simple Mail Transfer\nidletime, 343\nProtocol), 160-163\nipconfig, 343\nsudo, 286-287,294-298\njohn --list=formats, 420-421\n sysinfo, 449\njohn -show hashes, 423\nupload, 343\nkey list, 96-97\nuse, 387-389\nkeys add, 386\nuse exploit/windows/smb/ms17_010_\nkeys add shodan_api, 98\neternalblue, 155\nkeys list, 386-387\nuseradd, 295\nlcd, 343\nusermod, 294-295\nlist audit, 417-419\nvisudo, 296\nlocate, 423\nwebcam_list, 344\nlpwd, 343\nwebcam_snap, 344\nls, 343, 350\nwhois,372-373\nmigrate, 343\ncomments, exploiting, 265-266\nMove-Item, 349\nCommodity Futures Trading Commission\nmsfconsole, 90-91, 442\n(CFTC), 52\nmsfdb init, 443\nCommon Attack Pattern Enumeration\nNew-NetFirewallRule, 350\nand Classification (CAPEC),\nnmap\n114",
    "Page_94": "Damn Vulnerable Web App (DvWA)\n547\nCommon Internet File System (CIFS),\n credential harvesting, 199-200\n172\nHashcat, 425-427\nCommon Vulnerabilities and Exposures\nHydra, 428-429\n(CVE), 114-115\n John the Ripper, 420-425\nCommon Vulnerability Scoring System\nMedusa, 430-431\n(CVSS), 34-37, 494-495\nMimikatz, 432\nCommon Weakness Enumeration\nNcrack, 430-431\n(CWE), 115\nPatator, 432-433\ncommunication escalation path, 31-32\nRainbowCrack, 429-430\n communications, reporting and, 500-501\n RFID (radio-frequency\nCommunity Edition (Dradis), 479\nidentification) attacks, 200\ncompliance scans, 109-110\nhard-coded, 266\ncompliance-based assessment, 45, 50\nCri-o, 311\nfinancial sector regulations, 50-52\ncross-site scripting. See XSS (cross-site\nhealthcare sector regulations, 52-53\nscripting) vulnerabilities\nkey technical elements, 56-57\n cryptographic algorithms, 243-244\nlimitations of, 57-58\nCrysis, 8\n PCI DSS (Payment Card Industry\n CSRF (cross-site request forgery), 260-261\nData Security Standard), 53-56\ncurl, 221\nComputer Aided Investigative\n custom daemons and processes, creating,\nEnvironment (CAINE), 369, 457\n346\nConfidentiality Impact (C) metrics, 37\nCVC2 codes, 56\nconfidentiality of findings, 32\nCVE (Common Vulnerabilities and\nCONNECT method (HTTP), 217\nExposures), 114-115\ncontainer security, 310-314\nCVSS (Common Vulnerability Scoring\n continue command, 451\nSystem), 34-37, 494-495\n contracts, 41-42\nCVV2 codes, 56\ncookie manipulation attacks, 263-264\nCWE (Common Weakness\nCopy-Item command, 349\nEnumeration), 115\n corporate policies, 43-44\n cyber ranges, 227\n covering tracks, 356\nCydia Substrate, 315\nCPassword attacks, 299\ncracking passwords. See password\nD\ncrackers\ndaemons, creating, 346\nCREATE DATABASE statement, 228\nDagda, 313\nCREATE INDEX statement, 228\nDalvik, 316\nCREATE TABLE statement, 228\nDamn Vulnerable ARM Router (DVAR),\ncredentials\n225\nattacks, 420\nDamn Vulnerable iOS Application\nbrute forcing, 243-245\n(DVIA), 225\nCain and Abel, 424-425\n Damn Vulnerable Web App (DVWA),\nCeWL, 431-432\n225",
    "Page_95": "548\nDATA command (SMTP)\nDATA command (SMTP), 160\n directory traversal vulnerabilities,\ndata isolation, 56\n262-263\ndatabase fingerprinting, 234235\n disassemblers\ndatabases, SAM (Security Account\nIDA, 454-455\nManager), 302-303\nObjdump, 455-457\ndatabases folder, 318\ndisclaimers, documentation of, 38-39\nDDoS (distributed denial-of-service)\ndiscovery scans, 106\nattacks, 8-9\nDistinguished Name (DN), 170\namplification, 178-179\ndistributed denial-of-service. See DDoS\nreflected, 178\n(distributed denial-of-service)\ndeauthentication attacks, 186-189\nattacks\n debugging tools\ndistribution of reports, 499-500\nedb debugger, 452-454\nDIT (Directory Information Tree), 170\nGDB (GNU Project Debugger),\n DLL (dynamic link library) hijacking,\n450-452\n303-304\nImmunity, 454\nDN (Distinguished Name), 170\nOllyDbg, 452-453\nDNS (Domain Name System)\nWindows Debugger, 452\ncache poisoning, 155-157\ndefault credential exploits, 249-250\nDNSSEC (Domain Name System\ndefensive controls, 49\nSecurity Extension), 157\nDEFT (Digital Evidence & Forensics \nexfiltration, 440-442\nToolkit), 457\ntunneling, 440-442\nDELETE method (HTTP), 217\ndns2tcp, 441\nDELETE statement (SQL), 228\nDNScapy, 441\nDembour, Olivier, 441\n DNScat, 441\ndenial-of-service (DoS) attacks, 176-177\nDNScat2,345,441\nDeNiSe, 441\nDNSdumpster, 88\n Department of Health and Human\nDNSRecon, 67-69\nServices (HHS), 52\nDNSSEC (Domain Name System\nDES, 166\n Security Extension), 157\nDev-Sec.io, 313\nDocker, 310-313\nDHCP (Dynamic Host Control\ndocker-bench-security, 313\nProtocol)\ndocker-explorer, 314\nspoofing, 183-185\n Document Object Model. See DOM\nstarvation attacks, 183-185\n(Document Object Model)\ndig command, 90\ndocumentation, 41\nDig tool, 371-372\nAPI (application programming\n Digital Evidence & Forensics Toolkit\ninterface), 268\n(DEFT), 457\nlegal\nDirbuster, 419\ncontracts, 41-42\ndirectory climbing, 262-263\nMSAs (master service agreements),\nDirectory Information Tree (DIT), 170\n42",
    "Page_96": "email threats \n549\n NDAs (nondisclosure agreements),\nUpload Manager screen, 484\n43\nUpload Output from Tool option,\n SOWs (statements of work), 42\n483-484\npre-engagement\nversions, 478-479\nbudget, 32-33\nDROP INDEX statement, 228\ncommunication escalation path,\nDROP TABLE statement, 228\n31-32\nDropboxC2 (DBC2), 345\n confidentiality of findings, 32\nDual Elliptic Curve Deterministic\ndisclaimers, 38-39\nRandom Bit Generator\nimpact analysis and remediation\n(Dual_EC_DRBG), 439\ntimelines, 34-38\ndumpster diving, 327\n point-in-time assessment, 33\n DVAR (Damn Vulnerable ARM Router),\nrules of engagement, 30\n225\ntarget audience, 29-30\nDVIA (Damn Vulnerable iOS\ntechnical constraints, 39\nApplication), 225\nrules of engagement, 30\nDVWA (Damn Vulnerable Web App), 225\nsupport resources, 40-41\ndynamic binary analysis, 316\nDOM (Document Object Model)\nDynamic Host Control Protocol. See\n DOM-based XSS (cross-site scripting)\nDHCP (Dynamic Host Control\nattacks, 256-257\nProtocol)\n stored DOM-based attacks,\n dynamic link library (DLL) hijacking,\n263-264\n303-304\ndomain enumeration, 88-91\nDynDNS service, 8-9\nDomain Name System. See DNS\n(Domain Name System)\nE\n DoS (denial-of-service) attacks,\nE (Exploit Code Maturity), 36\n176-177\neavesdropping, packet, 90\ndot-dot-slash, 262-263\nedb debugger, 452-454\ndowngrade attacks, 175\nedit command, 343\ndownload command, 343\negress sensors, 327\nDradis Framework\n EHLO command (SMTP), 160\nChoose a Tool dropdown, 484-485\nEkman, Erik, 441\ndata import, 483\nelectronic protected health information\nimported scans, viewing, 488-490\n(ePHI), 53\nlaunching, 479\nelicitation, 135\nlogin screen, 480\nemail threats\nnode organization, 486-488\npharming, 126-127\nnode/subnode creation, 481-483\nphishing, 126\noutput file processing, 485-486\nSMS phishing, 134-135\n password creation, 479-480\nspear phishing, 128-134\nplugin.output node, 486\nvoice phishing, 135\n Project Summary screen, 481\nwhaling, 135",
    "Page_97": "550\nEmpire\nEmpire, 171,353-354,434\nevasion techniques\n Encrypted Traffic Analytics (ETA), 440\nDNS tunneling, 440-442\nEncryption, 439-440\nEncryption, 439-440\nencryption\n Proxychains, 439\nAES (Advanced Encryption Standard),\nTor, 438-439\n324\nVeil, 434-437\n cryptographic algorithms, 243-244\nXSS (cross-site scripting)\nengagement, rules of, 30\nvulnerabilities, 257-258\nEnterprise Security API (ESAPI), 240\nevil twin attacks, 185-186\nEnum4linux, 155, 395-400\nexam preparation\nenumeration\nchapter-ending review tools, 509\ndefined, 71\n Pearson Test Prep software, 505\ndomain, 88-91\nexam customization, 507-508\ngroup, 81-82\nexam updates, 508\nhost, 78-79\noffline access, 506-507\nnetwork share, 82\nonline access, 505\npacket crafting, 85-87\n Premium Edition, 508-509\nservice, 85\nstudy plans, 509\nuser, 80-81\nexecute command, 343\nweb page/web application, 83-84\neXecute Never (XN), 324\n environmental groups, 34-37\nexecutive summary section (reports),\nePHI (electronic protected health\n493\ninformation), 53\nexfiltration, DNS (Domain Name\n error handling\nSystem), 440-442\nlack of, 266\nExifTool, 374-375\nverbose, 266\nExploit Code Maturity (E), 36\nerror-based SQL injection, 233\nThe Exploit Database, 151\nESAPI (Enterprise Security API), 240\nExploitability metrics, 35\n escalation of privileges. See privilege\nexploitable services, 304-305\nescalation\nexploitation frameworks\nescalation path, 31-32\nBeEF, 449-450\n ESSIDs (extended basic service set\nMetasploit, 90-91, 115, 154-155,\nidentifiers), 188\n442-449\nETA (Encrypted Traffic Analytics), 440\n Metasploit Unleashed course, 344\nEternalBlue exploit, 8, 154-155\nMeterpreter, 299, 343-344,\nethical hacking\n446-449\ndefined, 6-7\nRDP connections, creating, 348-349\nimportance of, 7\nexploits. See attacks\nnonethical hacking compared to,\nEXPN command (SMTP), 161\n6-7\nexport restrictions, 43\nEttercap, 199\nextended basic service set identifier\nEvan's debugger, 452-454\n(ESSID), 188",
    "Page_98": "Get-NetFirewallRule command\n551\nF\nFOCA (Fingerprinting Organizations\nfalse negatives, 475-476, 477\nwith Collected Archives), 374\nfolder permissions, 305\nfalse positives, 475-476, 477, 495-496\n FBI (Federal Bureau of Investigation),\nforensics tools, 457-458\nforgery, CSRF (cross-site request\n439\nforgery), 260-261\nFDIC (Federal Deposit Insurance\nCorporation) Safeguards Act, 51\n Forum of Incident Response and Security\nTeams (FIRST), 34, 37\nfear, social engineering and, 137\n Federal Bureau of Investigation (FBI), 439\nfragile systems, vulnerability scans for,\nFederal Deposit Insurance Corporation\n111-112\nfragmentation attacks, 197-198\n(FDIC) Safeguards Act, 51\nFederal Financial Institutions\nFrida, 315\nExamination Council (FFIEC), 51\nFTC (Federal Trade Commission), 52\nFTP (File Transfer Protocol)\nFederal Trade Commission (FTC), 52\nFeederbot and Moto, 442\nexploits, 166-168\nfence jumping, 327\nFTPS (File Transfer Protocol Secure),\nFFIEC (Federal Financial Institutions\n166\nfull scans, 106-108\nExamination Council), 51\nfile inclusion vulnerabilities\nfunctions. See also commands\nLFI (local file inclusion), 264\nGetSystemDirectory, 304\n RFI (remote file inclusion), 264-265\nGetWindowsDirectory, 304\nfuzz testing, 458\nFile Transfer Protocol. See FTP (File\nTransfer Protocol)\nfuzzers, 458\nAFL (American Fuzzy Lop), 459\nfiles\nMutiny Fuzzing Framework, 459\n permissions, insecurity in, 305\n SOAP (Simple Object Access Protocol),\nPeach, 459\n40\nG\nfiles folder, 319\nFILS (Financial Institutions Letters), 51\nGame of Hacks, 225\nfinancial sector regulations, 50-52\nGDB (GNU Project Debugger), 450-452\nfind command, 292-293\nGET method (HTTP), 215, 217\n Find-AVSignature script, 351\nGet-ChildItem command, 349\nFindbugs, 458\nGet-Command command, 350\nfindings, reporting, 495-497\nGet-Content command, 350\nFindsecbugs, 458\nGet-GPPAutologon script, 352\nFinger, 284\nGet-GPPPassword script, 352\nfingerprinting databases, 234-235\nGet-HotFix command, 350\nFingerprinting Organizations with\nGet-HttpStatus script, 352\nCollected Archives (FOCA), 374\nGet-Keystrokes script, 352\nFIRST (Forum of Incident Response and\nGet-Location command, 350\nSecurity Teams), 34, 37\nGet-MicrophoneAudio script, 352\n FIRST.org, 494\nGet-NetFirewallRule command, 350",
    "Page_99": "552\nGet-Process command\nGet-Process command, 350\nHEAD method (HTTP), 217\nGet-SecurityPackages script, 351\n Health Information Technology for\nGet-Service command, 350\nEconomic and Clinical Health\ngetsystem command, 449\nAct, 52\nGetSystemDirectory function, 304\nhealth plans, 53\nGet-TimedScreenshot script, 352\nhealthcare clearinghouses, 53\ngetuid command, 343\nhealthcare providers, 53\nGet-VaultCredential script, 352\nhealthcare sector regulations, 52-53\nGet- VolumeShadowCopy script, 352\nHellBound Hackers, 225\nGetWindowsDirectory function, 304\nHELO command (SMTP), 160\nGLBA (Gramm-Leach-Bliley Act), 51-52\nHELP command (SMTP), 161\nGNU Project Debugger (GDB),\nhelp menu (Recon-ng), 92\n450-452\nHeyoka, 441\n goals-based assessment, 45\nhidden elements, 270\nhijacking\n golden ticket attacks (Kerberos), 170-172\nGPOs (Group Policy Objects), 305-306\nDLL (dynamic link library),\nGPP attacks. See CPassword attacks\n303-304\nGramm-Leach-Bliley Act (GLBA), 51-52\nsession, 245-249\nGraphQL, 40, 267\nHIPAA Security Enforcement Final\ngray-box tests, 13, 47\nRule, 52\ngroups\nHIPAA Security Rule, 52-53\n CVSS (Common Vulnerability Scoring\nHITECH (Health Information\nSystem), 34-37\nTechnology for Economic and\nenumeration, 81-82\nClinical Health) Act, 52\nGroup Policy Objects (GPOs))\nhopping, VLAN, 181-183\n305-306\nHost, 371-372\ngroups command, 294\nhost enumeration, 78-79\nhosts, local. See local host vulnerabilities\nH\nHPP (HTTP parameter pollution),\nHack This, 225\n250-251\nHack This Site, 225\nHTML (Hypertext Markup Language)\nHackazon, 225\nHTML5,309\nhackertarget module, 96\ninjection, 241\nHTTP (Hypertext Transfer Protocol),\nhacktivists, 10\nHAL (Hardware Abstraction Layer),\n213-221\n316\nclients, 213\nhalf-open scanning, 71-72\nHPP (HTTP parameter pollution),\nhandling reports, 499-500\n250-251\nhard-coded credentials, 266\n proxies\nHardware Abstraction Layer (HAL), 316\ndefined, 214 \nHashcat, 425-427\nZAP, 214\nhashdump command, 343, 448\nrequest/response model, 215-218",
    "Page_100": "intrusion prevention systems (IPSs)\n553\nservers, 213\nInformation Systems Security Assessment\nsessions, 213\nFramework (ISSAF), 16\nURLs (uniform resource locators),\ninitialization vector (IV) attacks, 190\n219-220\ninjection-based vulnerabilities\nhttp-enum script, 83-84\ncommand injection, 241-242\nHydra, 428-429\nHTML injection, 241\nHypertext Markup Language.\nSQL injection, 228\n See HTML (Hypertext Markup\nblind, 237\nLanguage)\nBoolean technique, 233, 237\n Hypertext Transfer Protocol. See HTTP\ncategories of, 232-234\n(Hypertext Transfer Protocol)\ndatabase fingerprinting, 234-235\nhypervisor-based keyloggers, 307\nerror-based technique, 233\nexamples of, 228-232\nmitigations, 240\nI (Integrity Impact) metrics, 37\nout-of-band technique, 233, 237-238\nid command, 294\nstored procedures, 239-240\nIDA, 454-455\ntime-delay technique, 233, 239\nIdentd, 284\nUNION operator technique, 233,\nidletime command, 343\n235-236\ninsecure code practices\nIDs\nSGID (set-group-ID)\ncode signing, lack of, 270\nLinux, 289\n error-handling errors, 266\nUnix, 291-293\nhard-coded credentials, 266\nSUID (set-user-ID)\nhidden elements, 270\nLinux, 289\nrace conditions, 266-267\nUnix, 291-293\nsource code comments, 265-266\n IETF (Internet Engineering Task Force),\nunprotected APIs, 267-270\n157\nInsecure Direct Object Reference\niGoat, 325\nvulnerabilities, 251-252\nIHI (individually identifiable health\nINSERT INTO statement, 228\ninformation), 53\ninsider threats, 10\nIMAP (Internet Message Address\ninspection, packet, 90\nProtocol), 159\nInstall-SSP script, 351\niMAS, 325\nIntegrity Impact (M) metrics, 37\n Immunity, 454\nintentionally vulnerable systems, 224-227\nimpact analysis, 34-38\nInternet Engineering Task Force. See\nIETF (Internet Engineering Task\n Impact metrics, 36-44\nForce)\nimpersonation, 136\nindividually identifiable health\n Internet Message Address Protocol\ninformation (IIHI), 53\n(IMAP), 159\ninformation gathering.\ninterrogation, 136\n See reconnaissance\nintrusion prevention systems (IPSs), 46",
    "Page_101": "554\nInvoke-Credentiallnjection script\nInvoke-CredentialInjection script, 351\nexploits, 250\nInvoke-DllInjection script, 351\nKerberos Delegation, 172\nInvoke-Mimikatz script, 352\nKRBTGT(Kerberos TGT) password\nInvoke-NinjaCopy script, 352\nhash, 170\nInvoke-Portscan script, 352\nvulnerabilities, 169-172\n Invoke-ReflectivePEInjection script, 351\nkernel-based keyloggers, 307\nInvoke-ReverseDnsLookup script, 352\nkey list command, 96-97\nInvoke-Shellcode script, 351\nkey management, 57\n Invoke-TokenManipulation script, 351\n key reinstallation attack (KRACK)\n Invoke-WmiCommand script, 351\n196-197\nIodine, 441\nkeyloggers, 306-307\niOS security, 323-325\nkeys add command, 386\nIoT (Internet of Things), threats to,\nkeys add shodan_api command, 98\n8-9\nkeys list command, 386-387\nipconfig command, 343\n KRACK (key reinstallation attack),\n IPSs (intrusion prevention systems),\n196-197\n46\n KRBTGT (Kerberos TGT) password\nISSAF (Information Systems Security\nhash, 170\nAssessment Framework), 16\nIV (initialization vector) attacks, 190\nL\nlabs, 16-17\nJ\nrecovery, 19\njail, 309\nrequirements and guidelines, 18\nJapan Computer Emergency Response\ntools, 18-19\nTeam (JPCERT), 113\nweb application, 224-227\nJavaScript-based keyloggers, 307\nlanguages\njohn --list=formats command, 420-421\nPython, 461\njohn -show hashes command, 423\nRuby, 461-462\n John the Ripper, 420-425\nLanman, 80-81\nJohnny, 425\nlateral movement, 347\n JPCERT Japan Computer Emergency\npost-exploitation scanning, 347-348\nResponse Team), 113\nremote access protocols, 348-349\nJTAG debugging, 326-327\nlcd command, 343\nJWT (JSON Web Token), 223\nLDAP (Lightweight Directory Access\nProtocol)\nK\nclear-test credentials in, 300-301\nKali Linux, 224, 366\nvulnerabilities, 169-172\nKaminsky, Dan, 441\nlegal concepts, 41\nKARMA attacks, 197\ncontracts, 41-42\nKennedy, Dave, 11-12\n MSAs (master service agreements), 42\nKerberoast, 301\n NDAs (nondisclosure agreements), 43\nKerberos\n SOWs (statements of work), 42",
    "Page_102": "META-INF file\n555\nlegislation. See regulations\nlocate command, 423\nLFI (local file inclusion) vulnerabilities,\nlockpicking, 327\n264\nLocky, 8\nlib directory, 318\nlpwd command, 343\nlib folder, 319\nIs command, 343, 350\nLightweight Directory Access Protocol.\nLSASS (Local Security Authority\nSee LDAP (Lightweight Directory\nSubsystem Service) credentials,\nAccess Protocol)\n301-302\nlikeness, social engineering and, 137\nLuhn, Hans Peter, 55\nLink-Local Multicast Name Resolution.\nLuhn algorithm, 55\nSee LLMNR (Link-Local\nLXC (Linux Containers), 310\nMulticast Name Resolution)\nLinux\nM\ndistributions, 224, 365\nMAC authentication (auth) bypass,\nBlackArch Linux, 224, 367-368\n179-180\nCAINE (Computer Aided \n magnetic credit card stripes, 56\nInvestigative Environment), 369\nMAIL command (SMTP), 161\nKali Linux, 224, 366\nMaltego, 381-382\nParrot, 224, 367\nmalvertising, 127-128\n Security Onion, 369-370\n Management Frame Protection (MFP),\nSELinux (Security Enhanced Linux),\n189\n293\nManagement Information Base (MIB),\nLXC (Linux Containers), 310\n158\npermissions, 286-291\nMANIFESTMF file, 317\nlist audit command, 417-419\nman-in-the-browser attacks, 249\n LLMNR (Link-Local Multicast Name\nman-in-the-middle attacks. See MITM\nResolution), 148-150\n(man-in-the-middle) attacks\nlocal file inclusion (LFI) vulnerabilities,\nMasscan, 78-79\n264\n master service agreements (MSAs), 42\nlocal host vulnerabilities, 281. See also\nMASVS (Mobile AppSec Verification\n privilege escalation\n Standard) Anti-Reversing\ninsecure service and protocol configu-\nControls, 315\nrations, 281-284\nMD5 algorithm, 166\nmobile device security, 314-316\nmeasurements, 494-495\nAndroid, 316-323\nMedusa, 430-431\nApple iOS, 323-325\n memory-injection-based keyloggers, 307\nphysical security attacks, 326-327\n merchants, 54\n local privilege escalation. See privilege\nmessages (SMB)\nescalation\nSMB_COM_NEGOTIATE, 80\nLocal Security Authority Subsystem\nSMB_COM_SESSION_SETUP_\n Service (LSASS) credentials,\nANDX, 80-81\n301-302\nMETA-INF file, 317",
    "Page_103": "556\nMetasploit\nMetasploit, 90-91, 115, 154-155,\nAndroid, 316-323\n442-449\nApple iOS, 323-325\nMetasploit Unleashed course, 344\nOWASP Mobile Security Project, 314\nMeterpreter, 299, 343-344, 446-449\nMobiSec Live Environment Mobile\nRDP connections, creating, 348-349\nTesting Framework, 325\nMetasploitable2, 225\nmodding, 315\nMetasploitable3, 225\nModified Base Metrics, 36\nMeterpreter, 299, 343-344, 446-449\nmodules\nmethodologies, penetration testing, 13-16\nPowerSploit, 351-352\nmethodology section (reports), 494\nRecon-ng\nmetrics, 34-37,494-495\nhackertarget, 96\nMFA (multifactor authentication), 243\nshow modules command, 92-95\nMFP (Management Frame Protection),\nMOM (Microsoft Operations Manager),\n189\n354\n MIB (Management Information Base),\nMoore, H. D., 442\n158\n motivation techniques, social engineering,\nMicrosoft\n137\nMOM (Microsoft Operations\nMount-VolumeShadowCopy script, 352\nManager), 354\nMove-Item command, 349\nMS17-010 security bulletin, 8\nMS17-010 security bulletin, 8\nMSRPC (Microsoft Remote Procedure\n MSAs (master service agreements), 42\nCall), 82\nmsfconsole command, 90-91, 442\nOffice, 309\nmsfdb init command, 443\nmigrate command, 343\nMSRPC (Microsoft Remote Procedure\nMimikatz,169-172,302,432\nCall), 82\nmips file, 319\nmultifactor authentication (MFA), 243\nmitigation\n multilateral NDAs (nondisclosure\nrisk, 48-49\nagreements), 43\nSQL injection, 240\n Mutiny Fuzzing Framework, 459\nXSS (cross-site scripting) vulnerabili-\nties, 258-259\nN\nMITM (man-in-the-middle) attacks, 249\nNAC (network access control), 46,\nARP cache poisoning, 173-175\n179-180\nARP spoofing, 173-175\nname resolution, 148\ndowngrade attacks, 175\nLLMNR (Link-Local Multicast Name\nKARMA, 197\nResolution), 148-150\nsession hijacking, 193\nNetBIOS, 148-150\nMITRE iMAS, 325\n National Cybersecurity and\nMobile AppSec Verification Standard\nCommunications Integration\n(MASVS) Anti-Reversing\nCenter (NCCIC), 113\nControls, 315\nNational Institute of Standards and\nmobile device security, 314-316\nTechnology (NIST), 15, 57, 113",
    "Page_104": "wireless and RF-based\n557\nNational Security Agency (NSA), 439\n NAC (network access control) bypass,\nNCCIC (National Cybersecurity and\n179-180\nCommunications Integration\nname resolution and SMB attacks, 148\nCenter), 113\n LLMNR (Link-Local Multicast\nNcrack, 430-431\nName Resolution), 148-150\nNDAs (nondisclosure agreements), 43\nNetBIOS, 148-150\nneed-to-know, 499\nSMB (Server Message Block),\nNessus scanner, 106-108, 403-404\n151-155\n.NET Common Language Runtime, 309\nnetwork topology, 110-111\nNetBIOS, 148-150\npass-the-hash attacks, 168-169,\nNetcat, 338-342\n302-303\nNetdump, 284 \nroute manipulation attacks, 175-176\nNetdump-server, 284\nSMTP (Simple Mail Transfer Protocol)\nnetstat command, 105\ncommands, 160-163\nnetwork access control. See NAC\n known SMTP server exploits,\n(network access control)\n163-166\nnetwork diagrams, 41\nopen relay, 160\n network infrastructure tests, 11\nTCP port numbers, 159\nnetwork share enumeration, 82\n SNMP (Simple Network Management \nNetwork Time Protocol (NTP), 178\nProtocol), 157-159\nnetwork-based vulnerabilities, 148\nVLAN hopping, 181-183\nDDoS (distributed denial-of-service)\nwireless and RF-based\namplification, 178-179\ncredential harvesting, 199-200\nreflected, 178\ndeauthentication attacks, 186-189\n DHCP (Dynamic Host Control\nevil twin attacks, 185-186\nProtocol)\nfragmentation attacks, 197-198\nspoofing, 183-185\nIV (initialization vector) attacks, 190\nstarvation attacks, 183-185\nKARMA attacks, 197\nDNS cache poisoning, 155-157\n KRACK (key reinstallation attack),\nDoS (denial-of-service), 176-177\n196-197\nFTP (File Transfer Protocol), 166-168\n PNL (preferred network list) attacks,\nKerberos, 169-172\n189\nLDAP (Lightweight Directory Access\nRFID (radio-frequency identifica-\nProtocol), 169-172\ntion) attacks, 200\n man-in-the-browser attacks, 249\nrogue access points, 185\nMITM (man-in-the-middle) attacks,\nsignal jamming, 189\n249\nwar driving, 190\nARP cache poisoning, 173-175\nWEP (Wired Equivalent Privacy)\nARP spoofing, 173-175\nattacks, 190-192\ndowngrade attacks, 175\nWPA (Wi-Fi Protected Access)\nKARMA, 197\nattacks, 192-196\nsession hijacking, 193\nWPS (Wi-Fi Protected Setup), 197",
    "Page_105": "558\nNew York Department of Financial\ncreating, 481-483\n Services Cybersecurity Regulation,\n organizing, 486-488\n51,52\nplugin.output, 486\n New-ElevatedPersistenceOption script,\nno-execute (NX) bit feature, 298\n351\nnondisclosure agreements (NDAs), 43\nNew-NetFirewallRule command, 350\nnonethical hacking, 6-7\n New-UserPersistenceOption script,\n nontraditional assets, vulnerability scans\n351\nfor, 111-112\nNew-VolumeShadowCopy script, 352\nNotary, 314\nNfs, 284\nNotPetya, 8\nNikto, 84, 410-413, 488-489\nNowSecure App Testing:323\nNIST (National Institute of Standards\n NSA (National Security Agency),\nand Technology), 15, 57, 113\n439\nNmap, 155,391-393\nNSE (Nmap Scripting Engine), 69\nenumeration\nhttp-enum script, 83-84\ngroup, 81-82\n smb-enum-groups script, 81-82\nhost, 78-79\nsmb-enum-processes script, 85\nnetwork share, 82\n smb-enum-shares script, 82\nservice, 85\n smb-enum-users.nse script, 80-81\nuser, 80-81\n smtp-open-relay script, 160\nweb page/web application, 83-84\nSNMP-related scripts, 158-159\nscans\nNslookup, 90, 156-157,371-372\nping, 77-78\nNTLM (NT LAN Manager), 80-81, 168,\nTCP connect, 73-74\n302-303\nTCP FIN, 76-77\nNTP (Network Time Protocol), 178\nUDP, 74-75\nNX (no-execute) bit feature, 298\nscripts\nNyeta ransomware, 354\nhttp-enum, 83-84\n smb-enum-groups, 81-82\n smb-enum-processes, 85\nOASP Mobile Security Testing\nsmb-enum-shares, 82\nGuidelines, 16\nsmb-enum-users.nse, 80-81\nOBEX (Object Exchange), 199\n smtp-open-relay, 160\nObjdump, 455-457\nSNMP-related, 158-159\nObject Exchange (OBEX), 199\nZenmap, 393-395\noffensive controls, 49\n nmap command\n Offensive Security Example penetration\n-sF option, 76-77\ntest report, 497\n-sS option, 71-72\noffline brute-force attacks, 243\n-sT option, 73-74\nOllyDbg, 452-453\n-sU option, 74-75\none-click attacks, 260-261\nNmap Scripting Engine (NSE), 69\nonline brute-force attacks, 243\nnodes (Dradis)\nopen relay (SMTP), 160",
    "Page_106": "passive reconnaissance\n559\nOpen Source Intelligence. See OSINT\nOut-EncodedCommand script, 351\n(Open Source Intelligence)\nOut-EncryptedScript script, 351\ngathering\nOut-Minidump script, 352\nOpen Source Security Testing\nout-of-band SQL injection, 233, 237-238\nMethodology Manual\n output file processing (Dradis), 485-486\n(OSSTMM), 15-16\nOverTheWire Wargames, 225\nOpen Web Application Security\nOWASP (Open Web Application Security\nProject. See OWASP (Open Web\nProject), 11, 226\nApplication Security Project)\nAuthentication Cheat Sheet, 222, 246\nOpenAPI, 40, 268\nClickjacking Defense Cheat Sheet, 261\nOpenSCAP, 314\n Enterprise Security API (ESAPI), 240\nOpenSSL, POODLE (Padding Oracle on\niGoat, 325\n Downgraded Legacy Encryption)\nMobile Security Project, 314\nvulnerability, 175\nMutillidae II, 225\nOpenVAS, 401-403\nREST Security Cheat Sheet, 269\nOpenVz, 311\nRisk Rating Methodology, 495\noperators, UNION, 233, 235-236\n SeraphimDroid, 323\nOPTIONS method (HTTP), 217\n ZAP (Zed Attack Proxy), 41, 251,\n organized crime, 9-10\n413-414\noriginal folder, 318\nOzymanDNS and sods, 441\n oscap-docker, 314\n OSINT (Open Source Intelligence)\nP\ngathering, 90\nPacketforge-ng, 197-198\ndefined, 90\npackets\ntools, 370\ncapture, 215\nCensys, 389-390\ncrafting, 85-87\nDig, 371-372\n inspection and eavesdropping, 90\nExifTool, 374-375\n Padding Oracle on Downgraded\nFOCA (Fingerprinting\nLegacy Encryption (POODLE)\nOrganizations with Collected\nvulnerability, 175\nArchives), 374\nPALADIN, 457\nHost, 371-372\n PANs (primary account numbers), 54\nMaltego, 381-382\nparameter pollution, 250-251\nNslookup, 371-372\nParrot, 224, 367\nRecon-ng, 382-389\n passive reconnaissance, 87-88, 370\n Shodan API, 378-380\nCensys, 389-390\nTheharvester, 376-378\ndefined, 70-71\nWhois, 372-373\nDig, 371-372\nOSSTMM (Open Source Security\ndomain enumeration, 88-91\nTesting Methodology Manual),\nExifTool, 374-375\n15-16\nFOCA (Fingerprinting Organizations\nOut-CompressedDll script, 351\nwith Collected Archives), 374",
    "Page_107": "560\npassive reconnaissance\nHost, 371-372\nCain and Abel, 424-425\nMaltego, 381-382\nCeWL,431-432\nNslookup, 90, 156-157, 371-372\nHashcat, 425-427\nOSINT (Open Source Intelligence)\nHydra, 428-429\ngathering, 90\n John the Ripper, 420-425\n packet inspection and eavesdropping,\n Johnny, 425\n90\nMedusa, 430-431\nRecon-ng, 90-102, 382-389\nMimikatz, 432\nhackertarget module, 96\nNcrack, 430-431\nhelp menu, 92\nPatator, 432-433\nkey list command, 96-97\nRainbowCrack, 429-430\nkeys add command, 386\npasswords\nkeys list command, 96-97,\nDradis Framework, 479-480\n386-387\nmanagement, 56\nlaunching, 91\nPatator, 432-433\n main menu and splash page, 91\npath traversals, 262-263\nsearches, 95\npayment brands, 54\nShodan API, 96-102\nPayment Card Industry Data Security\nshow info command, 387-388\n Standard. See PCI DSS (Payment\nshow modules command, 92-95,\nCard Industry Data Security\n383-386\n Standard)\nsupport resources, 389\nPCI DSS (Payment Card Industry Data\nuse command, 387-389\nSecurity Standard), 13-14, 53-56,\nShodan API, 96-102, 378-380\n491-493\nTheharvester, 376-378\nPCI forensic investigators (PFIs), 54\nvulnerability scans, 103\nPCI SSC (Payment Card Industry\nauthenticated, 105\n Security Standards Council), 53\nchallenges of, 109-112\nPeach,459\ncompliance, 109-110\n Pearson Test Prep software, 505\ndiscovery, 106\nexam customization, 507-508\nfull, 106-108\nexam updates, 508\nhow it works, 103-104\noffline access, 506-507\nresults analysis, 112-113\nonline access, 505\nstealth, 108-109\n Premium Edition, 508-509\nsupport resources, 113-115\nPearsonITCertification.com, 506\nunauthenticated, 104-105\n penetration testing, defined, 6-7\nvulnerability management, 115-116\nPenetration Testing Execution Standard\nWhois, 372-373\n(PTES), 13, 16\npassive vulnerability scanners, 108. See\nPenetration Testing Framework, 14\nalso scans\npenetration testing labs. See labs\npass-the-hash attacks, 168-169, 302-303\n penetration testing methodologies, 10,\n password crackers\n13-16",
    "Page_108": "POODLE (Padding Oracle on Downgraded Legacy Encryption) vulnerability\n561\nreasons for following, 10\nlimitations of, 57-58\nweb application tests, 11\n PCI DSS (Payment Card Industry\npenetration testing planning. See planning\nData Security Standard), 53-56\nand preparation\n corporate policies, 43-44\n penetration testing reports. See reports\nexport restrictions, 43\n penetration testing tools. See tools\nimportance of, 29\n permission escalation. See privilege\nlegal concepts, 41\nescalation\ncontracts, 41-42\nPermissions Calculator website, 290\nMSAs (master service agreements), 42\npersistence, 337, 433\nNDAs (nondisclosure agreements), 43\nblind shell, creating, 338-344\nSOWs (statements of work), 42\nC2 (command and control) utilities,\n pre-engagement documentation\n344-345\nbudget, 32-33\n custom daemons and processes,\ncommunication escalation path,\ncreating, 346\n31-32\nreverse shells, creating, 338-344\nconfidentiality of findings, 32\nscheduled tasks, creating, 346\ndisclaimers, 38-39\ntools, 433-434\nimpact analysis and remediation\nusers, creating, 346\ntimelines, 34-38\n Peruggia, 225\n point-in-time assessment, 33\n PFIs (PCI forensic investigators), 54\nrules of engagement, 30\npharming, 126-127\ntarget audience, 29-30\nphishing, 126\ntechnical constraints, 39\nSMS, 134-135\nrisk management, 47-50\nspear, 128-134\nscoping\nvoice, 135\n assessment types, 45\nwhaling, 135\nimportance of, 44\nphysical facility tests, 11\nscope creep, 44\nphysical security attacks, 326-327\n special considerations, 45-46\nPiessens, Frank, 196\ntarget selection, 46-47\nPietraszek, Tadeusz, 441\nstrategy, 47\npiggybacking, 327\n support resources, 40-41\nping scans, 77-78\nplugin.output node (Dradis), 486\n ping sweeps, 77\nPNL (preferred network list) attacks,\npivoting, 347\n189\n post-exploitation scanning, 347-348\n point-in-time assessments, 33\nremote access protocols, 348-349\npolicies\n planning and preparation\ncorporate, 43-44\n compliance-based assessment, 50\nWindows Group Policy, 305-306\nfinancial sector regulations, 50-52\nPOODLE (Padding Oracle on\nhealthcare sector regulations, 52-53\n Downgraded Legacy Encryption)\nkey technical elements, 56-57\nvulnerability, 175",
    "Page_109": "562\nPOP3 (Post Office Protocol v3) port numbers\nPOP3 (Post Office Protocol v3) port\nPR (Privilege Required) metrics, 37\nnumbers, 159\npre-engagement documentation\nport numbers, 159\nbudget, 32-33\nport scans, Nmap, 391-393\ncommunication escalation path, 31-32\nhalf-open, 71-72\nconfidentiality of findings, 32\nping, 77-78\ndisclaimers, 38-39\nSYN, 71-72\nimpact analysis and remediation\nTCP connect, 73-74\ntimelines, 34-38\nTCP FIN, 76-77\n point-in-time assessment, 33\nUDP, 74-75\nrules of engagement, 30\nZenmap, 393-395\ntarget audience, 29-30\nPOST method (HTTP), 217\ntechnical constraints, 39\n Post Office Protocol v3 (POP3) port\n preferred network list (PNL) attacks,\nnumbers, 159\n189\n post-engagement activities, 474-475.\n pretexting, 136\nSee also reports\n primary account numbers (PANs), 54\n post-exploitation techniques\n privilege escalation, 285-286\nblind shells, creating, 338-344\ninsecure SUDO implementations,\nC2 (command and control) utilities,\n294-298\n344-345\nLinux permissions, 286-291\ncleanup process, 356\nret2libc (\"return-to-libc\") attacks, 298\ncustom daemons and processes,\nUnix programs, 291-293\ncreating, 346\nWindows privileges\nlateral movement, 347\nclear-test credentials in LDAP,\npost-exploitation scanning, 347-348\n300-301\nremote access protocols, 348-349\n container security, 310-314\npersistence, 337\nCPassword, 299\nreverse shells, creating, 338-344\nDLL (dynamic link library) hijack-\nscheduled tasks, creating, 346\ning, 303-304\nusers, creating, 346\nexploitable services, 304-305\nWindows legitimate utilities, 349\nGroup Policy, 305-306\nEmpire, 353-354\ninsecure file/folder permissions, 305\nPowerShell, 349-350\nKerberoast, 301\nPowerSploit, 351-353\nkeyloggers, 306-307\nPSExec, 355-356\n LSASS (Local Security Authority\nSysinternals, 355-356\nSubsystem Service) credentials,\nWMI (Windows Management\n301-302\nInstrumentation), 354-355\nSAM (Security Account Manager)\nPowerShell, 349-350, 433, 462\ndatabase, 302-303\nPowerSploit, 351-353,434\nsandbox escape, 308-310\nPowerUp script, 352\nscheduled tasks, 307-308\nPowerView script, 352\nVM (virtual machine) escape, 310",
    "Page_110": "red teams\n563\nPrivilege Required (PR) metrics, 37\nquery throttling, 111\n PRNGs (pseudorandom number\nQUIT command (SMTP), 161\n generators), 247\nProcDump, 301-302\nR\nprocedures, stored, 239-240\nrace conditions, 266-267\nprocesses, creating, 346\nRadamsa, 459\nProfessional Edition (Dradis), 479\nradio-frequency identification (RFID)\nProject Summary screen (Dradis), 481\nattacks, 200\n protocol configurations, insecurity in,\nrainbow tables, 244, 429\n281-284\nRainbowCrack, 429-430\nproxies (HTTP)\nransomware\ndefined, 214\nNyeta, 354\nZAP, 214\nWannaCry, 8\nProxychains, 439\nRapid7, 404\nps command, 343\nRC (Report Confidence), 36\n pseudorandom number generators\nRCPT command (SMTP), 160\n(PRNGs), 247\nrcrack, 429-430\nPSExec, 355-356\nRDP (Remote Desktop Protocol), 348,\nPsExec tool (Sysinternals), 355\n433\nPsFile tool (Sysinternals), 355\nReader (Adobe), 309\nPsGetSid tool (Sysinternals), 355\nReaver, 197\nPsInfo tool (Sysinternals), 355\nrecommendations for remediation,\nPsKill tool (Sysinternals), 355\nreporting, 495-497\nPsList tool (Sysinternals), 355\nreconnaissance. See active\nPsLoggedOn tool (Sysinternals), 355\nreconnaissance; passive\nPsLogList tool (Sysinternals), 355\nreconnaissance\nPsPassword tool (Sysinternals), 355\nRecon-ng, 90-102, 382-389\nPsPing tool (Sysinternals), 355\n hackertarget module, 96\nPsService tool (Sysinternals), 355\nhelp menu, 92\n PsShutdownPsSuspend tool\nkey list command, 96-97\n(Sysinternals), 355\nkeys add command, 386\npsudp, 441\nkeys list command, 386-387\nPTES (Penetration Testing Execution\nlaunching, 91\nStandard), 13, 16\nmain menu and splash page, 91\nPUT method (HTTP), 217\nsearches, 95\npwd command, 343\nShodan API, 96-102\nPython, 461\nshow info command, 387-388\nshow modules command, 92-95,\nQ\n383-386\n QSAs (qualified security assessors), 54\nsupport resources, 389\nqualified security assessors (QSAs), 54\nuse command, 387-389\nQualys scanner, 404\nred teams, 46",
    "Page_111": "564\nredirect attacks\nredirect attacks, 249\n Project Summary screen, 481\nreflected DDoS (distributed denial-\nUpload Manager screen, 484 \nof-service) attacks, 178\nUpload Output from Tool option,\nreflected XSS (cross-site scripting)\n483-484\nattacks, 253-254\nversions, 478-479\nregulations\nhandling, 499-500\nfinancial sector, 50-52\nOffensive Security Example penetra-\nhealthcare sector, 52-53\ntion test report, 497\n PCI DSS (Payment Card Industry\n PCI DSS reporting guidelines,\nData Security Standard), 53-56\n491-493\nRemediation Level (RL), 36\nwriting\nremediation timelines, 34-38\nbest practices, 475, 476-478\nremote access protocols, 348-349\nimportance of, 475-476\nRemote Desktop Protocol (RDP), 348,\nRepresentational State Transfer (REST),\n433\n267\nremote file inclusion (RFI) vulnerabilities,\nrequest for proposal (RFP), 44\n264-265\nrequests (HTTP), 215-218\nRemove-Comments script, 351\nres directory, 318\nRemove-VolumeShadowCopy script, 352\nresource command, 343\nReport Confidence (RC), 36\nresources, support, 40-41\nreporting/html module, 102\nCAPEC (Common Attack Pattern\nreports\n Enumeration and Classification),\nclassifying, 499\n114\ncommon elements of, 490\nCVE (Common Vulnerabilities and\n executive summary, 493\nExposures), 114-115\nfindings and recommendations,\nCWE (Common Weakness \n495-497\nEnumeration), 115\nmethodology, 494\n JPCERT Japan Computer Emergency\nmetrics and measurements, 494-495\n Response Team), 113\ncommunications, 500-501\nNIST (National Institute of Standards\ndistribution, 499-500\nand Technology), 113\nDradis Framework\nUS-CERT (U.S. Computer Emergency\nChoose a Tool dropdown, 484-485\nReadiness Team), 113\ndata import, 483\nresources.arsc directory, 318\nimported scans, viewing, 488-490\nresponses\nlaunching, 479\nHTTP (Hypertext Transfer Protocol),\nlogin screen, 480\n215-218\nnode organization, 486-488\nport scans\nnode/subnode creation, 481-483\nSYN scans, 71\noutput file processing, 485-486\nTCP connect scans, 73\npassword creation, 479-480\nTCP FIN scans, 76\nplugin.output node, 486\nUDP scans, 75",
    "Page_112": "scarcity, social engineering and\n565\n REST (Representational State Transfer),\nSANS Institute InfoSec Reading Room,\n267\n493\nRESTful (REST) APIs, 269\nSANS Investigative Forensic Toolkit\nret2libc (\"return-to-libc\") attacks, 298\n(SIFT) Workstation, 458\nreverse shells, 238, 338-344\nSaved State Analysis, 302\n RF-based attacks. See wireless network\nscans, 391-393\nvulnerabilities\n Nmap port scans\n RFI (remote file inclusion) vulnerabilities,\nhalf-open, 71-72\n264-265\nping, 77-78\nRFP (request for proposal), 44\nSYN, 71-72\nrisk, 47-50\nTCP connect, 73-74\nacceptance, 48\nTCP FIN, 76-77\nappetite for risk, 49-50\nUDP, 74-75\navoidance, 49\npost-exploitation, 347-348\nmitigation, 48-49\ntools, 18-19\n Risk Rating Methodology (OWASP),\nvulnerability, 103\n495\nauthenticated, 105\nsharing, 49\nchallenges of, 109-112\ntolerance, 47-48\ncompliance, 109-110\ntransfer, 49\nDirbuster, 419\nRL (Remediation Level), 36\ndiscovery, 106\nRlogin, 284\nfull, 106-108\nRocket, 311\nhow it works, 103-104\nrockyou wordlist, 424\nmanagement, 115-116\nrogue access points, 185\nNessus, 403\nrogue DHCP servers, 183-185\nNexpose, 403-404\nRoot Me, 225\nNikto, 84, 410-413, 488-489\nroute manipulation attacks, 175-176\nOpenVAS, 401-403\nRSET command (SMTP), 161\nQualys, 404\nRsh, 284\nresults analysis, 112-113\nRuby, 461-462\nSQLmap, 404-410\nrules of engagement, 30\nstealth, 108-109\nrun command, 451\nsupport resources, 113-115\nRwhod, 284\nunauthenticated, 104-105\nW3AF, 415-419\nS\n ZAP (Zed Attack Proxy), 41, 214,\nS (Scope) metrics, 37\n251, 413-414\nSAM (Security Account Manager)\nvulnerability scans, 400\ndatabase, 302-303\nScapy, 85-87\nSamba, 284\nscapy command, 86\nSamurai Web Testing Framework, 225\nscarcity, social engineering and,\nsandboxes, escaping, 308-310\n137",
    "Page_113": "566\nscheduled tasks\nscheduled tasks\nOut-EncodedCommand, 351\ncreating, 346\nOut-EncryptedScript, 351\nprivilege escalation and, 307-308\nOut-Minidump, 352\nScope (S) metrics, 37\nPowerUp, 352\nscoping. See also planning and\nPowerView, 352\npreparation\nRemove-Comments, 351\n assessment types, 45\n Remove-VolumeShadowCopy, 352\nimportance of, 44\nSet-CriticalProcess, 352\nscope creep, 44\nSet-MasterBootRecord, 352\n special considerations, 45-46\nsmb-enum-groups, 81-82\ntarget selection, 46-47\nsmb-enum-processes, 85\nscreenshot command, 448\nsmb-enum-shares, 82\nscripts\n smb-enum-users.nse, 80-81\nAdd-Persistence, 351\n smtp-open-relay, 160\ndocker-bench-security, 313\nSNMP-related, 158-159\nFind-AVSignature, 351\n SDKs (software development kits), 40\nGet-GPPAutologon, 352\nsearch command, 343\nGet-GPPPassword, 352\nsearches, Recon-ng, 95\nGet-HttpStatus, 352\nSearchSploit, 151-154, 163-166\nGet-Keystrokes, 352\n SEC (Securities and Exchange\nGet-MicrophoneAudio, 352\nCommission), 52\nGet-SecurityPackages, 351\n Secure Computing Mode (seccomp), 309\nGet-TimedScreenshot, 352\n Secure File Transfer Protocol (SFTP),\nGet-VaultCredential, 352\n166\nGet-VolumeShadowCopy, 352\nSecure SMTP (SSMTP) port number,\nhttp-enum, 83-84\n159\nInstall-SSP, 351\n Securities and Exchange Commission\nInvoke-CredentialInjection, 351\n(SEC), 52\nInvoke-DllInjection, 351\n Security Account Manager (SAM)\nInvoke-Mimikatz, 352\ndatabase, 302-303\nInvoke-NinjaCopy, 352\nSecurity Enhanced Linux (SELinux), 293\nInvoke-Portscan, 352\nsecurity misconfigurations, 262\nInvoke-ReflectivePEInjection, 351\ncookie manipulation attacks, 263-264\nInvoke-ReverseDnsLookup, 352\n directory traversal vulnerabilities,\nInvoke-Shellcode, 351\n262-263\nInvoke-TokenManipulation, 351\nSecurity Onion, 369-370, 457\nInvoke-WmiCommand, 351\nSecurity Requirements metrics, 36\nMount-VolumeShadowCopy, 352\n Security Standards for the Protection\nNew-ElevatedPersistenceOption, 351\nof Electronic Protected Health\nNew-UserPersistenceOption, 351\n Information. See HIPAA Security\nNew-VolumeShadowCopy, 352\nRule\nOut-CompressedDll, 351\nSELECT statement, 228",
    "Page_114": "smtp-open-relay script \n567\nSelect-String command, 349\nsharing risk, 49\nSELinux (Security Enhanced Linux), 293\nshell command, 343\nSendmail, 284\nshells\nsensors, egress, 327\nbash, 460-461\nSeraphimDroid, 323\nblind, 338-344\n serial console debugging, 326\nreverse, 238, 338-344\nServer Message Block (SMB), 8, 76,\nShodan API, 96-102, 378-380\n151-155\nshodan_hostname module, 100\n servers, HTTP (Hypertext Transfer\nshoulder surfing, 137\nProtocol), 213\nshow info command, 387-388\n service dradis start command, 479\nshow modules command, 383-386\nservice providers, 54-55\nshow options command, 155\nservice set identifiers (SSIDs), 46, 186\n SIFT (SANS Investigative Forensic\nservices\nToolkit) Workstation, 458\nenumeration, 85\nsignal jamming, 189\n insecure configurations of, 281-284\nsilver ticket attacks (Kerberos), 172\nsession hijacking, 245-249\nSimple Network Management Protocol.\n session riding, 260-261\nSee SNMP (Simple Network\n session sniffing, 249\nManagement Protocol)\nsessions\nSimple Object Access Protocol (SOAP),\nHTTP (Hypertext Transfer Protocol),\n40,267\n213\nSkadi, 457\nweb, 221-224\n Smali, 318\nSET (Social-Engineer Toolkit), 11-12,\nsmalidea, 318\n129-134\nSmart Install, 281\nset LHOST command, 155\nSMB (Server Message Block), 8, 76,\nset RHOST command, 155\n151-155\nSet-CriticalProcess script, 352\nSMB_COM_NEGOTIATE message, 80\nSet-MasterBootRecord script, 352\nSMB_COM_SESSION_SETUP_ANDX\nsetoolkit command, 129\nmessage, 80-81\n-sF option (nmap command), 76-77\nsmb-enum-groups script, 81-82\nSFI (software fault isolation), 309\nsmb-enum-processes script, 85\nSFTP (Secure File Transfer Protocol),\nsmb-enum-shares script, 82\n166\nsmb-enum-users.nse script, 80-81\nSGID (set-group-ID)\nSMS phishing, 134-135\nLinux, 289\nSMTP (Simple Mail Transfer Protocol)\nUnix, 291-293\ncommands, 160-163\nSHA-1 algorithm, 166\nknown SMTP server exploits, 163-166\nSHA-2 algorithm, 166\n open relay, 160\nSHA-512 algorithm, 166\nSMTPS (SMTP over SSL), 159\nThe Shadow Brokers, 8\nTCP port numbers, 159\nshared_prefs folder, 319\nsmtp-open-relay script, 160",
    "Page_115": "568\nSMTPS (SMTP over SSL)\nSMTPS (SMTP over SSL), 159\nspoofing\nsmtp-user-enum tool, 161-163\nARP, 173-175\n-sn option (nmap command), 77-78\nDHCP (Dynamic Host Control\nsniffing, session, 249\nProtocol), 183-185\nSNMP (Simple Network Management\n SQL injection vulnerabilities, 228\nProtocol), 157-159\nblind SQL injection, 237\nSOAP (Simple Object Access Protocol),\nBoolean technique, 233, 237\n40, 267\ncategories of, 232-234\nsocat, 345\n database fingerprinting, 234-235\nsocial engineering attacks, 11-12\nerror-based technique, 233\ncharacteristics of, 125-126\nexamples of, 228-232\nelicitation, 135\nmitigations, 240\ninterrogation, 136\nout-of-band technique, 233, 237-238\nmalvertising, 127-128\nSQL statements, 228-232\n motivation techniques, 137\nstored procedures, 239-240\npharming, 126-127\ntime-delay technique, 233, 239\nphishing, 126\n UNION operator technique, 233,\nSMS, 134-135\n235-236\nspear, 128-134\n SQLi. See SQL injection vulnerabilities\nvoice phishing, 135\nSQLmap, 404-410\nwhaling, 135\n-sS option (Nmap), 71-72\npretexting, 136\n SSIDs (service set identifiers), 46, 186\nSET (Social-Engineer Toolkit),\nSSLStrip, 174\n129-134\nSSMTP (Secure SMTP) port number,\nshoulder surfing, 137\n159\nUSB key drop, 138\n-sT option (nmap command), 73-74\nsocial engineering tests, 11-12, 129-134\nstack-smashing protection, 298\n social proof, in social engineering, 137\nSTARTTLS, 159, 160\nSocial-Engineer Toolkit. See SET\nstarvation attacks (DHCP), 183-185\n(Social-Engineer Toolkit)\nstatements (SQL), 228-232\nSocial-Engineer Toolkit (SET), 11-12\nstatements of work (SOWs), 42\nsoftware. See tools\n state-sponsored attackers, 10\nsoftware assurance tools, 458-459\nstatic binary analysis, 316\nsoftware development kits (SDKs), 40\nstealth scans, 108-109\nsoftware fault isolation (SFI), 309\nsticky bits, 288\nSonarQube, 458\nstored DOM-based attacks, 263-264\nsource code comments, exploits in,\nstored procedures, 239-240\n265-266\nstored XSS (cross-site scripting) attacks,\nSOWs (statements of work), 42\n255-256\nspear phishing, 128-134\nstudy plans (exam prep), 509\nSpecial Publication 800-57 (NIST), 57\n-sU option (nmap command), 74-75\nSpecial Publication 800-115 (NIST), 15\nsudo command, 286-287, 294-298",
    "Page_116": "tools \n569\nSUID (set-user-ID)\nTCPDUMP, 90,215,282-284\nLinux, 289\nteams\nUnix, 291-293\nblue, 46\nSun Tzu, 9\nred, 46\n support resources, 40-41\ntechnical constraints, 39\nCAPEC (Common Attack Pattern\nTelnet, 281\nEnumeration and Classification),\ntemporal groups, 34-37\n114\ntests\nCVE (Common Vulnerabilities and\n gray-box, 13\nExposures), 114-115\n network infrastructure, 11\nCWE (Common Weakness\nphysical facility, 11\nEnumeration), 115\n social engineering, 11-12\n intentionally vulnerable systems,\nwhite-box, 12-13\n224-227\nwireless network, 11\n JPCERT Japan Computer Emergency\nTheharvester, 376-378\nResponse Team), 113\ntheoretical vulnerabilities, 38\nNIST (National Institute of Standards\nthreat actors, 9-10\nand Technology), 113\nthreats. See attacks\nUS-CERT (U.S. Computer Emergency\ntime of check to time of use (TOCTOU)\nReadiness Team), 113\nattacks, 266-267\nSwagger, 40, 268\ntime-delay SQL injection, 233, 239\nSYN flood attacks, 176\ntimeline, remediation, 34-38\nSYN scans, 71-72\nTimes, Tim, 90-91\n sysinfo command, 449\nTOCTOU (time of check to time of use),\nSysinternals, 302, 355-356\n266-267\nsystem cleanup, 356\ntolerance, risk, 47-48\n system diagrams, 41\ntools, 18-19, 313. See also commands;\nSYSTEM privileges, 304\nscripts\nADIA (Appliance for Digital\nT\n Investigation and Analysis), 457\nAFL (American Fuzzy Lop), 459\ntables, rainbow, 244, 429\ntailgating, 327\nAircrack-ng suite, 186-189, 191-196\n target audience, identification of, 29-30\nAireplay-ng, 188, 191, 194-195\ntarget selection, 46-47\nAirmon-ng, 186-187, 191, 194\ntasks, scheduled\nAirodump-ng, 188, 191, 194-195\ncreating, 346\nAnchore, 313\n privilege escalation, 307-308\nAndroick, 323\nTCP (Transmission Control Protocol)\nApktool, 322\n Nmap scans\nApple Remote Desktop, 433\nTCP connect, 73-74\nAqua Security, 313\nTCP FIN, 76-77\nBane, 313\nport numbers, 159\nbash, 460-461",
    "Page_117": "570\ntools\nBeEF, 449-450\nEmpire, 171,353-354,434\nBurp, 214\n Encryption, 439-440\nCain and Abel, 424-425\nEnum4linux, 395-400\nCAINE (Computer Aided Investigative\nEttercap, 199\nEnvironment), 457\nExifTool, 374-375\nCensys, 389-390\nFeederbot and Moto, 442\nCeWL, 431-432\nFindbugs, 458\nClair, 313\nFindsecbugs, 458\nCydia Substrate, 315\n FOCA (Fingerprinting Organizations\nDagda, 313\nwith Collected Archives), 374\nDEFT (Digital Evidence & Forensics\nFrida, 315\nToolkit), 457\nGDB (GNU Project Debugger),\nDeNiSe, 441\n450-452\nDev-Sec.io, 313\nHashcat, 425-427\nDig, 371-372\nHeyoka, 441\nDirbuster, 419\nHost, 371-372\n dns2tcp, 441\nHydra, 428-429\nDNScapy, 441\nIDA, 454-455\nDNScat, 441\niGoat, 325\nDNScat2, 345,441\niMAS, 325\n DNSdumpster, 88\n Immunity, 454\nDNSRecon, 67-69\nIodine, 441\n docker-bench-security, 313\n John the Ripper, 420-425\ndocker-explorer, 314\nJohnny, 425\n Dradis Framework\nKerberoast, 301\nChoose a Tool dropdown, 484-485\nkeyloggers, 306-307\ndata import, 483\nLanman, 80-81\nimported scans, viewing, 488-490\nLinux distributions, 224, 365\nlaunching, 479\nBlackArch Linux, 224, 367-368\nlogin screen, 480\nCAINE (Computer Aided\n node organization, 486-488\n Investigative Environment), 369\nnode/subnode creation, 481-483\nKali Linux, 224, 366\noutput file processing, 485-486\nParrot, 224, 367\n password creation, 479-480\nSecurity Onion, 369-370\nplugin.output node, 486\nMaltego, 381-382\nProject Summary screen, 481\nMedusa, 430-431\nUpload Manager screen, 484\nMetasploit, 90-91, 115, 442-449\nUpload Output from Tool option,\nMetasploit Unleashed course, 344\n483-484\nMeterpreter, 299, 343-344,\nversions, 478-479\n446-449\nDropboxC2 (DBC2), 345\nRDP connections, creating, 348-349\nedb debugger, 452-454\nMimikatz, 169-172, 432",
    "Page_118": "tools\n571\nMobiSec Live Environment Mobile\nkeys list command, 386-387\nTesting Framework, 325\nlaunching, 91\nMutiny Fuzzing Framework, 459\n main menu and splash page, 91\nNcrack, 430-431\nsearches, 95\nNessus, 106-108, 403-404\nShodan API, 96-102\nNetcat, 338-342\nshow info command, 387-388\nNikto, 84, 410-413, 488-489\nshow modules command, 92-95,\nNmap. See Nmap\n383-386\nNotary, 314\nsupport resources, 389\nNslookup, 90, 156-157, 371-372\nuse command, 387-389\nNTLM, 80-81\nSecurity Onion, 457\n Objdump, 455-457\nShodan API, 96-102, 378-380\nOllyDbg, 452-453\n SIFT (SANS Investigative Forensic\nOpenVAS, 401-403\nToolkit) Workstation, 458\n oscap-docker, 314\nSkadi, 457\nOzymanDNS and sods, 441\nsmtp-user-enum, 161-163\n Packetforge-ng, 197-198\nsocat, 345\nPALADIN, 457\nSonarQube, 458\nPatator, 432-433\nSQLmap, 404-410\nPeach, 459\nSSLStrip, 174\nPearson Test Prep software, 505\nSysinternals, 355-356\nexam customization, 507-508\ntcpdump, 90,215,282-284\nexam updates, 508\nTheharvester, 376-378\noffline access, 506-507\nTor, 438-439\n online access, 505\nTrevorC2, 345\nPremium Edition, 508-509\nTry-SQL Editor, 229\nPowerShell, 349-350, 433, 462\nTshark, 284\nPowerSploit, 351-353, 434\nTwittor, 345\nProcDump, 301\nuse cases for, 365\nProxychains, 439\nVeil, 434-437\nPSExec,355-356\nvmss2core, 301\npsudp, 441\nVNC, 433\nQualys scanner, 404\nW3AF scanner, 415-419\nRadamsa, 459\nW3AFusage, 419\nRainbowCrack, 429-430\nWebGoat, 225,231, 254\nRDP (Remote Desktop Protocol), 433\nWhois, 372-373\nReaver, 197\nWindows Debugger, 452\nRecon-ng, 90-102, 382-389\nWireshark, 90, 216\nhackertarget module, 96\nWMI (Windows Management\nhelp menu, 92\nInstrumentation), 354-355\nkey list command, 96-97\nWMImplant, 345\nkeys add command, 386\nwsc2, 345",
    "Page_119": "572\ntools\nX server forwarding, 433\nUSB key drops, 138\nXPosed, 315\nUS-CERT (U.S. Computer Emergency\nZAP (Zed Attack Proxy), 41, 214, 251,\nReadiness Team), 113\n413-414\nuse cases, 365\nZenmap, 393-395\nuse command, 387-389\nTor, 438-439\nuse exploit/windows/smb/ms17_010_\nTRACE method (HTTP), 217\neternalblue command, 155\ntransfer of risk, 49\nuser enumeration, 80-81\nTrevorC2, 345\nUser Interaction (UI) metrics, 37\nTry2Hack, 225\nuseradd command, 295\nTry-SQL Editor, 229\nusermod command, 294-295\nTshark, 284\nusers, creating, 346\ntunneling, DNS (Domain Name System),\n USSD (Unstructured Supplementary\n440-442\nService Data), 323\nTwittor, 345\nutilities. See tools\nU\nV\n UDP (User Datagram Protocol), Nmap\nVanhoef, Mathy, 196\nUDP scans, 74-75\nVeil, 434-437\nUI (User Interaction) metrics, 37\nverbose error handling, 266\nunauthenticated scans, 104-105\nVicnum, 225\nuniform resource locators (URLs),\nvisudo command, 296\n219-220\nVLANs (virtual LANs), hopping,\nunilateral NDAs (nondisclosure\n181-183\nagreements), 43\nVMs (virtual machines)\nUNION operator, 233, 235-236\ncontainers compared to, 311-312\nUnix, privilege escalation in, 291-293\n dumping memory from, 301\nunprotected APIs, 267-270\nescaping, 310\n Unstructured Supplementary Service\n.vmsn file extension, 301\nData (USSD), 323\n.vmss file extension, 301\nUpdate Products button (Pearson Test\nvmss2core, 301-302\nPrep software), 508\nVMware Snapshot, 302\nUPDATE statement, 228\nVNC, 348,433\nupdating Pearson Test Prep software,\nvoice phishing, 135\n508\nVolatility Foundation, 302\nupload command, 343\nVolatility Framework, 301\nUpload Manager screen (Dradis), 484\nVRFY command (SMTP), 161\nUpload Output from Tool option\nvulnerability management, 115-116\n(Dradis), 483-484\n chaining analysis, 37-38\nurgency, in social engineering, 137\nimpact analysis, 34-37\nURLs (uniform resource locators),\ntheoretical vulnerabilities, 38\n219-220\nvulnerability scans, 103, 400",
    "Page_120": "web applications \n573\nauthenticated, 105\nauthorization-based vulnerabilities\nchallenges of, 109-112\n Insecure Direct Object Reference\ncompliance, 109-110\nvulnerabilities, 251-252\n Dirbuster, 419\n parameter pollution, 250-251\ndiscovery, 106\nclickjacking, 261\nfull, 106-108\ncommand injection vulnerabilities,\nhow it works, 103-104\n241-242\nNessus, 403-404\n CSRF (cross-site request forgery),\nNikto, 84, 410-413,488-489\n260-261\nOpenVAS, 401-403\nenumeration, 83-84\nQualys, 404\nfile inclusion vulnerabilities\nresults analysis, 112-113\nLFI (local file inclusion), 264\nSQLmap, 404-410\nRFI (remote file inclusion), 264-265\nstealth, 108-109\nHTML injection vulnerabilities, 241\nsupport resources, 113-115\nHTTP (Hypertext Transfer Protocol),\ntools, 18-19\n213-221\nunauthenticated, 104-105\nclients, 213\nproxies, 214\nW3AF, 415-419\n request/response model, 215-218\n ZAP (Zed Attack Proxy), 41, 214, 251,\nservers, 213\n413-414\nsessions, 213\nURLs (uniform resource locators),\nW\n219-220\nW3AF scanner, 415-419\ninsecure code practices\nW3AFusage, 419\ncode signing, lack of, 270\nW3Schools, 218, 229\nerror-handling errors, 266\nWADL (Web Application Description\nhard-coded credentials, 266\nLanguage), 40, 268\nhidden elements, 270\nWAFs (web application firewalls), 46\nrace conditions, 266-267\nWannaCry, 8\n source code comments, 265-266\nwar driving, 190\nunprotected APIs, 267-270\nlabs for, 224-227\nWassenaar Arrangement, 439\nweak cryptographic algorithms, 243-244\n security misconfigurations, 262\nWeb Application Description Language\n cookie manipulation attacks,\n(WADL), 40, 268\n263-264\nweb applications\n directory traversal vulnerabilities,\nauthentication-based vulnerabilities\n262-263\ncredential brute forcing, 243-245\nSQL injection vulnerabilities, 228\ndefault credential exploits, 249-250\nblind SQL injection, 237\nKerberos exploits, 250\nBoolean technique, 233, 237\nredirect attacks, 249\ncategories of, 232-234\nsession hijacking, 245-249\ndatabase fingerprinting, 234-235",
    "Page_121": "574\nweb applications\nerror-based technique, 233\nEmpire, 353-354\nexamples of, 228-232\nPowerShell, 349-350\nmitigations, 240\nPowerSploit, 351-353\nout-of-band technique, 233, 237-238\nPSExec, 355-356\nstored procedures, 239-240\nSysinternals, 355-356\ntime-delay technique, 233, 239\nWMI (Windows Management\nUNION operator technique, 233,\n Instrumentation), 354-355\n235-236\nprivilege escalation\n clear-test credentials in LDAP,\ntests, 11\nWAFs (web application firewalls), 46\n300-301\nweb sessions, 221-224\n container security, 310-314\nXSS (cross-site scripting) vulnerabili-\nCPassword, 299\nties, 252-253\nDLL (dynamic link library)\nDOM-based XSS attacks, 256-257\nhijacking, 303-304\nevasion techniques, 257-258\nexploitable services, 304-305\nmitigations, 258-259\nGroup Policy, 305-306\nreflected XSS attacks, 253-254\n insecure file/folder permissions, 305\nstored XSS attacks, 255-256\nKerberoast, 301\nweb browsers, 309\nkeyloggers, 306-307\nweb form-grabbing keyloggers, 307\nLSASS (Local Security Authority\nweb page enumeration, 83-84\n Subsystem Service) credentials,\nWeb Security Dojo, 225, 227\n301-302\nWeb Services Description Language\nSAM (Security Account Manager)\n(WSDL), 40, 268\ndatabase, 302-303\nweb sessions, 221-224\nsandbox escape, 308-310\nwebcam_list command, 344\nscheduled tasks, 307-308\nwebcam_snap command, 344\nVM (virtual machine) escape, 310\nWebGoat, 225,231, 254\nSysinternals, 302\nWEP (Wired Equivalent Privacy) attacks,\nWinRM (Windows Remote\n190-192\nManagement), 354\nwhaling, 135\nWMI (Windows Management\nwhite lists, 46\nInstrumentation), 172, 354-355\nwhite-box tests, 12-13, 47\nWinRM (Windows Remote\nWhois, 372-373\nManagement), 354\nWi-Fi Protected Access (WPA) attacks,\nWired Equivalent Privacy (WEP),\n192-196\n190-192,243\nWi-Fi Protected Setup (WPS), 197\nwireless adapters, 189\nWiGLE, 190\nwireless network tests, 459\nWindows\nwireless network vulnerabilities\nDebugger, 452\ncredential harvesting, 199-200\nlegitimate utilities for post-exploitation\n deauthentication attacks, 186-189\ntasks, 349\nevil twin attacks, 185-186",
    "Page_122": "Zygote\n575\nfragmentation attacks, 197-198\nwriting reports\nIV (initialization vector) attacks, 190\nbest practices, 475, 476-478\nKARMA attacks, 197\nimportance of, 475-476\n KRACK (key reinstallation attack),\nwsc2, 345\n196-197\nWSDL (Web Services Description\nnetwork tests, 11\nLanguage), 40, 268\n PNL (preferred network list) attacks,\n189\nX\n RFID (radio-frequency identification)\nX server forwarding, 348, 433\nattacks, 200\nx86 file, 319\nrogue access points, 185\nx86_64 file, 319\n signal jamming, 189\nXN (eXecute Never), 324\nwar driving, 190\nXPosed, 315\nWEP (Wired Equivalent Privacy)\n XSS (cross-site scripting) vulnerabilities,\nattacks, 190-192\n252-253\nWPA (Wi-Fi Protected Access) attacks,\nDOM-based XSS attacks, 256-257\n192-196\nevasion techniques, 257-259\nWPS (Wi-Fi Protected Setup), 197\nreflected XSS attacks, 253-254\nWireshark, 90, 216\nstored XSS attacks, 255-256\nWMI (Windows Management\n Instrumentation), 172, 354-355\nY\nWMImplant, 345\nwordlists\nYppasswdd, 284\nYpserv, 284\n creating with CeWL, 431-432\nYpxfrd, 284\ndefined, 423\nrockyou, 424\nz\nworkgroups, 150\nWPA (Wi-Fi Protected Access) attacks,\nZAP (Zed Attack Proxy), 41, 214, 251,\n192-196\n413-414\nWPS (Wi-Fi Protected Setup), 197\nZenmap, 393-395\n\"Writing a Penetration Testing Report\"\n zero-day attacks, 8\nwhitepaper, 493\nZygote, 319-320"
}